{
    "docs": [
        {
            "location": "/", 
            "text": "Available Extensions\n\n\nPyMdown Extensions provides a handful of extensions for use with Python Markdown.  Keep in mind, the PyMdown extensions were designed to work with the default extensions, so your mileage may vary in regards to compatibility when paired with other 3\nrd\n party extensions.\n\n\nCheck out the individual extension document pages for more info on the available extensions.\n\n\n\n\nReminder\n\n\nPlease read the \nUsage Notes\n for information on extension compatibility and general notes to be aware of when using these extensions.\n\n\n\n\n\n\n\n\n\n\nExtension\n\n\nName\n\n\n\n\n\n\n\n\n\n\narithmatex\n\n\npymdownx.arithmatex\n\n\n\n\n\n\nb64\n\n\npymdownx.b64\n\n\n\n\n\n\nbetterem\n\n\npymdownx.betterem\n\n\n\n\n\n\ncaret\n\n\npymdownx.caret\n\n\n\n\n\n\ncritic\n\n\npymdownx.critic\n\n\n\n\n\n\nemoji\n\n\npymdownx.emoji\n\n\n\n\n\n\nextra\n\n\npymdownx.extra\n\n\n\n\n\n\nextrarawhtml\n\n\npymdownx.extrarawhtml\n\n\n\n\n\n\ngithub\n\n\npymdownx.github\n\n\n\n\n\n\ngithubemoji (\ndeprecated\n)\n\n\npymdownx.githubemoji\n\n\n\n\n\n\nheaderanchor\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nmagiclink\n\n\npymdownx.magiclink\n\n\n\n\n\n\nmark\n\n\npymdownx.mark\n\n\n\n\n\n\nprogressbar\n\n\npymdownx.progressbar\n\n\n\n\n\n\nsmartsymbols\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\nsuperfences\n\n\npymdownx.superfences\n\n\n\n\n\n\ntasklist\n\n\npymdownx.tasklist\n\n\n\n\n\n\ntilde\n\n\npymdownx.tilde\n\n\n\n\n\n\ninlinehilite\n\n\npymdownx.inlinehilite\n\n\n\n\n\n\npathconverter\n\n\npymdownx.pathconverter\n\n\n\n\n\n\nplainhtml\n\n\npymdownx.plainhtml\n\n\n\n\n\n\npymdown (\ndeprecated\n)\n\n\npymdownx.pymdown", 
            "title": "PyMdown Extensions"
        }, 
        {
            "location": "/#available-extensions", 
            "text": "PyMdown Extensions provides a handful of extensions for use with Python Markdown.  Keep in mind, the PyMdown extensions were designed to work with the default extensions, so your mileage may vary in regards to compatibility when paired with other 3 rd  party extensions.  Check out the individual extension document pages for more info on the available extensions.   Reminder  Please read the  Usage Notes  for information on extension compatibility and general notes to be aware of when using these extensions.      Extension  Name      arithmatex  pymdownx.arithmatex    b64  pymdownx.b64    betterem  pymdownx.betterem    caret  pymdownx.caret    critic  pymdownx.critic    emoji  pymdownx.emoji    extra  pymdownx.extra    extrarawhtml  pymdownx.extrarawhtml    github  pymdownx.github    githubemoji ( deprecated )  pymdownx.githubemoji    headeranchor  pymdownx.headeranchor    magiclink  pymdownx.magiclink    mark  pymdownx.mark    progressbar  pymdownx.progressbar    smartsymbols  pymdownx.smartsymbols    superfences  pymdownx.superfences    tasklist  pymdownx.tasklist    tilde  pymdownx.tilde    inlinehilite  pymdownx.inlinehilite    pathconverter  pymdownx.pathconverter    plainhtml  pymdownx.plainhtml    pymdown ( deprecated )  pymdownx.pymdown", 
            "title": "Available Extensions"
        }, 
        {
            "location": "/installation/", 
            "text": "Overview\n\n\nPymdown Extensions is built on top of a few requirements.  If installing, the requirements will be installed automatically unless the requirement is optional.\n\n\nRequirements\n\n\nIn order for PyMdown Extensions to work, there are a couple of prerequisites.\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nPython Markdown 2.6.0+\n\n\nYes\n\n\nPython Markdown must be installed as it is the Markdown parser that is being used.\n\n\n\n\n\n\nPygments 2.0.1+ (optional)\n\n\nNo\n\n\nIf Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.\n\n\n\n\n\n\n\n\nInstallation\n\n\nInstallation is easy with pip:\n\n\npip install pymdown-extensions\n\n\n\n\n\nIf you want to manually install it, run \npython setup.py build\n and \npython setup.py install\n.  You should be able to access the extensions in Python Markdown under the namespace \npymdownx.\nextension\n.\n\n\nIf you would like to modify the code, you can install it via: \npip install --editable .\n.  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#overview", 
            "text": "Pymdown Extensions is built on top of a few requirements.  If installing, the requirements will be installed automatically unless the requirement is optional.", 
            "title": "Overview"
        }, 
        {
            "location": "/installation/#requirements", 
            "text": "In order for PyMdown Extensions to work, there are a couple of prerequisites.     Name  Required  Details      Python Markdown 2.6.0+  Yes  Python Markdown must be installed as it is the Markdown parser that is being used.    Pygments 2.0.1+ (optional)  No  If Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.", 
            "title": "Requirements"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installation is easy with pip:  pip install pymdown-extensions  If you want to manually install it, run  python setup.py build  and  python setup.py install .  You should be able to access the extensions in Python Markdown under the namespace  pymdownx. extension .  If you would like to modify the code, you can install it via:  pip install --editable . .  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.", 
            "title": "Installation"
        }, 
        {
            "location": "/usage_notes/", 
            "text": "Incompatible Extensions\n\n\nPyMdown Extensions includes three extensions that are meant to \nreplace\n their counterpart in the default Python Markdown extensions.  You need to either use the PyMdown Extensions version or use the Python Markdown version; \nthey cannot be loaded at the same time\n.\n\n\n\n\npymdownx.superfences\n replaces \nmarkdown.extensions.fenced_code\n.\n\n\npymdownx.betterem\n replaces \nmarkdown.extensions.smartstrong\n.\n\n\npymdownx.extra\n replaces \nmarkdown.extensions.extra\n.\n\n\npymdownx.github\n and \npymdownx.pymdown\n serve a similar function as \npydmown.extra\n so either one would also be used in place of \nmarkdown.extensions.extra\n.\n\n\npymdownx.extra\n, \npymdownx.github\n, \npymdownx.pymdown\n are all convenience extensions that batch include a number of extensions; \ndo not mix these with each other\n as they will cause certain extensions to be included multiple times.\n\n\n\n\nInclude Extensions Only Once\n\n\nIn general, you shouldn\nt include an extension more than once.  PyMdown Extensions provides three extensions that batch include a number of extensions for convenience: \npymdownx.extra\n, \npymdownx.github\n, and \npymdownx.pymdown\n.  If you try to include more than one of these convenience extensions at the same time, you will include certain extensions multiple times possibly leading to unexpected results.  Also, be aware of what extensions these convenience extensions include and do not accidentally re-include them individually or unexpected issues my arise.", 
            "title": "Usage Notes"
        }, 
        {
            "location": "/usage_notes/#incompatible-extensions", 
            "text": "PyMdown Extensions includes three extensions that are meant to  replace  their counterpart in the default Python Markdown extensions.  You need to either use the PyMdown Extensions version or use the Python Markdown version;  they cannot be loaded at the same time .   pymdownx.superfences  replaces  markdown.extensions.fenced_code .  pymdownx.betterem  replaces  markdown.extensions.smartstrong .  pymdownx.extra  replaces  markdown.extensions.extra .  pymdownx.github  and  pymdownx.pymdown  serve a similar function as  pydmown.extra  so either one would also be used in place of  markdown.extensions.extra .  pymdownx.extra ,  pymdownx.github ,  pymdownx.pymdown  are all convenience extensions that batch include a number of extensions;  do not mix these with each other  as they will cause certain extensions to be included multiple times.", 
            "title": "Incompatible Extensions"
        }, 
        {
            "location": "/usage_notes/#include-extensions-only-once", 
            "text": "In general, you shouldn t include an extension more than once.  PyMdown Extensions provides three extensions that batch include a number of extensions for convenience:  pymdownx.extra ,  pymdownx.github , and  pymdownx.pymdown .  If you try to include more than one of these convenience extensions at the same time, you will include certain extensions multiple times possibly leading to unexpected results.  Also, be aware of what extensions these convenience extensions include and do not accidentally re-include them individually or unexpected issues my arise.", 
            "title": "Include Extensions Only Once"
        }, 
        {
            "location": "/extensions/arithmatex/", 
            "text": "MathJax.Hub.Config({\n    config: [\"MMLorHTML.js\"],\n    extensions: [\"tex2jax.js\"],\n    jax: [\"input/TeX\"],\n    tex2jax: {\n        inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n        displayMath: [ [\"\\\\[\",\"\\\\]\"] ]\n    },\n    TeX: {\n        TagSide: \"right\",\n        TagIndent: \".8em\",\n        MultLineWidth: \"85%\",\n        equationNumbers: {\n            autoNumber: \"AMS\",\n        }\n    },\n    displayAlign: 'left',\n    showProcessingMessages: false,\n    messageStyle: 'none'\n});\n\n\n\n\nOverview\n\n\nThe Arithmatex extension searches for \n$\n...\n$\n or \n$$\n...\n$$\n and formats them so that \nMathJax\n can detect them in the HTML output.\n\n\n$\n...\n$\n is the inline form and requires the opening token (\n$\n) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement required no escaping of the \n$\n character.  But when needed, the \n$\n character can be escaped using \n\\$\n.\n\n\n$$\n...\n$$\n is the \ndisplay\n or \nblock\n form.  When using \n$$\n, the block must start with \n$$\n and end with \n$$\n; a block contains no empty lines.\n\n\nThe Arithmatex extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows: \n$\n...\n$\n \n \n\\(\n...\n\\)\n and \n$$\n...\n$$\n \n \n\\[\n...\n\\]\n.  Keep this in mind when configuring MathJax for your document.\n\n\nArithmatex requires you to point the HTML at the MathJax library and provide the necessary configuration.  The recommended way of including MathJax is to use the CDN:\n\n\nscript\n \nsrc\n=\nhttps://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n/\nscript\n\n\n\n\n\n\nHere is an example of setting up MathJax configuration:\n\n\n/* mathjax-loader.js */\n\n\n(\nfunction\n \n(\nwin\n,\n \ndoc\n)\n \n{\n\n  \nwin\n.\nMathJax\n \n=\n \n{\n\n    \nconfig\n:\n \n[\nMMLorHTML.js\n],\n\n    \nextensions\n:\n \n[\ntex2jax.js\n],\n\n    \njax\n:\n \n[\ninput/TeX\n],\n\n    \ntex2jax\n:\n \n{\n\n      \ninlineMath\n:\n \n[\n \n[\n\\\\(\n,\n\\\\)\n]\n \n],\n\n      \ndisplayMath\n:\n \n[\n \n[\n\\\\[\n,\n\\\\]\n]\n \n]\n\n    \n},\n\n    \nTeX\n:\n \n{\n\n      \nTagSide\n:\n \nright\n,\n\n      \nTagIndent\n:\n \n.8em\n,\n\n      \nMultLineWidth\n:\n \n85%\n,\n\n      \nequationNumbers\n:\n \n{\n\n        \nautoNumber\n:\n \nAMS\n,\n\n      \n},\n\n      \nunicode\n:\n \n{\n\n        \nfonts\n:\n \nSTIXGeneral,\nArial Unicode MS\n\n      \n}\n\n    \n},\n\n    \ndisplayAlign\n:\n \nleft\n,\n\n    \nshowProcessingMessages\n:\n \nfalse\n,\n\n    \nmessageStyle\n:\n \nnone\n\n  \n};\n\n\n})(\nwindow\n,\n \ndocument\n);\n\n\n\n\n\n\nPlease see the \nMathJax\n site for more info on using MathJax.\n\n\nExamples\n\n\nSome Equations:\n\n\n$$\n\n\nE\n(\n\\mathbf\n{v}, \n\\mathbf\n{h}\n)\n \n=\n \n-\n\\sum\n_{i,j}w_{ij}v_i h_j \n-\n \n\\sum\n_i b_i v_i \n-\n \n\\sum\n_j c_j h_j\n\n\n$$\n\n\n- Here are some more equations:\n\n    \n$$\n\n\n        \n\\begin\n{align}\n\n\n            p\n(\nv_i\n=\n1\n|\n\\mathbf\n{h}\n)\n \n \n=\n \n\\sigma\\left\n(\n\\sum\n_j w_{ij}h_j \n+\n b_i\n\\right\n)\n \n\\\\\n\n\n            p\n(\nh_j\n=\n1\n|\n\\mathbf\n{v}\n)\n \n \n=\n \n\\sigma\\left\n(\n\\sum\n_i w_{ij}v_i \n+\n c_j\n\\right\n)\n\n\n        \n\\end\n{align}\n\n\n    \n$$\n\n\n- Inline equations: \n$\np\n(\nx|y\n)\n \n=\n \n\\frac\n{p\n(\ny|x\n)\np\n(\nx\n)\n}{p\n(\ny\n)\n}\n$\n.\n\n\n\n\n\nSome Equations:\n\n\n\\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]\n\n\n\n\n\n\nHere are some more equations:\n\n\n\\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h}) \n = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v}) \n = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]\n\n\n\n\n\n\nInline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).", 
            "title": "Arithmatex"
        }, 
        {
            "location": "/extensions/arithmatex/#overview", 
            "text": "The Arithmatex extension searches for  $ ... $  or  $$ ... $$  and formats them so that  MathJax  can detect them in the HTML output.  $ ... $  is the inline form and requires the opening token ( $ ) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement required no escaping of the  $  character.  But when needed, the  $  character can be escaped using  \\$ .  $$ ... $$  is the  display  or  block  form.  When using  $$ , the block must start with  $$  and end with  $$ ; a block contains no empty lines.  The Arithmatex extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows:  $ ... $     \\( ... \\)  and  $$ ... $$     \\[ ... \\] .  Keep this in mind when configuring MathJax for your document.  Arithmatex requires you to point the HTML at the MathJax library and provide the necessary configuration.  The recommended way of including MathJax is to use the CDN:  script   src = https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML / script   Here is an example of setting up MathJax configuration:  /* mathjax-loader.js */  ( function   ( win ,   doc )   { \n   win . MathJax   =   { \n     config :   [ MMLorHTML.js ], \n     extensions :   [ tex2jax.js ], \n     jax :   [ input/TeX ], \n     tex2jax :   { \n       inlineMath :   [   [ \\\\( , \\\\) ]   ], \n       displayMath :   [   [ \\\\[ , \\\\] ]   ] \n     }, \n     TeX :   { \n       TagSide :   right , \n       TagIndent :   .8em , \n       MultLineWidth :   85% , \n       equationNumbers :   { \n         autoNumber :   AMS , \n       }, \n       unicode :   { \n         fonts :   STIXGeneral, Arial Unicode MS \n       } \n     }, \n     displayAlign :   left , \n     showProcessingMessages :   false , \n     messageStyle :   none \n   };  })( window ,   document );   Please see the  MathJax  site for more info on using MathJax.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/arithmatex/#examples", 
            "text": "Some Equations: $$  E ( \\mathbf {v},  \\mathbf {h} )   =   - \\sum _{i,j}w_{ij}v_i h_j  -   \\sum _i b_i v_i  -   \\sum _j c_j h_j  $$ \n\n- Here are some more equations:\n\n     $$           \\begin {align}              p ( v_i = 1 | \\mathbf {h} )     =   \\sigma\\left ( \\sum _j w_{ij}h_j  +  b_i \\right )   \\\\              p ( h_j = 1 | \\mathbf {v} )     =   \\sigma\\left ( \\sum _i w_{ij}v_i  +  c_j \\right )           \\end {align}       $$ \n\n- Inline equations:  $ p ( x|y )   =   \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ .  Some Equations:  \\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]    Here are some more equations:  \\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h})   = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v})   = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]    Inline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/b64/", 
            "text": "Overview\n\n\nIn the current iteration, B64 allows for embedding images with base64 encoding.  It simply needs a base path to resolve relative links, and it will embed the images as base64 resources.  This is useful if you would like to distribute a Markdown output without having to also distribute the images separately.  In a normal website, this would probably not be desired.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n\n\nA string indicating a base path to be used to resolve relative links.", 
            "title": "B64"
        }, 
        {
            "location": "/extensions/b64/#overview", 
            "text": "In the current iteration, B64 allows for embedding images with base64 encoding.  It simply needs a base path to resolve relative links, and it will embed the images as base64 resources.  This is useful if you would like to distribute a Markdown output without having to also distribute the images separately.  In a normal website, this would probably not be desired.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/b64/#options", 
            "text": "Option  Type  Default  Description      base_path  string   A string indicating a base path to be used to resolve relative links.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/betterem/", 
            "text": "Overview\n\n\nBetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes for both asterisk\ns and underscore\ns bold and italic: \nsmart\n when \nsmart_enable\n is turned on and normal if \nsmart_enable\n is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When \nsmart\n is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When \nsmart\n is enabled, the behavior will be very similar in feel to \nGFM\n bold and italic (but not necessarily exact).\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nDifferences\n\n\n\n\nNote\n\n\nFor all examples on this page, underscores are \nsmart\n and asterisks are not.\n\n\n\n\nBetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n* Won't highlight *\n\n\n* Won\nt be italic *\n\n\n\n\n\n\n*Will highlight*\n\n\nWill be italic\n\n\n\n\n\n\n\n\nBetterEm allows for a more natural nested token feel.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n***I'm italic and bold* I am just bold.**\n\n\nI\nm italic and bold\n I am just bold.\n\n\n\n\n\n\n***I'm bold and italic!** I am just italic.*\n\n\nI\nm bold and italic!\n I am just italic.\n\n\n\n\n\n\n\n\nBetterEm will ensure smart mode doesn\nt terminate in scenarios where there are a large amount of consecutive tokens inside.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n___A lot of underscores____________is okay___\n\n\nA lot of underscores____________is okay\n\n\n\n\n\n\n\n\nBetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n__This will all be bold __because of the placement of the center underscores.__\n\n\nThis will all be bold __because of the placement of the center underscores.\n\n\n\n\n\n\n__This will all be bold __ because of the placement of the center underscores.__\n\n\nThis will all be bold __ because of the placement of the center asterisks.\n\n\n\n\n\n\n__This will NOT all be bold__ because of the placement of the center underscores.__\n\n\nThis will NOT all be bold\n because of the placement of the center underscores.__\n\n\n\n\n\n\n__This will all be bold_ because of the token is less than that of the surrounding.__\n\n\nThis will all be bold_ because the token count is less than that of the surrounding.\n\n\n\n\n\n\n\n\nBetterEm will allow non-smart emphasis to contain \nfloating\n like tokens.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n*All will * be italic*\n\n\nAll will * be italic\n\n\n\n\n\n\n*All will *be italic*\n\n\nAll will *be italic\n\n\n\n\n\n\n*All will not* be italic*\n\n\nAll will not\n be italic*\n\n\n\n\n\n\n*All will not ** be italic*\n\n\nAll will not *\n be italic*\n\n\n\n\n\n\n**All will * be bold**\n\n\nAll will * be bold\n\n\n\n\n\n\n*All will *be bold**\n\n\nAll will *be bold\n\n\n\n\n\n\n**All will not*** be bold**\n\n\nAll will not\n* be bold**\n\n\n\n\n\n\n**All will not *** be bold**\n\n\nAll will not *\nbe bold**\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_enable\n\n\nstring\n\n\nunderscore\n\n\nA string that specifies whether smart should be enabled for \nall\n, \nasterisk\n, \nunderscore\n, or \nnone\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nUsage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.\n\n\n\n\n\nUsage is the \nsame\n as usual.  Just keep in mind the \ndifferences\n.  Markdown is un\nfreaking\nbelievable \n.", 
            "title": "BetterEm"
        }, 
        {
            "location": "/extensions/betterem/#overview", 
            "text": "BetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes for both asterisk s and underscore s bold and italic:  smart  when  smart_enable  is turned on and normal if  smart_enable  is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When  smart  is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When  smart  is enabled, the behavior will be very similar in feel to  GFM  bold and italic (but not necessarily exact).   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/betterem/#differences", 
            "text": "Note  For all examples on this page, underscores are  smart  and asterisks are not.   BetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).     Test  Result      * Won't highlight *  * Won t be italic *    *Will highlight*  Will be italic     BetterEm allows for a more natural nested token feel.     Test  Result      ***I'm italic and bold* I am just bold.**  I m italic and bold  I am just bold.    ***I'm bold and italic!** I am just italic.*  I m bold and italic!  I am just italic.     BetterEm will ensure smart mode doesn t terminate in scenarios where there are a large amount of consecutive tokens inside.     Test  Result      ___A lot of underscores____________is okay___  A lot of underscores____________is okay     BetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.     Test  Result      __This will all be bold __because of the placement of the center underscores.__  This will all be bold __because of the placement of the center underscores.    __This will all be bold __ because of the placement of the center underscores.__  This will all be bold __ because of the placement of the center asterisks.    __This will NOT all be bold__ because of the placement of the center underscores.__  This will NOT all be bold  because of the placement of the center underscores.__    __This will all be bold_ because of the token is less than that of the surrounding.__  This will all be bold_ because the token count is less than that of the surrounding.     BetterEm will allow non-smart emphasis to contain  floating  like tokens.     Test  Result      *All will * be italic*  All will * be italic    *All will *be italic*  All will *be italic    *All will not* be italic*  All will not  be italic*    *All will not ** be italic*  All will not *  be italic*    **All will * be bold**  All will * be bold    *All will *be bold**  All will *be bold    **All will not*** be bold**  All will not * be bold**    **All will not *** be bold**  All will not * be bold**", 
            "title": "Differences"
        }, 
        {
            "location": "/extensions/betterem/#options", 
            "text": "Option  Type  Default  Description      smart_enable  string  underscore  A string that specifies whether smart should be enabled for  all ,  asterisk ,  underscore , or  none .     Examples  Usage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.   Usage is the  same  as usual.  Just keep in mind the  differences .  Markdown is un freaking believable  .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/caret/", 
            "text": "Overview\n\n\nCaret optionally adds two different features which are syntactically built around the \n^\n character: \ninsert\n which inserts \nins\n/\nins\n tags and \nsuperscript\n which inserts \nsup\n/\nsup\n tags.  Syntax behavior for smart and non-smart variants of \ninsert\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_insert\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with insert characters: \n^^underline^^me^^\n \n \nunderline^^me\n.\n\n\n\n\n\n\ninsert\n\n\nbool\n\n\nTrue\n\n\nEnable insert feature.\n\n\n\n\n\n\nsuperscript\n\n\nbool\n\n\nTrue\n\n\nEnable superscript feature.\n\n\n\n\n\n\n\n\nExamples\n\n\nThe first feature adds underline emphasis (\nins\n tags) when inline text is surrounded by double carets: \n^^underline me^^\n \n \nunderline me\n.  It can optionally be configured to use smart logic: \n^^underline^^me^^\n \n \nunderline^^me\n.\n\n\nThe second feature adds superscript using single carets: \nH^2^0\n \n H\n2\n0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces: \ntext^a\\ superscript^\n \n text\na superscript\n.", 
            "title": "Caret"
        }, 
        {
            "location": "/extensions/caret/#overview", 
            "text": "Caret optionally adds two different features which are syntactically built around the  ^  character:  insert  which inserts  ins / ins  tags and  superscript  which inserts  sup / sup  tags.  Syntax behavior for smart and non-smart variants of  insert  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/caret/#options", 
            "text": "Option  Type  Default  Description      smart_insert  bool  True  Use smart logic with insert characters:  ^^underline^^me^^     underline^^me .    insert  bool  True  Enable insert feature.    superscript  bool  True  Enable superscript feature.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/caret/#examples", 
            "text": "The first feature adds underline emphasis ( ins  tags) when inline text is surrounded by double carets:  ^^underline me^^     underline me .  It can optionally be configured to use smart logic:  ^^underline^^me^^     underline^^me .  The second feature adds superscript using single carets:  H^2^0    H 2 0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces:  text^a\\ superscript^    text a superscript .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/critic/", 
            "text": "Overview\n\n\nCritic is an extension that adds handling and support of \nCritic Markup\n.  This extension runs before all other extensions to parse the critic edits.  It allows for the removal or acceptance of the critic modifications and modifies the source to reflect the rejection or approval (highlights and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output (\nmileage may vary\n).\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nstring\n\n\nview\n\n\nview\n just parses the markup and displays it in its HTML equivalent rendering.  \naccept\n strips out the critic markup and replacing them with the suggested changes.  \nreject\n rejects all the suggestions and strips the critic markup out replacing it with the original.\n\n\n\n\n\n\n\n\nLimitations with Previewing Critic Markup\n\n\nParsing CriticMarkup is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually \nand\n trying to convert the document to HTML, things can get ugly.  I think this is the one unfortunate problem with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created when viewing (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here: \nhttp://fletcher.github.io/MultiMarkdown-4/criticmarkup\n.\n\n\nThe critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region\ns HTML output which allows for CSS styling.  There is probably a lot more post-processing that could be done to fix more issues, but I am not yet sure how much further down that road I am willing to go.\n\n\nExamples\n\n\n\n\n\n\n\n\nMarkup\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n{--delete--}\n\n\ndelete\n\n\n\n\n\n\n{++delete++}\n\n\ninsert\n\n\n\n\n\n\n{~~delete and replace~\nsubstitutions~~}\n\n\ndelete and replace\nsubstitutions\n\n\n\n\n\n\n{==highlight==}\n\n\nhighlight\n\n\n\n\n\n\n{\ncomment\n}\n\n\ntext\ncomment\n\n\n\n\n\n\n\n\nHere they are in action:\n\n\nHere is some {--*incorrect*--} Markdown.  I am adding this{++ here.++}.  Here is some more {--text\nthat I am removing--}text.  And here is even more {++text that I\nam ++}adding.{~~\n\n~\n  ~~}Paragraph was deleted and replaced with some spaces.{~~  ~\n\n\n~~}Spaces were removed and a paragraph was added.\n\nAnd here is a comment on {==some\n==text== ==}{\nThis works quite well. I just wanted to comment on it.\n}. Substitutions {~~is~\nare~~} great!\n\nEscape \\{\nThis text is preserved\n}.\n\nGeneral block handling.\n\n{--\n\n* test\n* test\n* test\n    * test\n* test\n\n--}\n\n{++\n\n* test\n* test\n* test\n    * test\n* test\n\n++}\n\n\n\n\n\nHere is some \nincorrect\n Markdown.  I am adding this\n here.\n.  Here is some more \ntext\n\nthat I am removing\ntext.  And here is even more \ntext that I\n\nam \nadding.\n  \nParagraph was deleted and replaced with some spaces.\n  \n\n\n\n\nSpaces were removed and a paragraph was added.\n\n\nAnd here is a comment on \nsome\n\n\ntext\n \nThis works quite well. I just wanted to comment on it.\n. Substitutions \nis\nare\n great!\n\n\nEscape {\nThis text is preserved\n}.\n\n\nGeneral block handling.\n\n\n\n\n\n\ntest\n\n\ntest\n\n\ntest\n\n\ntest\n\n\n\n\n\n\ntest\n\n\n\n\n\n\n\n\n\n\ntest\n\n\ntest\n\n\ntest\n\n\ntest\n\n\n\n\n\n\ntest\n\n\n\n\n\n\nCSS\n\n\nCritic renders the CriticMarkup with the following classes.\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncritic\n\n\nThis is applied to all critic edits.\n\n\n\n\n\n\nbreak\n\n\nThis is applied to critic inserts or deletes that encompass \nonly\n 2+ newlines.\n\n\n\n\n\n\nblock\n\n\nApplied to critic HTML tags that are detected as surrounding a block region.\n\n\n\n\n\n\ncomment\n\n\nA CriticMarkup comment.\n\n\n\n\n\n\n\n\nHere is some example CSS you can use for rendering the visualization.\n\n\n/* Critic Markup */\n\n\n.markdown-body\n \n.critic\n \n{\n\n  \nfont-family\n:\n \ninherit\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder-style\n:\n \nsolid\n;\n\n  \nborder-width\n:\n \n1px\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.critic\n:before\n,\n\n\n.markdown-body\n \n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n\\00a0\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \nfont-size\n:\n \ninitial\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n:before\n,\n\n\n.markdown-body\n \n.block\n:after\n \n{\n\n  \ncontent\n:\n \n;\n\n\n}\n\n\n\n.markdown-body\n \nmark\n.critic\n \n{\n\n  \nborder-color\n:\n \n#ff8600\n;\n\n  \nbackground\n:\n \n#ffddaa\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.critic\n \n{\n\n  \nborder-color\n:\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.critic\n \n{\n\n  \nborder-color\n:\n \n#dd0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n,\n\n\n.markdown-body\n \ndel\n.break\n \n{\n\n  \nfont-size\n:\n \n0\n;\n\n  \nborder\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n,\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncontent\n:\n \n\\00a0\\b6\\00a0\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.after\n,\n\n\n.markdown-body\n \ndel\n.after\n \n{\n\n  \ncontent\n:\n \n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#00bb00\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#bb0000\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#bb0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n \n{\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n0\n;\n\n  \nborder-top\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n  \nborder-bottom\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n,\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \nfont-size\n:\n \ninherit\n;\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n \n{\n\n  \ncontent\n:\n \n\\00a0\\bb\n;\n\n  \nborder-right\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n\\ab\\00a0\n;\n\n  \nborder-left\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \npadding\n:\n \n.02em\n;\n\n\n}", 
            "title": "Critic"
        }, 
        {
            "location": "/extensions/critic/#overview", 
            "text": "Critic is an extension that adds handling and support of  Critic Markup .  This extension runs before all other extensions to parse the critic edits.  It allows for the removal or acceptance of the critic modifications and modifies the source to reflect the rejection or approval (highlights and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output ( mileage may vary ).", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/critic/#options", 
            "text": "Option  Type  Default  Description      mode  string  view  view  just parses the markup and displays it in its HTML equivalent rendering.   accept  strips out the critic markup and replacing them with the suggested changes.   reject  rejects all the suggestions and strips the critic markup out replacing it with the original.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/critic/#limitations-with-previewing-critic-markup", 
            "text": "Parsing CriticMarkup is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually  and  trying to convert the document to HTML, things can get ugly.  I think this is the one unfortunate problem with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created when viewing (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here:  http://fletcher.github.io/MultiMarkdown-4/criticmarkup .  The critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region s HTML output which allows for CSS styling.  There is probably a lot more post-processing that could be done to fix more issues, but I am not yet sure how much further down that road I am willing to go.", 
            "title": "Limitations with Previewing Critic Markup"
        }, 
        {
            "location": "/extensions/critic/#examples", 
            "text": "Markup  Example      {--delete--}  delete    {++delete++}  insert    {~~delete and replace~ substitutions~~}  delete and replace substitutions    {==highlight==}  highlight    { comment }  text comment     Here they are in action:  Here is some {--*incorrect*--} Markdown.  I am adding this{++ here.++}.  Here is some more {--text\nthat I am removing--}text.  And here is even more {++text that I\nam ++}adding.{~~\n\n~   ~~}Paragraph was deleted and replaced with some spaces.{~~  ~ \n\n~~}Spaces were removed and a paragraph was added.\n\nAnd here is a comment on {==some\n==text== ==}{ This works quite well. I just wanted to comment on it. }. Substitutions {~~is~ are~~} great!\n\nEscape \\{ This text is preserved }.\n\nGeneral block handling.\n\n{--\n\n* test\n* test\n* test\n    * test\n* test\n\n--}\n\n{++\n\n* test\n* test\n* test\n    * test\n* test\n\n++}  Here is some  incorrect  Markdown.  I am adding this  here. .  Here is some more  text \nthat I am removing text.  And here is even more  text that I \nam  adding.    Paragraph was deleted and replaced with some spaces.      Spaces were removed and a paragraph was added.  And here is a comment on  some  text   This works quite well. I just wanted to comment on it. . Substitutions  is are  great!  Escape { This text is preserved }.  General block handling.    test  test  test  test    test      test  test  test  test    test", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/critic/#css", 
            "text": "Critic renders the CriticMarkup with the following classes.     Classes  Description      critic  This is applied to all critic edits.    break  This is applied to critic inserts or deletes that encompass  only  2+ newlines.    block  Applied to critic HTML tags that are detected as surrounding a block region.    comment  A CriticMarkup comment.     Here is some example CSS you can use for rendering the visualization.  /* Critic Markup */  .markdown-body   .critic   { \n   font-family :   inherit ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   border-style :   solid ; \n   border-width :   1px ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   text-decoration :   none ;  }  .markdown-body   .critic :before ,  .markdown-body   .critic :after   { \n   content :   \\00a0 ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   font-size :   initial ;  }  .markdown-body   .block :before ,  .markdown-body   .block :after   { \n   content :   ;  }  .markdown-body   mark .critic   { \n   border-color :   #ff8600 ; \n   background :   #ffddaa ;  }  .markdown-body   ins .critic   { \n   border-color :   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .critic   { \n   border-color :   #dd0000 ; \n   background :   #ffdddd ;  }  .markdown-body   ins .break ,  .markdown-body   del .break   { \n   font-size :   0 ; \n   border :   none ;  }  .markdown-body   ins .break :before ,  .markdown-body   del .break :before   { \n   content :   \\00a0\\b6\\00a0 ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ;  }  .markdown-body   ins .after ,  .markdown-body   del .after   { \n   content :   ;  }  .markdown-body   ins .break :before   { \n   color :   #00bb00 ; \n   border :   1px   solid   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .break :before   { \n   color :   #bb0000 ; \n   border :   1px   solid   #bb0000 ; \n   background :   #ffdddd ;  }  .markdown-body   span .critic   { \n   background :   #ddddff ; \n   border :   0 ; \n   border-top :   1px   solid   #0000bb ; \n   border-bottom :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before ,  .markdown-body   span .critic :after   { \n   font-size :   inherit ; \n   background :   #ddddff ; \n   border :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before   { \n   content :   \\00a0\\bb ; \n   border-right :   none ; \n   - webkit - border-top - left - radius :   3px ; \n   - moz - border-top - left - radius :   3px ; \n   border-top - left - radius :   3px ; \n   - webkit - border-bottom - left - radius :   3px ; \n   - moz - border-bottom - left - radius :   3px ; \n   border-bottom - left - radius :   3px ;  }  .markdown-body   span .critic :after   { \n   content :   \\ab\\00a0 ; \n   border-left :   none ; \n   - webkit - border-top - right - radius :   3px ; \n   - moz - border-top - right - radius :   3px ; \n   border-top - right - radius :   3px ; \n   - webkit - border-bottom - right - radius :   3px ; \n   - moz - border-bottom - right - radius :   3px ; \n   border-bottom - right - radius :   3px ;  }  .markdown-body   .block   { \n   display :   block ; \n   padding :   .02em ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/emoji/", 
            "text": "Overview\n\n\nThe Emoji extension adds support for inserting emojis or special emoji tags linked to images that are either local or on a CDN via the syntax \n:emoji:\n.  Currently the Emoji extension adds support for two different emoji syntax short names. The first index is from \nGemoji\n.  Gemoji is Github\ns open source solution that provides emojis in \nGFM\n.  The second is from \nEmojiOne\n which is another open source emoji solution.\n\n\nAn emoji index is built for Gemoji and EmojiOne from the respective repository sources.  The index contains the emoji\ns names, shortnames, values, etc.; everything needed to insert emoji or specially crafted HTML elements to reference emoji images.\n\n\n\n\nEmojiOne and Gemoji licensing\n\n\nPymdownx-extensions has no affiliation with EmojiOne or Gemoji.  The indexes generated from their sources are covered under their respective licensing.  When using their images or CSS, please see their licensing terms to ensure proper usage and attributions.\n\n\nEmojiOne: \nhttp://emojione.com/licensing/\n\nGemoji: \nhttps://github.com/github/gemoji/blob/master/LICENSE\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nemoji_index\n\n\nfunction\n\n\npymdownx.emoji.emojione\n\n\nA function that returns the index to use when parsing \n:emoji:\n syntax. See \nDefault Emoji Indexes\n to see the provided indexes.\n\n\n\n\n\n\nemoji_generator\n\n\nfunction\n\n\npymdownx.emoji.to_png\n\n\nA function that takes the emoji info and constructs the desired emoji ouput. See \nDefault Emoji Generators\n to see the provided generators.\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nshort\n\n\nSpecifies the title format that is fed into the emoji generator function.  Can either be \nlong\n which is the long description of the emoji, \nshort\n which is the short name (\n:short:\n), or \nnone\n which will simply pass \nNone\n.\n\n\n\n\n\n\nalt\n\n\nstr\n\n\nunicode\n\n\nSpecifies the format for the alt value that is passed to the emoji generator function. If \nalt\n is set to \nshort\n, the short name will be passed to the generator.  If \nalt\n is set to \nunicode\n the Unicode characters are passed to the generator.  Lastly, if \nalt\n is set to \nhtml_entity\n, the Unicode characters are passed encoded as an HTML entities.\n\n\n\n\n\n\nremove_variation_selector\n\n\nbool\n\n\nFalse\n\n\nSpecifies whether variation selectors should be removed from Unicode alt. Currently only \nfe0f\n is searched and removed as it is the only one presently found in the current emojis.\n\n\n\n\n\n\noptions\n\n\ndict\n\n\n{}\n\n\nOptions that are specific to emoji generator functions.  Actually supported parameters can vary from function to function.\n\n\n\n\n\n\n\n\n\n\nLegacy GithubEmoji Emulation\n\n\nThe Emoji extension was actually created to replace the now deprecated \ngithubemoji\n extension. Emoji was written to be much more flexible.  If you have a desire to configure the output to be like the legacy githubemoji extension, you can use the settings below. To learn more about settings, read on through the documentation.\n\n\nimport\n \npymdownx.emoji\n\n\n\ngithub_emulation_parameters\n \n=\n \n{\n\n    \nemoji_index\n:\n \npymdownx\n.\nemoji\n.\ngemoji\n,\n\n    \nemoji_generator\n:\n \npymdownx\n.\nemoji\n.\nto_png\n,\n\n    \nalt\n:\n \nshort\n,\n\n    \noptions\n:\n \n{\n\n        \nattributes\n:\n \n{\n\n            \nalign\n:\n \nabsmiddle\n,\n\n            \nheight\n:\n \n20px\n,\n\n            \nwidth\n:\n \n20px\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nDefault Emoji Indexes\n\n\nBy default, Emoji provides two indexes: \nemojione\n and \ngemoji\n.  Both indexes are generated from the most recent official release tag source. They can be used by passing in one of the two functions below via the \nemoji_index\n parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out \nCustom Emoji Indexes\n.\n\n\n\n\npymdownx.emoji.emojione\n\n\n\n\nThis is the default index used and provides an index using the latest EmojiOne supported emojis (at the time of release).  You can always find out what tag it was built with by doing the following:\n\n\n \nimport\n \npymdownx.emoji1_db\n \nas\n \ne1db\n\n\n \ne1db\n.\nversion\n\n\nv2.2.7\n\n\n\n\n\n\n\n\npymdownx.emoji.gemoji\n\n\n\n\nThis provides an index of the latest Gemoji supported emoji (at the time of release). You can always find out what tag it was built with by doing the following:\n\n\n \nimport\n \npymdownx.gemoji_db\n \nas\n \ngmdb\n\n\n \ngmdb\n.\nversion\n\n\nv3.0.0\n\n\n\n\n\n\n\n\n\n\nDefault Emoji Generators\n\n\nEmoji provides six default emoji generators.  All the generators can be used with the \nemojione\n index, but only two will work well with the \ngemoji\n index: \npymdownx.emoji.to_png\n and \npymdownx.emoji.to_alt\n. They can be used by passing in one of the functions below via the \nemoji_generator\n parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out \nCustom Emoji Generators\n.\n\n\n\n\npymdownx.emoji.to_png\n\n\n\n\nThis generator was written to do PNG outputs for both Gemoji and EmojiOne.  This outputs the emoji as a PNG image in the form of:\n\n\nimg\n \nalt\n=\n\ud83d\ude04\n \nclass\n=\nemojione\n \nsrc\n=\nhttps://cdn.jsdelivr.net/emojione/assets/png/1f604.png\n \ntitle\n=\n:smile:\n \n/\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nname of the index used\n\n\nSpecifies the class(es) to be used in the img element.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\nCDN for the default index used\n\n\nThis can be either a local path, or it can be a CDN.  By default, an appropriate CDN is provided for EmojiOne and Gemoji depending on which index is being used.\n\n\n\n\n\n\nnon_standard_image_path\n\n\nstr\n\n\nCDN for the default index used\n\n\nThis can be either a local path, or it can be a CDN. Currently, only Gemoji\ns non-standard emojis take advantage of this as the Github CDN alters the path slightly for its non-Unicode emoji.  By default, an appropriate CDN is provided for Gemoji.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_svg\n\n\n\n\nThis generator was written to output EmojiOne SVG images.  This outputs the emoji as a SVG image in the form of:\n\n\nimg\n \nalt\n=\n\ud83d\ude04\n \nclass\n=\nemojione\n \nsrc\n=\nhttps://cdn.jsdelivr.net/emojione/assets/svg/1f604.svg\n \ntitle\n=\n:smile:\n \n/\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nname of the index used\n\n\nSpecifies the class(es) to be used in the img element. The default will match the name of the index used.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\nA CDN for EmojiOne images\n\n\nThis can be either a local path, or it can be a CDN.  By default, an appropriate CDN is provided for EmojiOne.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_png_sprite\n\n\n\n\nThis generator was written to support PNG sprite output for EmojiOne.  It is expected that this will be used in conjunction with the the official EmojiOne CSS.  You can include the CSS from the CDN in your document (version 2.2.7 at the time of writing this): \nhttps://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/sprites/emojione.sprites.css\n.  This outputs the emoji as a span in the form below.  The CSS will apply the appropriate mapping in the sprite PNG for the background image of the span.\n\n\nspan\n \nclass\n=\nemojione emojione-1f604\n \ntitle\n=\n:smile:\n\ud83d\ude04\n/\nspan\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nname of the index used\n\n\nClass used for the span where the classes are inserted as \nclass\n in the following template: \n'%(class)s-%(unicode)s'\n.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_svg_sprite\n\n\n\n\nThis was written to support EmojiOne SVG sprite output.  The output form was taken directly from an example in the EmojiOne source.  It is expected that the the user will provide a local version of the official SVG sprite and the path to it.  The output is:\n\n\nsvg\n \nclass\n=\nemojione\ndescription\n\ud83d\ude04\n/\ndescription\nuse\n \nxlink:href\n=\n./../assets/sprites/emojione.sprites.svg#emoji-1f604\n/\nuse\n/\nsvg\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nname of the index used\n\n\nClasses to apply to the svg element where the classes are inserted as \nclass\n in the following template: \n'%(class)s-%(unicode)s'\n.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\n./../assets/sprites/emojione.sprites.svg\n\n\nPath to the SVG sprites.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_awesome\n\n\n\n\nThis generator is another EmojiOne specific output.  This is an output form mentioned here: \nhttps://github.com/Ranks/emojione/tree/master/lib/emojione-awesome\n.  According to EmojiOne\ns documentation, it aims to give a font-awesome like interface for EmojiOne.  There isn\nt currently a CDN link that could be found, but you can provide the CSS in your project locally: \nhttps://github.com/Ranks/emojione/blob/master/assets/css/emojione-awesome.css\n.  The output format is:\n\n\ni\n \nclass\n=\ne1a-smile\n/\ni\n\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\ne1a\n\n\nClasses to apply to the svg element where the classes are inserted as \nclass\n in the following template: \n'%(class)s-%(shortname)s'\n.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_alt\n\n\n\n\nThis generator supports both Gemoji and EmojiOne.  The generator outputs the alt value directly to the document.  The output can be Unicode characters, HTML entities, or even just the short name depending on what the global setting of \nalt\n is set to.\n\n\n\ud83d\ude03\n\n\n\n\n\nThere are no generator specific options.\n\n\n\n\n\n\nCustom Emoji Indexes\n\n\nIn order to provide a custom index, the emoji extension must be given a function that returns a suitable emoji index.  No parameters are passed to the function.  The function should simply return the custom index in the following format.\n\n\nemoji_index\n \n=\n \n{\n\n    \n# Name is the name of the index.  This is passed into the emoji\n\n    \n# generator functions and can be used to differentiate logic\n\n    \n# for different indexes if required.\n\n    \nname\n:\n \nmyindex\n,\n\n\n    \n# The actual index.  An dictionary of all the emoji.\n\n    \n# Different emoji shortnames with the same Unicode data\n\n    \n# can be mentioned under aliases.\n\n    \nemoji\n:\n \n{\n\n        \n# Key is the short name.\n\n        \n:zero:\n:\n \n{\n\n\n            \n# Name is the long name.\n\n            \nname\n:\n \nkeycap digit zero\n,\n\n\n            \n# Unicode is the representation of the Unicode\n\n            \n# code points with variations and joiners striped out.\n\n            \n# This is used to reference pngs or svgs associated\n\n            \n# with the emoji and can also sometimes be used as\n\n            \n# part of special class names in the HTML output.\n\n            \n#\n\n            \n# Do not include this if the emoji is a custom,\n\n            \n# non-Unicode emoji.\n\n            \nunicode\n:\n \n0030-20e3\n,\n\n\n            \n# This is the full Unicode code points and is\n\n            \n# used for the \nalt\n attributes in the HTML output of images.\n\n            \n# It is redundant to include this if it is the\n\n            \n# same as \nunicode\n, but it won\nt hurt anything if it is.\n\n            \n#\n\n            \n# Do not include this if the emoji is a custom,\n\n            \n# non-Unicode emoji.\n\n            \nunicode_alt\n:\n \n0030-fe0f-20e3\n\n        \n},\n\n        \n# No need to specify \nunicode_alt\n as it is the same\n\n        \n# as \nunicode\n.\n\n        \n:thumbsup:\n:\n \n{\n\n            \nname\n:\n \nthumbs up sign\n,\n\n            \nunicode\n:\n \n1f44d\n\n        \n},\n\n        \n# Should not specify any unicode fields\n\n        \n# as this is not a real unicode emoji.\n\n        \n:octocat:\n:\n \n{\n\n            \nname\n:\n \noctocat\n\n        \n},\n\n    \n},\n\n    \n# Short names that share previously defined Unicode data\n\n    \n# like \n+1\n and \nthumbsup\n etc.\n\n    \naliases\n:\n \n{\n\n        \n# Key is the alias.\n\n        \n# Value is the short name it maps to in the\n\n        \n# previously defined \nemoji\n key.\n\n        \n:+1:\n:\n \n:thumbsup:\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCustom Emoji Generators\n\n\nEach different kind of output is controlled by a different emoji generator function, but all generator functions have the same format. The format is shown below in case you need to create your own custom output generator.\n\n\n\n\ndef emoji_generator(index, shortname, alias, uc, alt, title, options, md)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nstr\n\n\nThe name of the selected emoji index.\n\n\n\n\n\n\nshortname\n\n\nstr\n\n\nThe current short name.  This may differ from the actual name used in a document as aliases get translated to the main short name.\n\n\n\n\n\n\nalias\n\n\nstr\n\n\nIf the name specified in the document was an alias, that alias will be set here, and the main short name will be found under \nshortname\n.  This will be \nNone\n if the name used was not an alias.\n\n\n\n\n\n\nuc\n\n\nstr\n\n\nThis is a the the Unicode values for the emoji.  This name is used to reference emoji image names or for specifying class names etc., so it may not contain all the code points.  The string returned consists of each Unicode value represented as a hex value separated with hyphens.  Values such as U+200D ZERO WIDTH JOINER and  U+FE0F VARIATION SELECTOR-16 are stripped out.  So the value here will not always be practical for calculating the actual Unicode points of an emoji.  This will be \nNone\n for non-standard emoji that are not Unicode.\n\n\n\n\n\n\nalt\n\n\nstr\n\n\nThis is the alternative emoji value (or fallback value).  Its format will differ depending on the extension setting \nalt\n.  This will be returned as either the Unicode characters, HTML entities, or the short name used.  See the \nalt\n setting for more info.\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThis is the title that can be used in img elements.  Depending of the global extension setting \ntitle\n, this will either return the long name, the short name, or \nNone\n.  See the \ntitle\n setting for more info.\n\n\n\n\n\n\noptions\n\n\ndict\n\n\nThis is a dictionary to specify generator function specific options.  This can be anything, and it is up to the generator function to parse and provide defaults.\n\n\n\n\n\n\nmd\n\n\nclass\n\n\nThis is the Markdown class object.  This mainly used to access specific things needed from the Markdown class.  If you needed to stash your output, you would do something like: \nmd.htmlStash.store(alt, safe=True)\n.\n\n\n\n\n\n\n\n\n\n\nNon-Unicode emojis\n\n\nKeep in mind that Gemoji ships with some non-standard emojis like \n:octocat:\n that do not have Unicode code points.  \nuc\n and \nalt\n are affected by this and will return \nNone\n and the short name respectively instead of strings describing the Unicode points.  For example \n:octocat:\n will just return \nNone\n for \nuc\n and \n:octocat:\n for \nalt\n.  If you are parsing an index with custom emojis, just like Gemoji has, then you need to be aware of this.\n\n\n\n\n\n\n\n\nUsing with MkDocs\n\n\nThis project uses these extensions with \nMkDocs\n to generate the documentation.  It might not be obvious how to set the index or generator functions in Mkdoc\ns YAML settings file, but it is actually pretty easy.  The functions are referenced like you would import them in Python except you also append them with a special prefix to let the YAML module know that the setting value is a Python object.  For instance, to specify the \nto_svg\n generator, you would simply reference it like this: \n!!python/name:pymdownx.emoji.to_svg\n (or you could use your own custom module).\n\n\nmarkdown_extensions\n:\n\n  \n-\n \npymdownx.emoji\n:\n\n      \nemoji_generator\n:\n \n!!python/name:pymdownx.emoji.to_svg\n\n\n\n\n\n\nEmoji Index Updates\n\n\nThe Emoji extension might not always have indexes built from the latest repos, we try to keep the indexes updated with new releases, but if they fall out of date, you can open an issue on the repo to alert the maintainer(s) and they will update them when someone gets a chance.  Pull requests are also welcome.  The process for updating the indexes is automated, so it is fairly easy to do for a pull request.\n\n\n\n\nEnsure you have requests installed: \npip install requests\n.\n\n\nFork the repo and checkout to your machine.\n\n\ncd pymdown-extensions/tools\n\n\nCall the generator script: \npython gen_emoji --gemoji\n or \npython gen_emoji --emojione\n.  It will prompt you to select a tag to download.  Please pull the latest \nofficial\n tag.  Please don\nt pull experimental tags.  This should update the indexes.\n\n\nThen you want to update the tests.  Step back out to the root of the project: \ncd ..\n.\n\n\nForce the tests to update via \npython run_tests.py -fu\n.\n\n\n\n\nNothing is fool proof.  If they make a breaking change to the files that the script parses, or the location of the files, the auto-update tool may need to be updated itself (hopefully this would be a rare occurrence).  If such a change does occur, and you are feeling brave, a pull request would be appreciated, but in time, they will be resolved regardless.\n\n\nExamples\n\n\nCurrent examples are all rendered with EmojiOne.\n\n\nEmojiOne :smile: emojis are very useful :thumbsup:.\n\nYou can also escape `:` characters to escape the emoji: \\:smile:.\n\n\n\n\n\nEmojiOne \n emojis are very useful \n.\n\n\nYou can also escape \n:\n characters to escape the emoji: :smile:.", 
            "title": "Emoji"
        }, 
        {
            "location": "/extensions/emoji/#overview", 
            "text": "The Emoji extension adds support for inserting emojis or special emoji tags linked to images that are either local or on a CDN via the syntax  :emoji: .  Currently the Emoji extension adds support for two different emoji syntax short names. The first index is from  Gemoji .  Gemoji is Github s open source solution that provides emojis in  GFM .  The second is from  EmojiOne  which is another open source emoji solution.  An emoji index is built for Gemoji and EmojiOne from the respective repository sources.  The index contains the emoji s names, shortnames, values, etc.; everything needed to insert emoji or specially crafted HTML elements to reference emoji images.   EmojiOne and Gemoji licensing  Pymdownx-extensions has no affiliation with EmojiOne or Gemoji.  The indexes generated from their sources are covered under their respective licensing.  When using their images or CSS, please see their licensing terms to ensure proper usage and attributions.  EmojiOne:  http://emojione.com/licensing/ \nGemoji:  https://github.com/github/gemoji/blob/master/LICENSE", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/emoji/#options", 
            "text": "Option  Type  Default  Description      emoji_index  function  pymdownx.emoji.emojione  A function that returns the index to use when parsing  :emoji:  syntax. See  Default Emoji Indexes  to see the provided indexes.    emoji_generator  function  pymdownx.emoji.to_png  A function that takes the emoji info and constructs the desired emoji ouput. See  Default Emoji Generators  to see the provided generators.    title  str  short  Specifies the title format that is fed into the emoji generator function.  Can either be  long  which is the long description of the emoji,  short  which is the short name ( :short: ), or  none  which will simply pass  None .    alt  str  unicode  Specifies the format for the alt value that is passed to the emoji generator function. If  alt  is set to  short , the short name will be passed to the generator.  If  alt  is set to  unicode  the Unicode characters are passed to the generator.  Lastly, if  alt  is set to  html_entity , the Unicode characters are passed encoded as an HTML entities.    remove_variation_selector  bool  False  Specifies whether variation selectors should be removed from Unicode alt. Currently only  fe0f  is searched and removed as it is the only one presently found in the current emojis.    options  dict  {}  Options that are specific to emoji generator functions.  Actually supported parameters can vary from function to function.      Legacy GithubEmoji Emulation  The Emoji extension was actually created to replace the now deprecated  githubemoji  extension. Emoji was written to be much more flexible.  If you have a desire to configure the output to be like the legacy githubemoji extension, you can use the settings below. To learn more about settings, read on through the documentation.  import   pymdownx.emoji  github_emulation_parameters   =   { \n     emoji_index :   pymdownx . emoji . gemoji , \n     emoji_generator :   pymdownx . emoji . to_png , \n     alt :   short , \n     options :   { \n         attributes :   { \n             align :   absmiddle , \n             height :   20px , \n             width :   20px \n         } \n     }  }", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/emoji/#default-emoji-indexes", 
            "text": "By default, Emoji provides two indexes:  emojione  and  gemoji .  Both indexes are generated from the most recent official release tag source. They can be used by passing in one of the two functions below via the  emoji_index  parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out  Custom Emoji Indexes .   pymdownx.emoji.emojione   This is the default index used and provides an index using the latest EmojiOne supported emojis (at the time of release).  You can always find out what tag it was built with by doing the following:    import   pymdownx.emoji1_db   as   e1db    e1db . version  v2.2.7    pymdownx.emoji.gemoji   This provides an index of the latest Gemoji supported emoji (at the time of release). You can always find out what tag it was built with by doing the following:    import   pymdownx.gemoji_db   as   gmdb    gmdb . version  v3.0.0", 
            "title": "Default Emoji Indexes"
        }, 
        {
            "location": "/extensions/emoji/#default-emoji-generators", 
            "text": "Emoji provides six default emoji generators.  All the generators can be used with the  emojione  index, but only two will work well with the  gemoji  index:  pymdownx.emoji.to_png  and  pymdownx.emoji.to_alt . They can be used by passing in one of the functions below via the  emoji_generator  parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out  Custom Emoji Generators .   pymdownx.emoji.to_png   This generator was written to do PNG outputs for both Gemoji and EmojiOne.  This outputs the emoji as a PNG image in the form of:  img   alt = \ud83d\ude04   class = emojione   src = https://cdn.jsdelivr.net/emojione/assets/png/1f604.png   title = :smile:   /   Generator Specific Options     Option  Type  Default  Description      classes  str  name of the index used  Specifies the class(es) to be used in the img element.    image_path  str  CDN for the default index used  This can be either a local path, or it can be a CDN.  By default, an appropriate CDN is provided for EmojiOne and Gemoji depending on which index is being used.    non_standard_image_path  str  CDN for the default index used  This can be either a local path, or it can be a CDN. Currently, only Gemoji s non-standard emojis take advantage of this as the Github CDN alters the path slightly for its non-Unicode emoji.  By default, an appropriate CDN is provided for Gemoji.    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_svg   This generator was written to output EmojiOne SVG images.  This outputs the emoji as a SVG image in the form of:  img   alt = \ud83d\ude04   class = emojione   src = https://cdn.jsdelivr.net/emojione/assets/svg/1f604.svg   title = :smile:   /   Generator Specific Options     Option  Type  Default  Description      classes  str  name of the index used  Specifies the class(es) to be used in the img element. The default will match the name of the index used.    image_path  str  A CDN for EmojiOne images  This can be either a local path, or it can be a CDN.  By default, an appropriate CDN is provided for EmojiOne.    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_png_sprite   This generator was written to support PNG sprite output for EmojiOne.  It is expected that this will be used in conjunction with the the official EmojiOne CSS.  You can include the CSS from the CDN in your document (version 2.2.7 at the time of writing this):  https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/sprites/emojione.sprites.css .  This outputs the emoji as a span in the form below.  The CSS will apply the appropriate mapping in the sprite PNG for the background image of the span.  span   class = emojione emojione-1f604   title = :smile: \ud83d\ude04 / span   Generator Specific Options     Option  Type  Default  Description      classes  str  name of the index used  Class used for the span where the classes are inserted as  class  in the following template:  '%(class)s-%(unicode)s' .    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_svg_sprite   This was written to support EmojiOne SVG sprite output.  The output form was taken directly from an example in the EmojiOne source.  It is expected that the the user will provide a local version of the official SVG sprite and the path to it.  The output is:  svg   class = emojione description \ud83d\ude04 / description use   xlink:href = ./../assets/sprites/emojione.sprites.svg#emoji-1f604 / use / svg   Generator Specific Options     Option  Type  Default  Description      classes  str  name of the index used  Classes to apply to the svg element where the classes are inserted as  class  in the following template:  '%(class)s-%(unicode)s' .    image_path  str  ./../assets/sprites/emojione.sprites.svg  Path to the SVG sprites.      pymdownx.emoji.to_awesome   This generator is another EmojiOne specific output.  This is an output form mentioned here:  https://github.com/Ranks/emojione/tree/master/lib/emojione-awesome .  According to EmojiOne s documentation, it aims to give a font-awesome like interface for EmojiOne.  There isn t currently a CDN link that could be found, but you can provide the CSS in your project locally:  https://github.com/Ranks/emojione/blob/master/assets/css/emojione-awesome.css .  The output format is:  i   class = e1a-smile / i      Option  Type  Default  Description      classes  str  e1a  Classes to apply to the svg element where the classes are inserted as  class  in the following template:  '%(class)s-%(shortname)s' .    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_alt   This generator supports both Gemoji and EmojiOne.  The generator outputs the alt value directly to the document.  The output can be Unicode characters, HTML entities, or even just the short name depending on what the global setting of  alt  is set to.  \ud83d\ude03  There are no generator specific options.", 
            "title": "Default Emoji Generators"
        }, 
        {
            "location": "/extensions/emoji/#custom-emoji-indexes", 
            "text": "In order to provide a custom index, the emoji extension must be given a function that returns a suitable emoji index.  No parameters are passed to the function.  The function should simply return the custom index in the following format.  emoji_index   =   { \n     # Name is the name of the index.  This is passed into the emoji \n     # generator functions and can be used to differentiate logic \n     # for different indexes if required. \n     name :   myindex , \n\n     # The actual index.  An dictionary of all the emoji. \n     # Different emoji shortnames with the same Unicode data \n     # can be mentioned under aliases. \n     emoji :   { \n         # Key is the short name. \n         :zero: :   { \n\n             # Name is the long name. \n             name :   keycap digit zero , \n\n             # Unicode is the representation of the Unicode \n             # code points with variations and joiners striped out. \n             # This is used to reference pngs or svgs associated \n             # with the emoji and can also sometimes be used as \n             # part of special class names in the HTML output. \n             # \n             # Do not include this if the emoji is a custom, \n             # non-Unicode emoji. \n             unicode :   0030-20e3 , \n\n             # This is the full Unicode code points and is \n             # used for the  alt  attributes in the HTML output of images. \n             # It is redundant to include this if it is the \n             # same as  unicode , but it won t hurt anything if it is. \n             # \n             # Do not include this if the emoji is a custom, \n             # non-Unicode emoji. \n             unicode_alt :   0030-fe0f-20e3 \n         }, \n         # No need to specify  unicode_alt  as it is the same \n         # as  unicode . \n         :thumbsup: :   { \n             name :   thumbs up sign , \n             unicode :   1f44d \n         }, \n         # Should not specify any unicode fields \n         # as this is not a real unicode emoji. \n         :octocat: :   { \n             name :   octocat \n         }, \n     }, \n     # Short names that share previously defined Unicode data \n     # like  +1  and  thumbsup  etc. \n     aliases :   { \n         # Key is the alias. \n         # Value is the short name it maps to in the \n         # previously defined  emoji  key. \n         :+1: :   :thumbsup: \n     }  }", 
            "title": "Custom Emoji Indexes"
        }, 
        {
            "location": "/extensions/emoji/#custom-emoji-generators", 
            "text": "Each different kind of output is controlled by a different emoji generator function, but all generator functions have the same format. The format is shown below in case you need to create your own custom output generator.   def emoji_generator(index, shortname, alias, uc, alt, title, options, md)      Parameter  Type  Description      index  str  The name of the selected emoji index.    shortname  str  The current short name.  This may differ from the actual name used in a document as aliases get translated to the main short name.    alias  str  If the name specified in the document was an alias, that alias will be set here, and the main short name will be found under  shortname .  This will be  None  if the name used was not an alias.    uc  str  This is a the the Unicode values for the emoji.  This name is used to reference emoji image names or for specifying class names etc., so it may not contain all the code points.  The string returned consists of each Unicode value represented as a hex value separated with hyphens.  Values such as U+200D ZERO WIDTH JOINER and  U+FE0F VARIATION SELECTOR-16 are stripped out.  So the value here will not always be practical for calculating the actual Unicode points of an emoji.  This will be  None  for non-standard emoji that are not Unicode.    alt  str  This is the alternative emoji value (or fallback value).  Its format will differ depending on the extension setting  alt .  This will be returned as either the Unicode characters, HTML entities, or the short name used.  See the  alt  setting for more info.    title  str  This is the title that can be used in img elements.  Depending of the global extension setting  title , this will either return the long name, the short name, or  None .  See the  title  setting for more info.    options  dict  This is a dictionary to specify generator function specific options.  This can be anything, and it is up to the generator function to parse and provide defaults.    md  class  This is the Markdown class object.  This mainly used to access specific things needed from the Markdown class.  If you needed to stash your output, you would do something like:  md.htmlStash.store(alt, safe=True) .      Non-Unicode emojis  Keep in mind that Gemoji ships with some non-standard emojis like  :octocat:  that do not have Unicode code points.   uc  and  alt  are affected by this and will return  None  and the short name respectively instead of strings describing the Unicode points.  For example  :octocat:  will just return  None  for  uc  and  :octocat:  for  alt .  If you are parsing an index with custom emojis, just like Gemoji has, then you need to be aware of this.", 
            "title": "Custom Emoji Generators"
        }, 
        {
            "location": "/extensions/emoji/#using-with-mkdocs", 
            "text": "This project uses these extensions with  MkDocs  to generate the documentation.  It might not be obvious how to set the index or generator functions in Mkdoc s YAML settings file, but it is actually pretty easy.  The functions are referenced like you would import them in Python except you also append them with a special prefix to let the YAML module know that the setting value is a Python object.  For instance, to specify the  to_svg  generator, you would simply reference it like this:  !!python/name:pymdownx.emoji.to_svg  (or you could use your own custom module).  markdown_extensions : \n   -   pymdownx.emoji : \n       emoji_generator :   !!python/name:pymdownx.emoji.to_svg", 
            "title": "Using with MkDocs"
        }, 
        {
            "location": "/extensions/emoji/#emoji-index-updates", 
            "text": "The Emoji extension might not always have indexes built from the latest repos, we try to keep the indexes updated with new releases, but if they fall out of date, you can open an issue on the repo to alert the maintainer(s) and they will update them when someone gets a chance.  Pull requests are also welcome.  The process for updating the indexes is automated, so it is fairly easy to do for a pull request.   Ensure you have requests installed:  pip install requests .  Fork the repo and checkout to your machine.  cd pymdown-extensions/tools  Call the generator script:  python gen_emoji --gemoji  or  python gen_emoji --emojione .  It will prompt you to select a tag to download.  Please pull the latest  official  tag.  Please don t pull experimental tags.  This should update the indexes.  Then you want to update the tests.  Step back out to the root of the project:  cd .. .  Force the tests to update via  python run_tests.py -fu .   Nothing is fool proof.  If they make a breaking change to the files that the script parses, or the location of the files, the auto-update tool may need to be updated itself (hopefully this would be a rare occurrence).  If such a change does occur, and you are feeling brave, a pull request would be appreciated, but in time, they will be resolved regardless.", 
            "title": "Emoji Index Updates"
        }, 
        {
            "location": "/extensions/emoji/#examples", 
            "text": "Current examples are all rendered with EmojiOne.  EmojiOne :smile: emojis are very useful :thumbsup:.\n\nYou can also escape `:` characters to escape the emoji: \\:smile:.  EmojiOne   emojis are very useful  .  You can also escape  :  characters to escape the emoji: :smile:.", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/extra/", 
            "text": "Overview\n\n\nPython Markdown provides an \nextra\n extension to provide features similar to PHP Markdown Extra.  PyMdown Extensions aims to provide not only new features, but to improve behavior in Python Markdown\ns existing feature set.  Some of these things can be at odds.  Python Markdown\ns \nsmartstrong\n and \nfenced_code\n are not compatible with PyMdown Extensions\n \nbetterem\n and \nsuperfences\n.  \nsmartstong\n should never be loaded at the same time as \nbetterem\n, and \nsuperfences\n should not be loaded at the same time as \nfenced_code\n.  Because of this, it is not possible to use Python Markdown\ns \nextra\n and PyMdown\ns \nsuperfences\n and \nbetterem\n. To make this less frustrating, PyMdown provides it\ns own implementation of \nextra\n.\n\n\nPyMdown\ns \nextra\n is just like Python Markdown\ns extra except \nsmartstrong\n is replaced by \nbetterem\n and \nfenced_code\n is replaced by \nsuperfences\n.  All other features and extensions should be identical because we are using the same ones.\n\n\nThis extension is a convenience extension, and it currently provides no other additional features.  But remember \ndon\nt use \npymdownx.extra\n while also using \nmarkdown.extensions.extra\n!\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nbetterem\n\n\n\n\npymdownx.betterem\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\nFootnotes\n\n\n\n\nmarkdown.extensions.footnotes\n\n\n\n\n\n\nAttribute Lists\n\n\n\n\nmarkdown.extensions.attr_list\n\n\n\n\n\n\nDefinition Lists\n\n\n\n\nmarkdown.extensions.def_list\n\n\n\n\n\n\nTables\n\n\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\nAbbreviations\n\n\n\n\nmarkdown.extensions.abbr\n\n\n\n\n\n\nextrarawhtml\n\n\n\n\npymdownx.extrarawhtml", 
            "title": "Extra"
        }, 
        {
            "location": "/extensions/extra/#overview", 
            "text": "Python Markdown provides an  extra  extension to provide features similar to PHP Markdown Extra.  PyMdown Extensions aims to provide not only new features, but to improve behavior in Python Markdown s existing feature set.  Some of these things can be at odds.  Python Markdown s  smartstrong  and  fenced_code  are not compatible with PyMdown Extensions   betterem  and  superfences .   smartstong  should never be loaded at the same time as  betterem , and  superfences  should not be loaded at the same time as  fenced_code .  Because of this, it is not possible to use Python Markdown s  extra  and PyMdown s  superfences  and  betterem . To make this less frustrating, PyMdown provides it s own implementation of  extra .  PyMdown s  extra  is just like Python Markdown s extra except  smartstrong  is replaced by  betterem  and  fenced_code  is replaced by  superfences .  All other features and extensions should be identical because we are using the same ones.  This extension is a convenience extension, and it currently provides no other additional features.  But remember  don t use  pymdownx.extra  while also using  markdown.extensions.extra !   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions:     Extension  Options  Name      betterem   pymdownx.betterem    superfences   pymdownx.superfences    Footnotes   markdown.extensions.footnotes    Attribute Lists   markdown.extensions.attr_list    Definition Lists   markdown.extensions.def_list    Tables   markdown.extensions.tables    Abbreviations   markdown.extensions.abbr    extrarawhtml   pymdownx.extrarawhtml", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/extrarawhtml/", 
            "text": "Overview\n\n\nPython Markdown provides an \nextra\n extension to provide features similar to PHP Markdown Extra.  For reasons covered in \npymdownx.extra\n, PyMdown Extensions implements its own \nextra\n extension.  In order to accomplish this, Python Markdown\ns raw HTML parsing functionality, which is used to parse nested markdown inside HTML blocks, had to be split out of the \nextra\n implementation.  Afterwards, it was decided to leave it completely separate to allow people who maybe didn\nt want to use all of the features found in \nextra\n, but still wanted to use the parsing of nested Markdown inside of HTML blocks.  This is basically a wrapper around Python Markdown\ns \nextra\n extension, but it only implements the raw HTML parsing.  For more info see \nPython Markdown\ns Extra documentation\n.", 
            "title": "ExtraRawHtml"
        }, 
        {
            "location": "/extensions/extrarawhtml/#overview", 
            "text": "Python Markdown provides an  extra  extension to provide features similar to PHP Markdown Extra.  For reasons covered in  pymdownx.extra , PyMdown Extensions implements its own  extra  extension.  In order to accomplish this, Python Markdown s raw HTML parsing functionality, which is used to parse nested markdown inside HTML blocks, had to be split out of the  extra  implementation.  Afterwards, it was decided to leave it completely separate to allow people who maybe didn t want to use all of the features found in  extra , but still wanted to use the parsing of nested Markdown inside of HTML blocks.  This is basically a wrapper around Python Markdown s  extra  extension, but it only implements the raw HTML parsing.  For more info see  Python Markdown s Extra documentation .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/github/", 
            "text": "Overview\n\n\nThe Github extension is a convenience extension to load up and configure the minimum extensions needed to get a \nGFM\n feel.  It is not a 1:1 emulation, but some aspects are pretty close.  I don\nt really have a desire to to make it exact, but the feel is nice if you like \nGFM\n feel; some things may differ slightly.\n\n\n\n\nTip\n\n\nFor code highlighting, you will also need to load the \nmarkdown.extensions.codehilite\n extension yourself as well with \nguess_lang=False\n and your preferred Pygments style (if available or use some other JavaScript highlighter).  Though there is no Github style included with this extension, you are most likely able to find a suitable theme online by searching.  I do have older Github styles found at the \npymdown-styles\n repo; it contains the original Pygments Github style (github) and the Github 2014 style (github2014) which Github used before they ditched Pygments for their own in-house highlighter.\n\n\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions that get loaded:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\nNew\nLine\nto\nBreak\n[^nl2br]\n\n\n\n\nmarkdown.extensions.nl2b\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n{\nsmart_enable\n:\n \nall\n \n}\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n{\nsubscript\n:\n \nFalse\n \n}\n\n\npymdownx.tilde\n\n\n\n\n\n\ngithubemoji\n\n\n\n\npymdownx.githubemoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nheaderanchor\n\n\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nno_nl2br\n\n\nbool\n\n\nTrue\n\n\nDon\nt use \nnl2br\n extension.\n\n\n\n\n\n\n\n\n\n\nDeprecated\n\n\nno_nl2br\n is deprecated in version \n1.3.0\n and will be removed in the future as Github\ns \nGFM\n (which we are emulating) no longer converts new lines to \nbr\n.", 
            "title": "Github"
        }, 
        {
            "location": "/extensions/github/#overview", 
            "text": "The Github extension is a convenience extension to load up and configure the minimum extensions needed to get a  GFM  feel.  It is not a 1:1 emulation, but some aspects are pretty close.  I don t really have a desire to to make it exact, but the feel is nice if you like  GFM  feel; some things may differ slightly.   Tip  For code highlighting, you will also need to load the  markdown.extensions.codehilite  extension yourself as well with  guess_lang=False  and your preferred Pygments style (if available or use some other JavaScript highlighter).  Though there is no Github style included with this extension, you are most likely able to find a suitable theme online by searching.  I do have older Github styles found at the  pymdown-styles  repo; it contains the original Pygments Github style (github) and the Github 2014 style (github2014) which Github used before they ditched Pygments for their own in-house highlighter.    Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions that get loaded:     Extension  Options  Name      Tables   markdown.extensions.tables    New Line to Break [^nl2br]   markdown.extensions.nl2b    magiclink   pymdownx.magiclink    betterem  { smart_enable :   all   }  pymdownx.betterem    tilde  { subscript :   False   }  pymdownx.tilde    githubemoji   pymdownx.githubemoji    tasklist   pymdownx.tasklist    headeranchor   pymdownx.headeranchor    superfences   pymdownx.superfences", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/github/#options", 
            "text": "Option  Type  Default  Description      no_nl2br  bool  True  Don t use  nl2br  extension.      Deprecated  no_nl2br  is deprecated in version  1.3.0  and will be removed in the future as Github s  GFM  (which we are emulating) no longer converts new lines to  br .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/githubemoji/", 
            "text": "Overview\n\n\n\n\nDeprecated\n\n\nThis extension has been deprecated in version \n1.3.0\n.  Users are encouraged to use the \nemoji extension\n instead.  This extension will be removed at some time in the future.\n\n\n\n\nGithubEmoji adds support for \nGFM\n emojis.  Using \nGFM\ns emoji syntax, this extension will create image links to Github\ns emoji assets.  It adds support for all of Github\ns supported emojis (at the time of writing this).\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\nemoji\n\n\nInsert the given class name into the img tag.  To disable class name insertion, provide an empty string.\n\n\n\n\n\n\noffline\n\n\nbool\n\n\nTrue\n\n\nWhen enabled, GithubEmoji will use the last generated emoji table from Github at the time of release.  If for some reason Github changes things and you \nmust\n have the latest, you can set this to \nFalse\n and GithubEmoji will request the latest table via the \nGithub API\n.  It does this with the \nrequests\n module, and it will only be in memory.  As requests is not a required module, if you do not have requests installed, this will default back to offline.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nSince \nonline\n calls through the Github API are done anonymously, Github will limit the caller to approximately 60 calls in an hour.  There are no plans at this time to add \nOAuth support\n.", 
            "title": "GithubEmoji"
        }, 
        {
            "location": "/extensions/githubemoji/#overview", 
            "text": "Deprecated  This extension has been deprecated in version  1.3.0 .  Users are encouraged to use the  emoji extension  instead.  This extension will be removed at some time in the future.   GithubEmoji adds support for  GFM  emojis.  Using  GFM s emoji syntax, this extension will create image links to Github s emoji assets.  It adds support for all of Github s supported emojis (at the time of writing this).", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/githubemoji/#options", 
            "text": "Option  Type  Default  Description      css_class  string  emoji  Insert the given class name into the img tag.  To disable class name insertion, provide an empty string.    offline  bool  True  When enabled, GithubEmoji will use the last generated emoji table from Github at the time of release.  If for some reason Github changes things and you  must  have the latest, you can set this to  False  and GithubEmoji will request the latest table via the  Github API .  It does this with the  requests  module, and it will only be in memory.  As requests is not a required module, if you do not have requests installed, this will default back to offline.      Note  Since  online  calls through the Github API are done anonymously, Github will limit the caller to approximately 60 calls in an hour.  There are no plans at this time to add  OAuth support .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/headeranchor/", 
            "text": "Overview\n\n\nHeaderAnchor adds anchors to headers in the style of \nGFM\ns header anchors. The header anchors in this document were all generated with this extension.\n\n\nOptions\n\n\nBy default, HeaderAnchor will use \nToc\ns\n settings (if \nToc\n is being used), but HeaderAnchor can be run without \nToc\n.  HeaderAnchor can also be run along side \nToc\n and ignore \nToc\ns settings; though it is advised to keep \nToc\n and HeaderAnchor\ns settings in sync to ensure header links properly link.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nstring\n\n\n-\n\n\nIf ignoring \nToc\ns settings, this will specify the word separator used.\n\n\n\n\n\n\nslugify\n\n\nfunction\n\n\nDefault method\n\n\nIf ignoring \nToc\ns settings, this will specify the function to generate anchors based on header text.  By Default, this will use \nToc\ns default, fallback slugify method, but if for any reason \nToc\n is not installed, HeaderAnchor will fall back to an equivalent method.\n\n\n\n\n\n\nuse_toc_settings\n\n\nbool\n\n\nTrue\n\n\nThis specifies whether HeaderAnchor should get its settings from \nToc\n.  This affects \nslugify\n and \nseparator\n.\n\n\n\n\n\n\n\n\nAlternate Slugify\n\n\nPython Markdown\ns default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.\n\n\nuslugify\n\n\nIn order to get slugs closer to like \nGFM\ns slugs (in regards to Unicode chars), a slugify has been included at \npymdownx.headerancor.uslugify\n.  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override \nToc\ns and HeaderAnchor\ns slugify; it is good to override both if you are using both.\n\n\nuslugify_encoded\n\n\nIf you aren\nt encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use \nuslugify_encoded\n which will percent encode non-ASCII word chars.  You can use this to override \nToc\ns and HeaderAnchor\ns slugify; it is good to override both if you are using both.\n\n\nCSS\n\n\nThis is the example CSS for rendering the header anchors. While Font Awesome is used in this example, you can substitute it with \nOcticons\n for even more of a \nGFM\n feel, or use something else entirely.\n\n\nThe HTML tags with classes are set like this:\n\n\nh1\n \nid\n=\ncss\n\n    \na\n \nname\n=\nuser-content-css\n \nhref\n=\n#css\n \nclass\n=\nheaderanchor-link\n \naria-hidden\n=\ntrue\n\n        \nspan\n \nclass\n=\nheaderanchor\n/\nspan\n\n    \n/\na\n\n    CSS\n\n/\nh1\n\n\n\n\n\n\nWe have two classes to work with:\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheaderanchor-link\n\n\nThis is attached to the actual anchor tag that links to the header.\n\n\n\n\n\n\nheaderanchor\n\n\nThis is the header anchor character you see.  In this case, it is the \nlink character from Font Awesome\n.\n\n\n\n\n\n\n\n\nThe CSS below sets the header tags to be \nrelative\n, and the \nheaderanchor-link\n class to be \nabsolute\n.  We then attach a \n:before\n pseudo element to the \nheaderanchor\n class with the desired character and position.  We play a little bit with padding and margin so when you hover over the header or where the link is supposed to be, the link appears and is accessible without causing the header position to change.\n\n\n/* Header Anchors */\n\n\n.markdown-body\n \n{\n\n    \npadding-left\n:\n \n30px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor-link\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntop\n:\n \n0\n;\n\n  \nbottom\n:\n \n0\n;\n\n  \nleft\n:\n \n0\n;\n\n  \ndisplay\n:\n \nblock\n;\n\n  \npadding-right\n:\n \n6px\n;\n\n  \npadding-left\n:\n \n30px\n;\n\n  \nmargin-left\n:\n \n-30px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor-link\n:focus\n \n{\n\n  \noutline\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n,\n\n\n.markdown-body\n \nh2\n,\n\n\n.markdown-body\n \nh3\n,\n\n\n.markdown-body\n \nh4\n,\n\n\n.markdown-body\n \nh5\n,\n\n\n.markdown-body\n \nh6\n \n{\n\n  \nposition\n:\n \nrelative\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh2\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh3\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh4\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh5\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh6\n \n.headeranchor\n \n{\n\n  \ndisplay\n:\n \nnone\n;\n\n  \ncolor\n:\n \n#000\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh2\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh3\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh4\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh5\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh6\n:hover\n \n.headeranchor-link\n \n{\n\n  \nheight\n:\n \n1em\n;\n\n  \npadding-left\n:\n \n8px\n;\n\n  \nmargin-left\n:\n \n-30px\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh2\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh3\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh4\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh5\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh6\n:hover\n \n.headeranchor-link\n \n.headeranchor\n \n{\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor\n \n{\n\n  \nfont\n:\n \nnormal\n \nnormal\n \n16px\n \nFontAwesome\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nfont\n-\nsmoothing\n:\n \nantialiased\n;\n\n  \n-\nmoz\n-\nosx\n-\nfont\n-\nsmoothing\n:\n \ngrayscale\n;\n\n  \n-\nwebkit\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nmoz\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nms\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \nuser\n-\nselect\n:\n \nnone\n;\n\n\n}\n\n\n\n.headeranchor\n:before\n \n{\n\n  \ncontent\n:\n \n\\f0c1\n;\n\n\n}", 
            "title": "HeaderAnchor"
        }, 
        {
            "location": "/extensions/headeranchor/#overview", 
            "text": "HeaderAnchor adds anchors to headers in the style of  GFM s header anchors. The header anchors in this document were all generated with this extension.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/headeranchor/#options", 
            "text": "By default, HeaderAnchor will use  Toc s  settings (if  Toc  is being used), but HeaderAnchor can be run without  Toc .  HeaderAnchor can also be run along side  Toc  and ignore  Toc s settings; though it is advised to keep  Toc  and HeaderAnchor s settings in sync to ensure header links properly link.     Option  Type  Default  Description      separator  string  -  If ignoring  Toc s settings, this will specify the word separator used.    slugify  function  Default method  If ignoring  Toc s settings, this will specify the function to generate anchors based on header text.  By Default, this will use  Toc s default, fallback slugify method, but if for any reason  Toc  is not installed, HeaderAnchor will fall back to an equivalent method.    use_toc_settings  bool  True  This specifies whether HeaderAnchor should get its settings from  Toc .  This affects  slugify  and  separator .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/headeranchor/#alternate-slugify", 
            "text": "Python Markdown s default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.", 
            "title": "Alternate Slugify"
        }, 
        {
            "location": "/extensions/headeranchor/#uslugify", 
            "text": "In order to get slugs closer to like  GFM s slugs (in regards to Unicode chars), a slugify has been included at  pymdownx.headerancor.uslugify .  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override  Toc s and HeaderAnchor s slugify; it is good to override both if you are using both.", 
            "title": "uslugify"
        }, 
        {
            "location": "/extensions/headeranchor/#uslugify_encoded", 
            "text": "If you aren t encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use  uslugify_encoded  which will percent encode non-ASCII word chars.  You can use this to override  Toc s and HeaderAnchor s slugify; it is good to override both if you are using both.", 
            "title": "uslugify_encoded"
        }, 
        {
            "location": "/extensions/headeranchor/#css", 
            "text": "This is the example CSS for rendering the header anchors. While Font Awesome is used in this example, you can substitute it with  Octicons  for even more of a  GFM  feel, or use something else entirely.  The HTML tags with classes are set like this:  h1   id = css \n     a   name = user-content-css   href = #css   class = headeranchor-link   aria-hidden = true \n         span   class = headeranchor / span \n     / a \n    CSS / h1   We have two classes to work with:     Classes  Description      headeranchor-link  This is attached to the actual anchor tag that links to the header.    headeranchor  This is the header anchor character you see.  In this case, it is the  link character from Font Awesome .     The CSS below sets the header tags to be  relative , and the  headeranchor-link  class to be  absolute .  We then attach a  :before  pseudo element to the  headeranchor  class with the desired character and position.  We play a little bit with padding and margin so when you hover over the header or where the link is supposed to be, the link appears and is accessible without causing the header position to change.  /* Header Anchors */  .markdown-body   { \n     padding-left :   30px ;  }  .markdown-body   .headeranchor-link   { \n   position :   absolute ; \n   top :   0 ; \n   bottom :   0 ; \n   left :   0 ; \n   display :   block ; \n   padding-right :   6px ; \n   padding-left :   30px ; \n   margin-left :   -30px ;  }  .markdown-body   .headeranchor-link :focus   { \n   outline :   none ;  }  .markdown-body   h1 ,  .markdown-body   h2 ,  .markdown-body   h3 ,  .markdown-body   h4 ,  .markdown-body   h5 ,  .markdown-body   h6   { \n   position :   relative ;  }  .markdown-body   h1   .headeranchor ,  .markdown-body   h2   .headeranchor ,  .markdown-body   h3   .headeranchor ,  .markdown-body   h4   .headeranchor ,  .markdown-body   h5   .headeranchor ,  .markdown-body   h6   .headeranchor   { \n   display :   none ; \n   color :   #000 ; \n   vertical-align :   middle ;  }  .markdown-body   h1 :hover   .headeranchor-link ,  .markdown-body   h2 :hover   .headeranchor-link ,  .markdown-body   h3 :hover   .headeranchor-link ,  .markdown-body   h4 :hover   .headeranchor-link ,  .markdown-body   h5 :hover   .headeranchor-link ,  .markdown-body   h6 :hover   .headeranchor-link   { \n   height :   1em ; \n   padding-left :   8px ; \n   margin-left :   -30px ; \n   line-height :   1 ; \n   text-decoration :   none ;  }  .markdown-body   h1 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h2 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h3 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h4 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h5 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h6 :hover   .headeranchor-link   .headeranchor   { \n   display :   inline - block ;  }  .markdown-body   .headeranchor   { \n   font :   normal   normal   16px   FontAwesome ; \n   line-height :   1 ; \n   display :   inline - block ; \n   text-decoration :   none ; \n   - webkit - font - smoothing :   antialiased ; \n   - moz - osx - font - smoothing :   grayscale ; \n   - webkit - user - select :   none ; \n   - moz - user - select :   none ; \n   - ms - user - select :   none ; \n   user - select :   none ;  }  .headeranchor :before   { \n   content :   \\f0c1 ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/inlinehilite/", 
            "text": "Overview\n\n\nInlineHilite extends \nCodeHilite\n to add inline code highlighting.  Borrowing from CodeHilite\ns existing syntax, InlineHilite utilizes the following syntax to insert inline  highlighted code: \n`:::language mycode`\n or \n`#!language mycode`\n.  We will call these specifiers mock shebangs.\n\n\nWhen using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come \nimmediately\n after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.\n\n\n\n\nTip\n\n\nIf using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.\n\n\nIf you are using a JavaScript highlighter such as \nhighlight.js\n you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the normal highlighted blocks so you can also target and style them with CSS differently.  InlineHilite allows you to have a different \ncss_class\n than what is used by \nCodeHilite\n.\n\n\n\n\nOptions\n\n\nBy default, InlineHilite will use CodeHilite\ns settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite\ns settings.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstyle_plain_text\n\n\nbool\n\n\nFalse\n\n\nBy default, InlineHilite will ignore a code block with no language specified or the \ntext\n language specified.  No classes or style will be applied, the code block will be styled as normal.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.\n\n\n\n\n\n\nuse_codehilite_settings\n\n\nbool\n\n\nTrue\n\n\nDetermine whether CodeHilite\ns settings should be used, or if InlineHilite should use a different set.\n\n\n\n\n\n\nguess_lang\n\n\nbool\n\n\nTrue\n\n\nIf ignoring CodeHilite\ns settings, determine whether InlineHilite should try to guess a code block\ns language if not specified.\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\ninlinehilite\n\n\nIf ignoring CodeHilite\ns settings, this is the class name that will be injected into code tags when they are processed.\n\n\n\n\n\n\npygments_style\n\n\nstring\n\n\ndefault\n\n\nIf ignoring CodeHilite\ns settings, this is the pygments style to use.  When using Python Markdown, this really only has an effect when using \nnoclasses\n.\n\n\n\n\n\n\nnoclasses\n\n\nbool\n\n\nFalse\n\n\nIf ignoring CodeHilite\ns settings, this will cause the styles to directly be written to the tag\ns style attribute instead of requiring a stylesheet.\n\n\n\n\n\n\nuse_pygments\n\n\nbool\n\n\nTrue\n\n\nIf Pygments is available, and if ignoring CodeHilite\ns settings, this will control whether Pygements is used on the code block, or if the block\ns content will just be escaped and prepped for a JavaScript syntax highlighter.\n\n\n\n\n\n\n\n\nExample\n\n\nHere is some code: `#!js function pad(v){return (\n0\n+v).split(\n).reverse().splice(0,2).reverse().join(\n)}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.\n\n\n\n\n\nHere is some code: \nfunction\n \npad\n(\nv\n){\nreturn\n \n(\n0\n+\nv\n).\nsplit\n(\n).\nreverse\n().\nsplice\n(\n0\n,\n2\n).\nreverse\n().\njoin\n(\n)}\n\n\nThe mock shebang will be treated like text here: \n#!js var test = 0;\n.", 
            "title": "InlineHilite"
        }, 
        {
            "location": "/extensions/inlinehilite/#overview", 
            "text": "InlineHilite extends  CodeHilite  to add inline code highlighting.  Borrowing from CodeHilite s existing syntax, InlineHilite utilizes the following syntax to insert inline  highlighted code:  `:::language mycode`  or  `#!language mycode` .  We will call these specifiers mock shebangs.  When using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come  immediately  after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.   Tip  If using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.  If you are using a JavaScript highlighter such as  highlight.js  you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the normal highlighted blocks so you can also target and style them with CSS differently.  InlineHilite allows you to have a different  css_class  than what is used by  CodeHilite .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/inlinehilite/#options", 
            "text": "By default, InlineHilite will use CodeHilite s settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite s settings.     Option  Type  Default  Description      style_plain_text  bool  False  By default, InlineHilite will ignore a code block with no language specified or the  text  language specified.  No classes or style will be applied, the code block will be styled as normal.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.    use_codehilite_settings  bool  True  Determine whether CodeHilite s settings should be used, or if InlineHilite should use a different set.    guess_lang  bool  True  If ignoring CodeHilite s settings, determine whether InlineHilite should try to guess a code block s language if not specified.    css_class  string  inlinehilite  If ignoring CodeHilite s settings, this is the class name that will be injected into code tags when they are processed.    pygments_style  string  default  If ignoring CodeHilite s settings, this is the pygments style to use.  When using Python Markdown, this really only has an effect when using  noclasses .    noclasses  bool  False  If ignoring CodeHilite s settings, this will cause the styles to directly be written to the tag s style attribute instead of requiring a stylesheet.    use_pygments  bool  True  If Pygments is available, and if ignoring CodeHilite s settings, this will control whether Pygements is used on the code block, or if the block s content will just be escaped and prepped for a JavaScript syntax highlighter.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/inlinehilite/#example", 
            "text": "Here is some code: `#!js function pad(v){return ( 0 +v).split( ).reverse().splice(0,2).reverse().join( )}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.  Here is some code:  function   pad ( v ){ return   ( 0 + v ). split ( ). reverse (). splice ( 0 , 2 ). reverse (). join ( )}  The mock shebang will be treated like text here:  #!js var test = 0; .", 
            "title": "Example"
        }, 
        {
            "location": "/extensions/magiclink/", 
            "text": "Overview\n\n\nGFM\n has a nice feature that detects and auto-generates links.  This extension adds similar functionality to Python Markdown allowing you to just type or paste links; no special syntax required.  It auto-links HTML, FTP, and email links.\n\n\nExamples\n\n\nThis requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/pymdown-extensions.\n\nOr even an email address fake.email@email.com.\n\n\n\n\n\nThis requires no special syntax.\n\n\nJust paste links directly in the document like this: \nhttps://github.com/facelessuser/pymdown-extensions\n.\n\n\nOr even an email address \nfake.email@email.com\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhide_protocol\n\n\nbool\n\n\nFalse\n\n\nIf \nTrue\n, links are displayed without the initial ftp://, http:// or https://", 
            "title": "MagicLink"
        }, 
        {
            "location": "/extensions/magiclink/#overview", 
            "text": "GFM  has a nice feature that detects and auto-generates links.  This extension adds similar functionality to Python Markdown allowing you to just type or paste links; no special syntax required.  It auto-links HTML, FTP, and email links.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/magiclink/#examples", 
            "text": "This requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/pymdown-extensions.\n\nOr even an email address fake.email@email.com.  This requires no special syntax.  Just paste links directly in the document like this:  https://github.com/facelessuser/pymdown-extensions .  Or even an email address  fake.email@email.com .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/magiclink/#options", 
            "text": "Option  Type  Default  Description      hide_protocol  bool  False  If  True , links are displayed without the initial ftp://, http:// or https://", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/mark/", 
            "text": "Overview\n\n\nMark adds the ability to insert \nmark\n/\nmark\n tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of \nmark\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_mark\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with mark characters: \n==mark==me==\n \n \nmark==me\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nMark adds \nmark\n tags when inline text is surrounded by double equal signs: \n==mark me==\n \n \nmark me\n.  It can optionally be configured to use smart logic: \n==mark==me==\n \n \nmark==me\n.", 
            "title": "Mark"
        }, 
        {
            "location": "/extensions/mark/#overview", 
            "text": "Mark adds the ability to insert  mark / mark  tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of  mark  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/mark/#options", 
            "text": "Option  Type  Default  Description      smart_mark  bool  True  Use smart logic with mark characters:  ==mark==me==     mark==me .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/mark/#examples", 
            "text": "Mark adds  mark  tags when inline text is surrounded by double equal signs:  ==mark me==     mark me .  It can optionally be configured to use smart logic:  ==mark==me==     mark==me .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/pathconverter/", 
            "text": "Overview\n\n\nPathConverter is an extension that can convert paths to absolute or relative paths for links and images.  PathConverter takes a base path (an absolute path used as a reference for locating images and referenced files) and a relative path (an absolute path that the links will be relative to after conversion if not running in absolute mode) and then converts paths for the \nhref\n and/or \nsrc\n attributes in \na\n, \nscript\n, \nimg\n, and \nlink\n tags.\n\n\nPathConverter will only operate on file paths that can be confirmed to exist on the system it is run on.  Relative mode is the more useful mode as it can be used to render HTML for use in an actual website.\n\n\nPathConverter is also intelligent enough to only operate on the file portion of the a path link.  Consider the following scenario:  \npath/to/file.html#header-to-jump-to\n.  In the example, \npath/to/file.html\n will be converted, but \n#header-to-jump-to\n will be left unaltered.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n\n\nA string indicating an absolute base path to be used to find referenced files.\n\n\n\n\n\n\nrelative_path\n\n\nstring\n\n\n\n\nA string indicating an absolute path that the references are to be relative to (not used when \nabsolute\n is set \nTrue\n).\n\n\n\n\n\n\nabsolute\n\n\nbool\n\n\nFalse\n\n\nDetermines whether paths are converted to absolute or relative.\n\n\n\n\n\n\ntags\n\n\nstring\n\n\na script img link\n\n\nTags (separated by spaces) that are searched to find \nhref\n and \nsrc\n attributes.", 
            "title": "PathConverter"
        }, 
        {
            "location": "/extensions/pathconverter/#overview", 
            "text": "PathConverter is an extension that can convert paths to absolute or relative paths for links and images.  PathConverter takes a base path (an absolute path used as a reference for locating images and referenced files) and a relative path (an absolute path that the links will be relative to after conversion if not running in absolute mode) and then converts paths for the  href  and/or  src  attributes in  a ,  script ,  img , and  link  tags.  PathConverter will only operate on file paths that can be confirmed to exist on the system it is run on.  Relative mode is the more useful mode as it can be used to render HTML for use in an actual website.  PathConverter is also intelligent enough to only operate on the file portion of the a path link.  Consider the following scenario:   path/to/file.html#header-to-jump-to .  In the example,  path/to/file.html  will be converted, but  #header-to-jump-to  will be left unaltered.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/pathconverter/#options", 
            "text": "Option  Type  Default  Description      base_path  string   A string indicating an absolute base path to be used to find referenced files.    relative_path  string   A string indicating an absolute path that the references are to be relative to (not used when  absolute  is set  True ).    absolute  bool  False  Determines whether paths are converted to absolute or relative.    tags  string  a script img link  Tags (separated by spaces) that are searched to find  href  and  src  attributes.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/plainhtml/", 
            "text": "Overview\n\n\nPlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like \nstyle\n, \nid\n, \nclass\n, and \non\nname\n attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to just strip out just comments or just attributes etc.\n\n\n\n\nWarning\n\n\nThis is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like \nbleach\n.\n\n\n\n\nOptions\n\n\nBy default, PlainHtml strips the following attributes: \nstyle\n, \nid\n, \nclass\n, and \non\nname\n.  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstrip_comments\n\n\nbool\n\n\nTrue\n\n\nStrip HTML comments during post process.\n\n\n\n\n\n\nstrip_js_on_attributes\n\n\nbool\n\n\nTrue\n\n\nStrip JavaScript script attributes with the pattern on* during post process.\n\n\n\n\n\n\nstrip_attributes\n\n\nstring\n\n\nid class style\n\n\nA string attribute names separated by spaces.", 
            "title": "PlainHtml"
        }, 
        {
            "location": "/extensions/plainhtml/#overview", 
            "text": "PlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like  style ,  id ,  class , and  on name  attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to just strip out just comments or just attributes etc.   Warning  This is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like  bleach .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/plainhtml/#options", 
            "text": "By default, PlainHtml strips the following attributes:  style ,  id ,  class , and  on name .  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.     Option  Type  Default  Description      strip_comments  bool  True  Strip HTML comments during post process.    strip_js_on_attributes  bool  True  Strip JavaScript script attributes with the pattern on* during post process.    strip_attributes  string  id class style  A string attribute names separated by spaces.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/progressbar/", 
            "text": "Overview\n\n\nProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown\ns built in \nattr_list\n extension.  Though progress bars are rendered as block items, it accepts attr_list\ns inline format.\n\n\nThe basic syntax for progress bars is: \n[= \npercentage or fraction\n \noptional single or double quoted title\n]\n.  The opening \n[\n can be followed by one or more \n=\n characters. After the \n=\n char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlevel_class\n\n\nbool\n\n\nTrue\n\n\nEnables or disables the level class feature.  The level class feature adds level classes in increments of 20.\n\n\n\n\n\n\nadd_classes\n\n\nstring\n\n\n\n\nThis option accepts a string of classes separated by spaces.\n\n\n\n\n\n\n\n\nExamples\n\n\n| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0% \n0%\n]{: .candystripe-animate}              |\n|Animated: 5%        |[=5% \n5%\n]{: .candystripe-animate}              |\n|Animated: 25%       |[=25% \n25%\n]{: .candystripe-animate}            |\n|Animated: 45%       |[=45% \n45%\n]{: .candystripe-animate}            |\n|Animated: 65%       |[=65% \n65%\n]{: .candystripe-animate}            |\n|Animated: 85%       |[=85% \n85%\n]{: .candystripe-animate}            |\n|Animated: 100%      |[=100% \n100%\n]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537 \n212.2/537 Testing division\n]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50% \nI\nm a block!\n]After               |\n|Animated with Gloss |[= 50% \nGlossy\n]{: .candystripe-animate .gloss} |\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nAnimated: 0%\n\n\n\n\n\n\n\n\n0%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 5%\n\n\n\n\n\n\n\n\n5%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 25%\n\n\n\n\n\n\n\n\n25%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 45%\n\n\n\n\n\n\n\n\n45%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 65%\n\n\n\n\n\n\n\n\n65%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 85%\n\n\n\n\n\n\n\n\n85%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 100%\n\n\n\n\n\n\n\n\n100%\n\n\n\n\n\n\n\n\n\n\n\n\nDivision Percentage\n\n\n\n\n\n\n\n\n212.2/537 Testing division\n\n\n\n\n\n\n\n\n\n\n\n\nNo Label\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInline\n\n\nBefore\n\n\n\n\nI\nm a block!\n\n\n\n\nAfter\n\n\n\n\n\n\nAnimated with Gloss\n\n\n\n\n\n\n\n\nGlossy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS\n\n\nThe general HTML structure of the progress bar is as follows:\n\n\ndiv\n \nclass\n=\nprogress progress-100plus\n\n    \ndiv\n \nclass\n=\nprogress-bar\n \nstyle\n=\nwidth:100.00%\n\n        \np\n \nclass\n=\nprogress-label\n100%\n/\np\n\n    \n/\ndiv\n\n\n/\ndiv\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprogress\n\n\nThis is attached to the outer \ndiv\n container of the progress bar.\n\n\n\n\n\n\nprogress-bar\n\n\nThis is attached to the inner \ndiv\n whose width is adjusted to give the visual appearance of a bar at the desired percentage.\n\n\n\n\n\n\nprogress-label\n\n\nThis is attached to the \np\n element that will contain the desired label.\n\n\n\n\n\n\nprogress-\ninteger>plus\n\n\nThis is an optional class that indicates the percentage of the progress bar by increments of 20.\n\n\n\n\n\n\n\n\n/* Progress Bars */\n\n\n.markdown-body\n \n.progress\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nwidth\n:\n \n300px\n;\n\n  \nmargin\n:\n \n10px\n \n0\n;\n\n  \nheight\n:\n \n24px\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#ededed\n;\n\n  \nposition\n:\n \nrelative\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n-1px\n \n1px\n \n3px\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-label\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntext-align\n:\n \ncenter\n;\n\n  \nfont-weight\n:\n \nbold\n;\n\n  \nwidth\n:\n \n100%\n;\n \nmargin\n:\n \n0\n;\n\n  \nline-height\n:\n \n24px\n \n!important\n;\n\n  \ncolor\n:\n \n#333\n;\n\n  \ntext-shadow\n:\n \n1px\n \n1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n1px\n \n0\n \n#fefefe\n,\n \n1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n0\n \n1px\n \n0\n \n#fefefe\n,\n \n0\n \n-1px\n \n0\n \n#fefefe\n,\n \n1px\n \n0\n \n0\n \n#fefefe\n,\n \n-1px\n \n0\n \n0\n \n#fefefe\n,\n \n1px\n \n1px\n \n2px\n \n#000\n;\n\n  \n-\nwebkit\n-\nfont\n-\nsmoothing\n:\n \nantialiased\n \n!important\n;\n\n  \nwhite-space\n:\n \nnowrap\n;\n\n  \noverflow\n:\n \nhidden\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-bar\n \n{\n\n  \nheight\n:\n \n24px\n;\n\n  \nfloat\n:\n \nleft\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#96c6d7\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n0\n \n1px\n \n0\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n5\n)\n,\n \ninset\n \n0\n \n-1px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n  \nbackground\n-\nsize\n:\n \n30px\n \n30px\n;\n\n  \nbackground-image\n:\n \n-\nwebkit\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n\n    \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n\n    \ntransparent\n \n77%\n,\n \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nmoz\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nms\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\no\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-100plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#a6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-80plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-60plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7c896\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-40plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7a796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-20plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d796a6\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-0plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c25f77\n;\n\n\n}\n\n\n\n.markdown-body\n \n.candystripe-animate\n \n.progress-bar\n{\n\n  \n-\nwebkit\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \n-\nmoz\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n\n}\n\n\n\n@-webkit-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@-moz-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n.markdown-body\n \n.gloss\n \n.progress-bar\n \n{\n\n  \nbox\n-\nshadow\n:\n\n    \ninset\n \n0\n \n4px\n \n12px\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n7\n)\n,\n\n    \ninset\n \n0\n \n-12px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n05\n);\n\n\n}", 
            "title": "ProgressBar"
        }, 
        {
            "location": "/extensions/progressbar/#overview", 
            "text": "ProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown s built in  attr_list  extension.  Though progress bars are rendered as block items, it accepts attr_list s inline format.  The basic syntax for progress bars is:  [=  percentage or fraction   optional single or double quoted title ] .  The opening  [  can be followed by one or more  =  characters. After the  =  char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/progressbar/#options", 
            "text": "Option  Type  Default  Description      level_class  bool  True  Enables or disables the level class feature.  The level class feature adds level classes in increments of 20.    add_classes  string   This option accepts a string of classes separated by spaces.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/progressbar/#examples", 
            "text": "| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0%  0% ]{: .candystripe-animate}              |\n|Animated: 5%        |[=5%  5% ]{: .candystripe-animate}              |\n|Animated: 25%       |[=25%  25% ]{: .candystripe-animate}            |\n|Animated: 45%       |[=45%  45% ]{: .candystripe-animate}            |\n|Animated: 65%       |[=65%  65% ]{: .candystripe-animate}            |\n|Animated: 85%       |[=85%  85% ]{: .candystripe-animate}            |\n|Animated: 100%      |[=100%  100% ]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537  212.2/537 Testing division ]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50%  I m a block! ]After               |\n|Animated with Gloss |[= 50%  Glossy ]{: .candystripe-animate .gloss} |     Test  Result      Animated: 0%     0%       Animated: 5%     5%       Animated: 25%     25%       Animated: 45%     45%       Animated: 65%     65%       Animated: 85%     85%       Animated: 100%     100%       Division Percentage     212.2/537 Testing division       No Label           Inline  Before   I m a block!   After    Animated with Gloss     Glossy", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/progressbar/#css", 
            "text": "The general HTML structure of the progress bar is as follows:  div   class = progress progress-100plus \n     div   class = progress-bar   style = width:100.00% \n         p   class = progress-label 100% / p \n     / div  / div      Classes  Description      progress  This is attached to the outer  div  container of the progress bar.    progress-bar  This is attached to the inner  div  whose width is adjusted to give the visual appearance of a bar at the desired percentage.    progress-label  This is attached to the  p  element that will contain the desired label.    progress- integer>plus  This is an optional class that indicates the percentage of the progress bar by increments of 20.     /* Progress Bars */  .markdown-body   .progress   { \n   display :   block ; \n   width :   300px ; \n   margin :   10px   0 ; \n   height :   24px ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #ededed ; \n   position :   relative ; \n   box - shadow :   inset   -1px   1px   3px   rgba ( 0 ,   0 ,   0 ,   . 1 );  }  .markdown-body   .progress-label   { \n   position :   absolute ; \n   text-align :   center ; \n   font-weight :   bold ; \n   width :   100% ;   margin :   0 ; \n   line-height :   24px   !important ; \n   color :   #333 ; \n   text-shadow :   1px   1px   0   #fefefe ,   -1px   -1px   0   #fefefe ,   -1px   1px   0   #fefefe ,   1px   -1px   0   #fefefe ,   0   1px   0   #fefefe ,   0   -1px   0   #fefefe ,   1px   0   0   #fefefe ,   -1px   0   0   #fefefe ,   1px   1px   2px   #000 ; \n   - webkit - font - smoothing :   antialiased   !important ; \n   white-space :   nowrap ; \n   overflow :   hidden ;  }  .markdown-body   .progress-bar   { \n   height :   24px ; \n   float :   left ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #96c6d7 ; \n   box - shadow :   inset   0   1px   0   rgba ( 255 ,   255 ,   255 ,   . 5 ) ,   inset   0   -1px   0   rgba ( 0 ,   0 ,   0 ,   . 1 ); \n   background - size :   30px   30px ; \n   background-image :   - webkit - linear - gradient ( \n     135 deg ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   27% , \n     transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% , \n     transparent   77% ,   transparent \n   ); \n   background-image :   - moz - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - ms - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - o - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   );  }  .markdown-body   .progress-100plus   .progress-bar   { \n   background-color :   #a6d796 ;  }  .markdown-body   .progress-80plus   .progress-bar   { \n   background-color :   #c6d796 ;  }  .markdown-body   .progress-60plus   .progress-bar   { \n   background-color :   #d7c896 ;  }  .markdown-body   .progress-40plus   .progress-bar   { \n   background-color :   #d7a796 ;  }  .markdown-body   .progress-20plus   .progress-bar   { \n   background-color :   #d796a6 ;  }  .markdown-body   .progress-0plus   .progress-bar   { \n   background-color :   #c25f77 ;  }  .markdown-body   .candystripe-animate   .progress-bar { \n   - webkit - animation :   animate - stripes   3s   linear   infinite ; \n   - moz - animation :   animate - stripes   3s   linear   infinite ; \n   animation :   animate - stripes   3s   linear   infinite ;  }  @-webkit-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @-moz-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  .markdown-body   .gloss   .progress-bar   { \n   box - shadow : \n     inset   0   4px   12px   rgba ( 255 ,   255 ,   255 ,   . 7 ) , \n     inset   0   -12px   0   rgba ( 0 ,   0 ,   0 ,   . 05 );  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/pymdown/", 
            "text": "Overview\n\n\n\n\nDeprecated\n\n\nThis is extension is deprecated in version \n1.3.0\n and will be removed in the future.  It is advised individually include the desired extensions instead of relying on pymdownx.pymdown to include them.\n\n\n\n\nThe PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n\n\npymdownx.tilde\n\n\n\n\n\n\ncaret\n\n\n\n\npymdownx.caret\n\n\n\n\n\n\nmark\n\n\n\n\npymdownx.mark\n\n\n\n\n\n\nsmartsymbols\n\n\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\nemoji\n\n\n\n\npymdownx.emoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nprogressbar\n\n\n\n\npymdownx.progressbar\n\n\n\n\n\n\nheaderanchor\n\n\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\narithmatex\n\n\n\n\npymdownx.arithmatex", 
            "title": "PyMdown"
        }, 
        {
            "location": "/extensions/pymdown/#overview", 
            "text": "Deprecated  This is extension is deprecated in version  1.3.0  and will be removed in the future.  It is advised individually include the desired extensions instead of relying on pymdownx.pymdown to include them.   The PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions:     Extension  Options  Name      magiclink   pymdownx.magiclink    betterem   pymdownx.betterem    tilde   pymdownx.tilde    caret   pymdownx.caret    mark   pymdownx.mark    smartsymbols   pymdownx.smartsymbols    emoji   pymdownx.emoji    tasklist   pymdownx.tasklist    progressbar   pymdownx.progressbar    headeranchor   pymdownx.headeranchor    superfences   pymdownx.superfences    arithmatex   pymdownx.arithmatex", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/smartsymbols/", 
            "text": "Overview\n\n\nSmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more \nsmarty-pants\n type replacements.  It is meant to be used along side the Python Markdown\ns \nsmarty\n extension.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrademark\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for tradmark symbol.\n\n\n\n\n\n\ncopyright\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for copyright symbol.\n\n\n\n\n\n\nregistered\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for registered symbol.\n\n\n\n\n\n\ncare_of\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for care / of.\n\n\n\n\n\n\nplusminus\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for plus / minus.\n\n\n\n\n\n\narrows\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for creating arrows.\n\n\n\n\n\n\nnotequal\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for not equal symbol.\n\n\n\n\n\n\nfractions\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for common fractions.\n\n\n\n\n\n\nordinal_numbers\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for ordinal numbers.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nMarkdown\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n(tm)\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n(r)\n\n\n\n\n\n\n\n\nc/o\n\n\n\n\n\n\n\n\n+/-\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n=/=\n\n\n\n\n\n\n\n\n1/4, etc.\n\n\n, etc.\n\n\n\n\n\n\n1st 2nd etc.\n\n\n1\nst\n 2\nnd\n etc.", 
            "title": "SmartSymbols"
        }, 
        {
            "location": "/extensions/smartsymbols/#overview", 
            "text": "SmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more  smarty-pants  type replacements.  It is meant to be used along side the Python Markdown s  smarty  extension.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/smartsymbols/#options", 
            "text": "Option  Type  Default  Description      trademark  bool  True  Add syntax for tradmark symbol.    copyright  bool  True  Add syntax for copyright symbol.    registered  bool  True  Add syntax for registered symbol.    care_of  bool  True  Add syntax for care / of.    plusminus  bool  True  Add syntax for plus / minus.    arrows  bool  True  Add syntax for creating arrows.    notequal  bool  True  Add syntax for not equal symbol.    fractions  bool  True  Add syntax for common fractions.    ordinal_numbers  bool  True  Add syntax for ordinal numbers.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/smartsymbols/#examples", 
            "text": "Markdown  Result      (tm)     (c)     (r)     c/o     +/-     --     --     --     =/=     1/4, etc.  , etc.    1st 2nd etc.  1 st  2 nd  etc.", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/superfences/", 
            "text": "Overview\n\n\nSuperFences provides 4 features:\n\n\n\n\nThe ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see \nLimitations\n for more info).\n\n\nSpecial UML flowchart fence via the \nflow\n language specifier.\n\n\nSpecial UML sequence diagram via the \nsequence\n language specifier.\n\n\nThe ability to disable indented code blocks in favor of only using the fenced variant (off by default).\n\n\n\n\nAll features can be turned on or off.\n\n\nSuperFences relies on the \nCodeHilite\n extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter could be used.\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nNested Fenced Blocks\n\n\nFenced blocks requires all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at least the first line of the fenced block needs to have the appropriate number of \n characters signifying the quote depth.\n\n\n ```\n  a fenced block\n  ```\n\n\n\n\n\nKeep in mind that too many blank lines will cause a blockquote to terminate, so remember to use \n markers accordingly if not marking every line.\n\n\n ```\n  a fenced block\n\n\n with blank lines\n  ```\n\n\n\n\n\nIf using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.\n\n\n-\nspace\n\n    ```\n    a fenced block\n    ```\n\nDefinition\n:\nspace\n\n    ```\n    a fenced block\n    ```\n\n\n\n\n\nUML Diagrams\n\n\nWhen using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:\n\n\nflowcharts:\n\n\n\n\nraphael.js\n\n\nflowchart.js\n\n\n\n\nsequence diagrams:\n\n\n\n\nraphael.js\n\n\nunderscore.js\n\n\nsequece-diagram.js\n\n\n\n\nAll of these libraries can be included using a CDN (you can use the version of your choice):\n\n\nscript\n \nsrc\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.4/raphael-min.js\n/\nscript\n\n\nscript\n \nsrc\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\n/\nscript\n\n\nscript\n \nsrc\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\n/\nscript\n\n\nscript\n \nsrc\n=\nhttps://cdnjs.cloudflare.com/ajax/libs/flowchart/1.4.2/flowchart.min.js\n/\nscript\n\n\n\n\n\n\nSimply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  Here we are going to show some examples (\numl-converter.js\n, \nflow-loader.js\n, and \nsequence-loader.js\n) that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.\n\n\n/* uml-converter.js */\n\n\n(\nfunction\n \n(\nwin\n,\n \ndoc\n)\n \n{\n\n  \nwin\n.\nconvertUML\n \n=\n \nfunction\n(\nclassName\n,\n \nconverter\n,\n \nsettings\n)\n \n{\n\n    \nvar\n \ncharts\n \n=\n \ndoc\n.\nquerySelectorAll\n(\npre.\n \n+\n \nclassName\n),\n\n        \narr\n \n=\n \n[],\n\n        \ni\n,\n \nj\n,\n \nmaxItem\n,\n \ndiagaram\n,\n \ntext\n,\n \ncurNode\n;\n\n\n    \n// Is there a settings object?\n\n    \nif\n \n(\nsettings\n \n===\n \nvoid\n \n0\n)\n \n{\n\n        \nsettings\n \n=\n \n{};\n\n    \n}\n\n\n    \n// Make sure we are dealing with an array\n\n    \nfor\n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \ncharts\n.\nlength\n;\n \ni\n \n \nmaxItem\n;\n \ni\n++\n)\n \narr\n.\npush\n(\ncharts\n[\ni\n])\n\n\n    \n// Find the UML source element and get the text\n\n    \nfor\n \n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \narr\n.\nlength\n;\n \ni\n \n \nmaxItem\n;\n \ni\n++\n)\n \n{\n\n        \nchildEl\n \n=\n \narr\n[\ni\n].\nfirstChild\n;\n\n        \nparentEl\n \n=\n \nchildEl\n.\nparentNode\n;\n\n        \ntext\n \n=\n \n;\n\n        \nfor\n \n(\nj\n \n=\n \n0\n;\n \nj\n \n \nchildEl\n.\nchildNodes\n.\nlength\n;\n \nj\n++\n)\n \n{\n\n            \ncurNode\n \n=\n \nchildEl\n.\nchildNodes\n[\nj\n];\n\n            \nwhitespace\n \n=\n \n/^\\s*$/\n;\n\n            \nif\n \n(\ncurNode\n.\nnodeName\n \n===\n \n#text\n \n \n!\n(\nwhitespace\n.\ntest\n(\ncurNode\n.\nnodeValue\n)))\n \n{\n\n                \ntext\n \n=\n \ncurNode\n.\nnodeValue\n;\n\n                \nbreak\n;\n\n            \n}\n\n        \n}\n\n\n        \n// Do UML conversion and replace source\n\n        \nel\n \n=\n \ndoc\n.\ncreateElement\n(\ndiv\n);\n\n        \nel\n.\nclassName\n \n=\n \nclassName\n;\n\n        \nparentEl\n.\nparentNode\n.\ninsertBefore\n(\nel\n,\n \nparentEl\n);\n\n        \nparentEl\n.\nparentNode\n.\nremoveChild\n(\nparentEl\n);\n\n        \ndiagram\n \n=\n \nconverter\n.\nparse\n(\ntext\n);\n\n        \ndiagram\n.\ndrawSVG\n(\nel\n,\n \nsettings\n);\n\n    \n}\n\n  \n}\n\n\n})(\nwindow\n,\n \ndocument\n)\n\n\n\n\n\n\n/* flow-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\nDOMContentLoaded\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\nonreadystatechange\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \ninteractive\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\numl-flowchart\n,\n \nflowchart\n);});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\n/* sequence-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\nDOMContentLoaded\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\nonreadystatechange\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \ninteractive\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\numl-sequence-diagram\n,\n \nDiagram\n,\n \n{\ntheme\n:\n \nsimple\n});});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\nUML flowcharts and sequence diagrams will be rendered as HTML \npre\ncode\n tags before the JavaScript libraries are run on them.  They will be assigned CSS classes \numl-flowchart\n and \numl-sequence-diagram\n respectively for flowcharts and sequence diagrams.\n\n\nLimitations\n\n\nThis extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute \nmarkdown='1'\n etc.  But since this is run as a preprocessor, it is not aware of the HTML blocks.  So be aware of this.\n\n\nSuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables since that extension allows for characters to obscure the blocks like blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks needs to be handled as a block parser, but there is much work to be done on Python Markdown\ns internal block handlers before this is possible.\n\n\nSuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.\n\n\nFor the reasons above, the nested fences feature really is just a workaround.  But for a lot of people (including myself), this functionality is more than sufficient.\n\n\nOptions\n\n\nGeneral syntax highlighting settings are configured via CodeHilite which should be installed and configured.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndisable_indented_code_blocks\n\n\nbool\n\n\nFalse\n\n\nDisables Python Markdown\ns indented code block parsing.  This is nice if you only ever use fenced blocks.\n\n\n\n\n\n\nnested\n\n\nbool\n\n\nTrue\n\n\nUse nested fences.\n\n\n\n\n\n\numl_flow\n\n\nbool\n\n\nTrue\n\n\nEnable flowcharts.\n\n\n\n\n\n\numl_sequence\n\n\nbool\n\n\nTrue\n\n\nEnable sequence diagrams.\n\n\n\n\n\n\n\n\nExamples\n\n\nThis highlights the special features of this extension except for \ndisable_indented_code_blocks\n.\n\n\nNested Fences:\n\n\n    ```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n        \n ```\n        \n Blockquotes?\n        \n Not a problem!\n        \n ```\n\n\n\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\n\n\nThis is a list that contains multiple code blocks.\n\n\n\n\n\n\nHere is an indented block\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\n\n\n\n\nHere is a fenced code block:\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\nBlockquotes?\nNot a problem!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUML Flow Charts\n\n\n```flow\nst=\nstart: Start:\nhttp://www.google.com[blank]\ne=\nend:\nhttp://www.google.com\nop1=\noperation: My Operation\nsub1=\nsubroutine: My Subroutine\ncond=\ncondition: Yes\nor No?:\nhttp://www.google.com\nio=\ninputoutput: catch something...\n\nst-\nop1-\ncond\ncond(yes)-\nio-\ne\ncond(no)-\nsub1(right)-\nop1\n```\n\n\n\n\n\nst=\nstart: Start:\nhttp://www.google.com[blank]\ne=\nend:\nhttp://www.google.com\nop1=\noperation: My Operation\nsub1=\nsubroutine: My Subroutine\ncond=\ncondition: Yes\nor No?:\nhttp://www.google.com\nio=\ninputoutput: catch something...\n\nst-\nop1-\ncond\ncond(yes)-\nio-\ne\ncond(no)-\nsub1(right)-\nop1\n\n\n\n\nUML Sequence Diagrams\n\n\n```sequence\nTitle: Here is a title\nA-\nB: Normal line\nB--\nC: Dashed line\nC-\nD: Open arrow\nD--\nA: Dashed open arrow\n```\n\n\n\n\n\nTitle: Here is a title\nA-\nB: Normal line\nB--\nC: Dashed line\nC-\nD: Open arrow\nD--\nA: Dashed open arrow", 
            "title": "SuperFences"
        }, 
        {
            "location": "/extensions/superfences/#overview", 
            "text": "SuperFences provides 4 features:   The ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see  Limitations  for more info).  Special UML flowchart fence via the  flow  language specifier.  Special UML sequence diagram via the  sequence  language specifier.  The ability to disable indented code blocks in favor of only using the fenced variant (off by default).   All features can be turned on or off.  SuperFences relies on the  CodeHilite  extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter could be used.   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/superfences/#nested-fenced-blocks", 
            "text": "Fenced blocks requires all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at least the first line of the fenced block needs to have the appropriate number of   characters signifying the quote depth.   ```\n  a fenced block\n  ```  Keep in mind that too many blank lines will cause a blockquote to terminate, so remember to use   markers accordingly if not marking every line.   ```\n  a fenced block  with blank lines\n  ```  If using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.  - space \n    ```\n    a fenced block\n    ```\n\nDefinition\n: space \n    ```\n    a fenced block\n    ```", 
            "title": "Nested Fenced Blocks"
        }, 
        {
            "location": "/extensions/superfences/#uml-diagrams", 
            "text": "When using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:  flowcharts:   raphael.js  flowchart.js   sequence diagrams:   raphael.js  underscore.js  sequece-diagram.js   All of these libraries can be included using a CDN (you can use the version of your choice):  script   src = https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.4/raphael-min.js / script  script   src = https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js / script  script   src = https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js / script  script   src = https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.4.2/flowchart.min.js / script   Simply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  Here we are going to show some examples ( uml-converter.js ,  flow-loader.js , and  sequence-loader.js ) that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.  /* uml-converter.js */  ( function   ( win ,   doc )   { \n   win . convertUML   =   function ( className ,   converter ,   settings )   { \n     var   charts   =   doc . querySelectorAll ( pre.   +   className ), \n         arr   =   [], \n         i ,   j ,   maxItem ,   diagaram ,   text ,   curNode ; \n\n     // Is there a settings object? \n     if   ( settings   ===   void   0 )   { \n         settings   =   {}; \n     } \n\n     // Make sure we are dealing with an array \n     for ( i   =   0 ,   maxItem   =   charts . length ;   i     maxItem ;   i ++ )   arr . push ( charts [ i ]) \n\n     // Find the UML source element and get the text \n     for   ( i   =   0 ,   maxItem   =   arr . length ;   i     maxItem ;   i ++ )   { \n         childEl   =   arr [ i ]. firstChild ; \n         parentEl   =   childEl . parentNode ; \n         text   =   ; \n         for   ( j   =   0 ;   j     childEl . childNodes . length ;   j ++ )   { \n             curNode   =   childEl . childNodes [ j ]; \n             whitespace   =   /^\\s*$/ ; \n             if   ( curNode . nodeName   ===   #text     ! ( whitespace . test ( curNode . nodeValue )))   { \n                 text   =   curNode . nodeValue ; \n                 break ; \n             } \n         } \n\n         // Do UML conversion and replace source \n         el   =   doc . createElement ( div ); \n         el . className   =   className ; \n         parentEl . parentNode . insertBefore ( el ,   parentEl ); \n         parentEl . parentNode . removeChild ( parentEl ); \n         diagram   =   converter . parse ( text ); \n         diagram . drawSVG ( el ,   settings ); \n     } \n   }  })( window ,   document )   /* flow-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( DOMContentLoaded ,   fn ); \n     }   else   { \n       doc . attachEvent ( onreadystatechange ,   function ()   { \n         if   ( doc . readyState   ===   interactive ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( uml-flowchart ,   flowchart );});  })( document )   /* sequence-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( DOMContentLoaded ,   fn ); \n     }   else   { \n       doc . attachEvent ( onreadystatechange ,   function ()   { \n         if   ( doc . readyState   ===   interactive ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( uml-sequence-diagram ,   Diagram ,   { theme :   simple });});  })( document )   UML flowcharts and sequence diagrams will be rendered as HTML  pre code  tags before the JavaScript libraries are run on them.  They will be assigned CSS classes  uml-flowchart  and  uml-sequence-diagram  respectively for flowcharts and sequence diagrams.", 
            "title": "UML Diagrams"
        }, 
        {
            "location": "/extensions/superfences/#limitations", 
            "text": "This extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute  markdown='1'  etc.  But since this is run as a preprocessor, it is not aware of the HTML blocks.  So be aware of this.  SuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables since that extension allows for characters to obscure the blocks like blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks needs to be handled as a block parser, but there is much work to be done on Python Markdown s internal block handlers before this is possible.  SuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.  For the reasons above, the nested fences feature really is just a workaround.  But for a lot of people (including myself), this functionality is more than sufficient.", 
            "title": "Limitations"
        }, 
        {
            "location": "/extensions/superfences/#options", 
            "text": "General syntax highlighting settings are configured via CodeHilite which should be installed and configured.     Option  Type  Default  Description      disable_indented_code_blocks  bool  False  Disables Python Markdown s indented code block parsing.  This is nice if you only ever use fenced blocks.    nested  bool  True  Use nested fences.    uml_flow  bool  True  Enable flowcharts.    uml_sequence  bool  True  Enable sequence diagrams.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/superfences/#examples", 
            "text": "This highlights the special features of this extension except for  disable_indented_code_blocks .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/superfences/#nested-fences", 
            "text": "```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n          ```\n          Blockquotes?\n          Not a problem!\n          ```  ```\nThis will still be parsed\nas a normal indented code block.\n```  This will still be parsed\nas a fenced code block.    This is a list that contains multiple code blocks.    Here is an indented block  ```\nThis will still be parsed\nas a normal indented code block.\n```    Here is a fenced code block:  This will still be parsed\nas a fenced code block.   Blockquotes?\nNot a problem!", 
            "title": "Nested Fences:"
        }, 
        {
            "location": "/extensions/superfences/#uml-flow-charts", 
            "text": "```flow\nst= start: Start: http://www.google.com[blank]\ne= end: http://www.google.com\nop1= operation: My Operation\nsub1= subroutine: My Subroutine\ncond= condition: Yes\nor No?: http://www.google.com\nio= inputoutput: catch something...\n\nst- op1- cond\ncond(yes)- io- e\ncond(no)- sub1(right)- op1\n```  st= start: Start: http://www.google.com[blank]\ne= end: http://www.google.com\nop1= operation: My Operation\nsub1= subroutine: My Subroutine\ncond= condition: Yes\nor No?: http://www.google.com\nio= inputoutput: catch something...\n\nst- op1- cond\ncond(yes)- io- e\ncond(no)- sub1(right)- op1", 
            "title": "UML Flow Charts"
        }, 
        {
            "location": "/extensions/superfences/#uml-sequence-diagrams", 
            "text": "```sequence\nTitle: Here is a title\nA- B: Normal line\nB-- C: Dashed line\nC- D: Open arrow\nD-- A: Dashed open arrow\n```  Title: Here is a title\nA- B: Normal line\nB-- C: Dashed line\nC- D: Open arrow\nD-- A: Dashed open arrow", 
            "title": "UML Sequence Diagrams"
        }, 
        {
            "location": "/extensions/tasklist/", 
            "text": "Overview\n\n\nThe Tasklist extension adds \nGFM\n style checkbox lists.  They follow the same syntax as \nGFM\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncustom_checkbox\n\n\nbool\n\n\nFalse\n\n\nInserts an empty \nlabel\n tag after the \ninput\n tag to allow styling the checkbox with CSS.\n\n\n\n\n\n\n\n\nExamples\n\n\nTask List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3\n\n\n\n\n\nTask List\n\n\n\n\n item 1\n\n\n item A\n\n\n item B\n\n    more text\n\n\n item a\n\n\n item b\n\n\n item c\n\n\n\n\n\n\n item C\n\n\n\n\n\n\n item 2\n\n\n item 3\n\n\n\n\nCSS\n\n\nThe default HTML structure of tasklists is found below:\n\n\nul\n \nclass\n=\ntask-list\n\n    \nli\n \nclass\n=\ntask-list-item\n\n        \ninput\n \ntype\n=\ncheckbox\n \ndisabled\n=\n \nchecked\n=\n\n        item 1\n    \n/\nli\n\n\n/\nul\n\n\n\n\n\n\nIf \ncustom_checkbox\n is enabled the structure will be as follows:\n\n\nul\n \nclass\n=\ntask-list\n\n    \nli\n \nclass\n=\ntask-list-item\n\n        \nlabel\n \nclass\n=\ntask-list-control\n\n            \ninput\n \ntype\n=\ncheckbox\n \ndisabled\n \nchecked\n=\n\n            \nspan\n \nclass\n=\ntask-list-indicator\n/\nspan\n\n        \n/\nlabel\n\n        item 1\n    \n/\nli\n\n\n/\nul\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask-list\n\n\nAttached to either the \nul\n or \nol\n tag and represents the entire list element.\n\n\n\n\n\n\ntask-list-item\n\n\nThis is attached the \nli\n tag and represents a an item in the list.\n\n\n\n\n\n\ntask-list-control\n\n\nThis is attached to the \nlabel\n tag and represents the control object.\n\n\n\n\n\n\ntask-list-indicator\n\n\nThis is attached to the \nspan\n directly following the input and is used to style the visual indicator.\n\n\n\n\n\n\n\n\nIn order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.\n\n\n.markdown-body\n \n.task-list-item\n \n{\n\n  \nlist-style-type\n:\n \nnone\n \n!important\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-item\n \ninput\n[\ntype\n=\ncheckbox\n]\n \n{\n\n  \nmargin\n:\n \n0\n \n4px\n \n0.25em\n \n-20px\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n\n\n\nIf custom checkbox icons are desired, custom styles can be used to give a unique look to the checkmarks.  Below is a very simple CSS example that creates a light gray square with rounded corners and displays a green Unicode check mark when the control is checked.  This can be adapted to use webfonts, images, etc.\n\n\n.markdown-body\n \n.task-list-item\n \n{\n\n  \nlist-style-type\n:\n \nnone\n \n!important\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-item\n \ninput\n[\ntype\n=\ncheckbox\n]\n \n{\n\n  \nmargin\n:\n \n0\n \n4px\n \n0.25em\n \n-20px\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \n{\n\n  \ndisplay\n:\n \ninline\n;\n \n/* Ensure label is inline incase theme sets it to block.*/\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \n{\n\n  \nposition\n:\n \nrelative\n;\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n  \ncolor\n:\n \n#555\n;\n\n  \ncursor\n:\n \npointer\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \ninput\n[\ntype\n=\ncheckbox\n]\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \nopacity\n:\n \n0\n;\n\n  \nz-index\n:\n \n-1\n;\n \n/* Put the input behind the label so it doesn\nt overlay text */\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-indicator\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntop\n:\n \n-8px\n;\n\n  \nleft\n:\n \n-18px\n;\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nwidth\n:\n  \n14px\n;\n\n  \nheight\n:\n \n14px\n;\n\n  \ncolor\n:\n \n#eee\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder\n-\nradius\n:\n \n.\n25\nrem\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \ninput\n[\ntype\n=\ncheckbox\n]\n:checked\n \n+\n \n.task-list-indicator\n:\n:before\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nmargin-top\n:\n \n-4px\n;\n\n  \nmargin-left\n:\n \n2px\n;\n\n  \nfont-size\n:\n \n16px\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ncontent\n:\n \n\u2714\n;\n\n  \ncolor\n:\n \n#1EBB52\n;\n\n\n}", 
            "title": "Tasklist"
        }, 
        {
            "location": "/extensions/tasklist/#overview", 
            "text": "The Tasklist extension adds  GFM  style checkbox lists.  They follow the same syntax as  GFM .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/tasklist/#options", 
            "text": "Option  Type  Default  Description      custom_checkbox  bool  False  Inserts an empty  label  tag after the  input  tag to allow styling the checkbox with CSS.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/tasklist/#examples", 
            "text": "Task List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3  Task List    item 1   item A   item B \n    more text   item a   item b   item c     item C     item 2   item 3", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/tasklist/#css", 
            "text": "The default HTML structure of tasklists is found below:  ul   class = task-list \n     li   class = task-list-item \n         input   type = checkbox   disabled =   checked = \n        item 1\n     / li  / ul   If  custom_checkbox  is enabled the structure will be as follows:  ul   class = task-list \n     li   class = task-list-item \n         label   class = task-list-control \n             input   type = checkbox   disabled   checked = \n             span   class = task-list-indicator / span \n         / label \n        item 1\n     / li  / ul      Classes  Description      task-list  Attached to either the  ul  or  ol  tag and represents the entire list element.    task-list-item  This is attached the  li  tag and represents a an item in the list.    task-list-control  This is attached to the  label  tag and represents the control object.    task-list-indicator  This is attached to the  span  directly following the input and is used to style the visual indicator.     In order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.  .markdown-body   .task-list-item   { \n   list-style-type :   none   !important ;  }  .markdown-body   .task-list-item   input [ type = checkbox ]   { \n   margin :   0   4px   0.25em   -20px ; \n   vertical-align :   middle ;  }   If custom checkbox icons are desired, custom styles can be used to give a unique look to the checkmarks.  Below is a very simple CSS example that creates a light gray square with rounded corners and displays a green Unicode check mark when the control is checked.  This can be adapted to use webfonts, images, etc.  .markdown-body   .task-list-item   { \n   list-style-type :   none   !important ;  }  .markdown-body   .task-list-item   input [ type = checkbox ]   { \n   margin :   0   4px   0.25em   -20px ; \n   vertical-align :   middle ;  }  .markdown-body   .task-list-control   { \n   display :   inline ;   /* Ensure label is inline incase theme sets it to block.*/  }  .markdown-body   .task-list-control   { \n   position :   relative ; \n   display :   inline - block ; \n   color :   #555 ; \n   cursor :   pointer ;  }  .markdown-body   .task-list-control   input [ type = checkbox ]   { \n   position :   absolute ; \n   opacity :   0 ; \n   z-index :   -1 ;   /* Put the input behind the label so it doesn t overlay text */  }  .markdown-body   .task-list-indicator   { \n   position :   absolute ; \n   top :   -8px ; \n   left :   -18px ; \n   display :   block ; \n   width :    14px ; \n   height :   14px ; \n   color :   #eee ; \n   background-color :   #eee ; \n   border - radius :   . 25 rem ;  }  .markdown-body   .task-list-control   input [ type = checkbox ] :checked   +   .task-list-indicator : :before   { \n   display :   block ; \n   margin-top :   -4px ; \n   margin-left :   2px ; \n   font-size :   16px ; \n   line-height :   1 ; \n   content :   \u2714 ; \n   color :   #1EBB52 ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/tilde/", 
            "text": "Overview\n\n\nTilde optionally adds two different features which are syntactically built around the \n~\n character: \ndelete\n which inserts \ndel\n/\ndel\n tags and \nsubscript\n which inserts \nsub\n/\nsub\n tags.  Syntax behavior for smart and non-smart variants of \ndelete\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_delete\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with delete characters: \n~~delete~~me~~\n \n \ndelete~~me\n.\n\n\n\n\n\n\ndelete\n\n\nbool\n\n\nTrue\n\n\nEnable delete feature.\n\n\n\n\n\n\nsubscript\n\n\nbool\n\n\nTrue\n\n\nEnable subscript feature.\n\n\n\n\n\n\n\n\nExamples\n\n\nThe first feature adds delete emphasis (\ndel\n tags) when inline text is surrounded by double tildes: \n~~delete me~~\n \n \ndelete me\n.  It can optionally be configured to use smart logic: \n~~delete~~me~~\n \n \ndelete~~me\n.\n\n\nThe second feature adds subscripts using single tildes: \nCH~3~CH~2~OH\n \n CH\n3\nCH\n2\nOH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces: \ntext~a\\ subscript~\n \n text\na subscript\n.", 
            "title": "Tilde"
        }, 
        {
            "location": "/extensions/tilde/#overview", 
            "text": "Tilde optionally adds two different features which are syntactically built around the  ~  character:  delete  which inserts  del / del  tags and  subscript  which inserts  sub / sub  tags.  Syntax behavior for smart and non-smart variants of  delete  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/tilde/#options", 
            "text": "Option  Type  Default  Description      smart_delete  bool  True  Use smart logic with delete characters:  ~~delete~~me~~     delete~~me .    delete  bool  True  Enable delete feature.    subscript  bool  True  Enable subscript feature.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/tilde/#examples", 
            "text": "The first feature adds delete emphasis ( del  tags) when inline text is surrounded by double tildes:  ~~delete me~~     delete me .  It can optionally be configured to use smart logic:  ~~delete~~me~~     delete~~me .  The second feature adds subscripts using single tildes:  CH~3~CH~2~OH    CH 3 CH 2 OH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces:  text~a\\ subscript~    text a subscript .", 
            "title": "Examples"
        }, 
        {
            "location": "/contributing/", 
            "text": "Overview\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nVersion being used.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.\n\n\nRunning Validation Tests\n\n\n\n\n\n\nMake sure that \ntox\n is intalled:\n\n\npip install tox\n\n\n\n\n\n\n\n\n\nRun tox:\n\n\ntox\n\n\n\n\n\nTox should install necessary dependencies and run the tests.\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Suppport"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Version being used.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Make sure that  tox  is intalled:  pip install tox    Run tox:  tox  Tox should install necessary dependencies and run the tests.", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/changelog/", 
            "text": "1.3.0\n\n\n\n\nReleased Jan 1, 2017\n\n\n\n\n\n\nNEW\n: New emoji extension that aims to replace githubemoji.  By default it is configured for EmojiOne and Gemoji (Github\ns emoji).\n\n\nNEW\n: Githubemoji is deprecated. Please use the emoji extension instead.\n\n\nNEW\n: Pymdown extension is deprecated.  Pymdown extension was just a wrapper, please configure the desired individual extension(s) instead of relying on pymdown.\n\n\nNEW\n: Github extension now turns off nl2br by default in order properly emulate recent changes in GFM.  \nno_nl2br\n option is deprecated and will be removed in the future as it no longer reflects GFM behavior.\n\n\n\n\n1.2.0\n\n\n\n\nReleased Nov 1, 2016\n\n\n\n\n\n\nNEW\n: Add option to output tasklists in a more customizable way.\n\n\n\n\n1.1.0\n\n\n\n\nReleased Mar 1, 2016\n\n\n\n\n\n\nNEW\n: Add pypi 3.5 info in setup\n\n\nNEW\n: Add option to magiclink extension to allow the stripping of link protocols (\nhttp://\n etc.).\n\n\nNEW\n: Add option to github extension to disable the use of nl2br to reflect recent changes to Github Flavored Markdown.  Currently the default is the legacy (uses nl2br), but a warning will be displayed.  In the future, the option will be defaulted to not use nl2br.\n\n\n\n\n1.0.1\n\n\n\n\nReleased Dec 10, 2015\n\n\n\n\n\n\nFIX\n: Ordinal number 11\nth\n, 12\nth\n, and 13\nth\n\n\n\n\n1.0.0\n\n\n\n\nReleased Dec 8, 2015\n\n\n\n\n\n\nNEW\n: Initial release.", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#130", 
            "text": "Released Jan 1, 2017    NEW : New emoji extension that aims to replace githubemoji.  By default it is configured for EmojiOne and Gemoji (Github s emoji).  NEW : Githubemoji is deprecated. Please use the emoji extension instead.  NEW : Pymdown extension is deprecated.  Pymdown extension was just a wrapper, please configure the desired individual extension(s) instead of relying on pymdown.  NEW : Github extension now turns off nl2br by default in order properly emulate recent changes in GFM.   no_nl2br  option is deprecated and will be removed in the future as it no longer reflects GFM behavior.", 
            "title": "1.3.0"
        }, 
        {
            "location": "/changelog/#120", 
            "text": "Released Nov 1, 2016    NEW : Add option to output tasklists in a more customizable way.", 
            "title": "1.2.0"
        }, 
        {
            "location": "/changelog/#110", 
            "text": "Released Mar 1, 2016    NEW : Add pypi 3.5 info in setup  NEW : Add option to magiclink extension to allow the stripping of link protocols ( http://  etc.).  NEW : Add option to github extension to disable the use of nl2br to reflect recent changes to Github Flavored Markdown.  Currently the default is the legacy (uses nl2br), but a warning will be displayed.  In the future, the option will be defaulted to not use nl2br.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/changelog/#101", 
            "text": "Released Dec 10, 2015    FIX : Ordinal number 11 th , 12 th , and 13 th", 
            "title": "1.0.1"
        }, 
        {
            "location": "/changelog/#100", 
            "text": "Released Dec 8, 2015    NEW : Initial release.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/license/", 
            "text": "The MIT License (MIT) (Except where stated below)\n\n\nCopyright \n 2014 - 2017 Isaac Muse\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n\nof this software and associated documentation files (the \nSoftware\n), to deal\n\nin the Software without restriction, including without limitation the rights\n\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the Software is\n\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\nSOFTWARE.\n\n\n\n\nsuperfences.py is derived from Python Markdown\ns fenced_code extension.\n\n\nFenced Code Extension for Python Markdown\n\n =========================================\n\nThis extension adds Fenced Code Blocks to Python-Markdown.\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/fenced_code_blocks.html\n\nfor documentation.\n\nOriginal code Copyright 2007-2008 \nWaylan Limberg\n.\n\nAll changes Copyright 2008-2014 The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\ninlinehilite.py is derived from Python Markdown\ns codehilite extension.\n\n\nCodeHilite Extension for Python-Markdown\n\n ========================================\n\nAdds code/syntax highlighting to standard Python-Markdown code blocks.\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/code_hilite.html\n\nfor documentation.\n\nOriginal code Copyright 2006-2008 \nWaylan Limberg\n.\n\nAll changes Copyright 2008-2014 The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\nextrarawhtml.py is a literal copy and paste from Python Markdown\ns extra extension.\n\nIt basically splits out the raw html markdown parsing into a seprate extension that can\n\nbe used even if it is not desired to use all of \nextra\n.\n\n\nPython-Markdown Extra Extension\n\n ===============================\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/extra.html\n\nfor documentation.\n\nCopyright The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\ngemoji_db.py is generated from Gemoji\ns source code: \nhttps://github.com/github/gemoji\n.\n\n\nCopyright \n 2013 GitHub, Inc.\n\n\nPermission is hereby granted, free of charge, to any person\n\nobtaining a copy of this software and associated documentation\n\nfiles (the \nSoftware\n), to deal in the Software without\n\nrestriction, including without limitation the rights to use,\n\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the\n\nSoftware is furnished to do so, subject to the following\n\nconditions:\n\n\nThe above copyright notice and this permission notice shall be\n\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND,\n\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nemoji1_db.py is generated from EmojiOne\ns source code: \nhttps://github.com/Ranks/emojione\n\n\nEmojiOne Non-Artwork\n\n\nApplies to the Javascript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above.\n\nLicense: MIT\n\nComplete Legal Terms: \nhttp://opensource.org/licenses/MIT", 
            "title": "License"
        }
    ]
}