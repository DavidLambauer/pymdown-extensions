{
    "docs": [
        {
            "location": "/",
            "text": "Available Extensions\n\ue157\n\n\nPyMdown Extensions provides a handful of extensions for use with Python Markdown.  Keep in mind, the PyMdown extensions were designed to work with the default extensions, so your mileage may vary in regards to compatibility when paired with other 3\nrd\n party extensions.\n\n\nCheck out the individual extension document pages for more info on the available extensions.\n\n\n\n\nReminder\n\n\nPlease read the \nUsage Notes\n for information on extension compatibility and general notes to be aware of when using these extensions.\n\n\n\n\n\n\n\n\n\n\nExtension\n\n\nName\n\n\n\n\n\n\n\n\n\n\narithmatex\n\n\npymdownx.arithmatex\n\n\n\n\n\n\nb64\n\n\npymdownx.b64\n\n\n\n\n\n\nbetterem\n\n\npymdownx.betterem\n\n\n\n\n\n\ncaret\n\n\npymdownx.caret\n\n\n\n\n\n\ncritic\n\n\npymdownx.critic\n\n\n\n\n\n\nemoji\n\n\npymdownx.emoji\n\n\n\n\n\n\nescapeall\n\n\npymdownx.escapeall\n\n\n\n\n\n\nextra\n\n\npymdownx.extra\n\n\n\n\n\n\nextrarawhtml\n\n\npymdownx.extrarawhtml\n\n\n\n\n\n\ngithub\n\n\npymdownx.github\n\n\n\n\n\n\ngithubemoji (\ndeprecated\n)\n\n\npymdownx.githubemoji\n\n\n\n\n\n\nheaderanchor (\ndeprecated\n)\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nmagiclink\n\n\npymdownx.magiclink\n\n\n\n\n\n\nmark\n\n\npymdownx.mark\n\n\n\n\n\n\nprogressbar\n\n\npymdownx.progressbar\n\n\n\n\n\n\nsnippets\n\n\npymdownx.snippets\n\n\n\n\n\n\nsmartsymbols\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\nsuperfences\n\n\npymdownx.superfences\n\n\n\n\n\n\ntasklist\n\n\npymdownx.tasklist\n\n\n\n\n\n\ntilde\n\n\npymdownx.tilde\n\n\n\n\n\n\ninlinehilite\n\n\npymdownx.inlinehilite\n\n\n\n\n\n\npathconverter\n\n\npymdownx.pathconverter\n\n\n\n\n\n\nplainhtml\n\n\npymdownx.plainhtml\n\n\n\n\n\n\npymdown (\ndeprecated\n)\n\n\npymdownx.pymdown",
            "title": "PyMdown Extensions"
        },
        {
            "location": "/#available-extensions",
            "text": "PyMdown Extensions provides a handful of extensions for use with Python Markdown.  Keep in mind, the PyMdown extensions were designed to work with the default extensions, so your mileage may vary in regards to compatibility when paired with other 3 rd  party extensions.  Check out the individual extension document pages for more info on the available extensions.   Reminder  Please read the  Usage Notes  for information on extension compatibility and general notes to be aware of when using these extensions.      Extension  Name      arithmatex  pymdownx.arithmatex    b64  pymdownx.b64    betterem  pymdownx.betterem    caret  pymdownx.caret    critic  pymdownx.critic    emoji  pymdownx.emoji    escapeall  pymdownx.escapeall    extra  pymdownx.extra    extrarawhtml  pymdownx.extrarawhtml    github  pymdownx.github    githubemoji ( deprecated )  pymdownx.githubemoji    headeranchor ( deprecated )  pymdownx.headeranchor    magiclink  pymdownx.magiclink    mark  pymdownx.mark    progressbar  pymdownx.progressbar    snippets  pymdownx.snippets    smartsymbols  pymdownx.smartsymbols    superfences  pymdownx.superfences    tasklist  pymdownx.tasklist    tilde  pymdownx.tilde    inlinehilite  pymdownx.inlinehilite    pathconverter  pymdownx.pathconverter    plainhtml  pymdownx.plainhtml    pymdown ( deprecated )  pymdownx.pymdown",
            "title": "Available Extensions"
        },
        {
            "location": "/installation/",
            "text": "Overview\n\ue157\n\n\nPymdown Extensions is built on top of a few requirements.  If installing, the requirements will be installed automatically unless the requirement is optional.\n\n\nRequirements\n\ue157\n\n\nIn order for PyMdown Extensions to work, there are a couple of prerequisites.\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nPython Markdown 2.6.0+\n\n\nYes\n\n\nPython Markdown must be installed as it is the Markdown parser that is being used.\n\n\n\n\n\n\nPygments 2.0.1+ (optional)\n\n\nNo\n\n\nIf Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.\n\n\n\n\n\n\n\n\nInstallation\n\ue157\n\n\nInstallation is easy with pip:\n\n\npip install pymdown-extensions\n\n\n\n\n\nIf you want to manually install it, run \npython setup.py build\n and \npython setup.py install\n.  You should be able to access the extensions in Python Markdown under the namespace \npymdownx.<extension>\n.\n\n\nIf you would like to modify the code, you can install it via: \npip install --editable .\n.  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.",
            "title": "Installation"
        },
        {
            "location": "/installation/#overview",
            "text": "Pymdown Extensions is built on top of a few requirements.  If installing, the requirements will be installed automatically unless the requirement is optional.",
            "title": "Overview"
        },
        {
            "location": "/installation/#requirements",
            "text": "In order for PyMdown Extensions to work, there are a couple of prerequisites.     Name  Required  Details      Python Markdown 2.6.0+  Yes  Python Markdown must be installed as it is the Markdown parser that is being used.    Pygments 2.0.1+ (optional)  No  If Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.",
            "title": "Requirements"
        },
        {
            "location": "/installation/#installation",
            "text": "Installation is easy with pip:  pip install pymdown-extensions  If you want to manually install it, run  python setup.py build  and  python setup.py install .  You should be able to access the extensions in Python Markdown under the namespace  pymdownx.<extension> .  If you would like to modify the code, you can install it via:  pip install --editable . .  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.",
            "title": "Installation"
        },
        {
            "location": "/usage_notes/",
            "text": "Incompatible Extensions\n\ue157\n\n\nPyMdown Extensions includes three extensions that are meant to \nreplace\n their counterpart in the default Python Markdown extensions.  You need to either use the PyMdown Extensions version or use the Python Markdown version; \nthey cannot be loaded at the same time\n.\n\n\n\n\npymdownx.superfences\n replaces \nmarkdown.extensions.fenced_code\n.\n\n\npymdownx.betterem\n replaces \nmarkdown.extensions.smartstrong\n.\n\n\npymdownx.extra\n replaces \nmarkdown.extensions.extra\n.\n\n\n\n\nA few convenience extensions that include multiple extensions in one shot are also provided and should not be mixed.  And none of them should be mixed with \nmarkdown.extensions.extra\n or \npymdownx.extra\n. This is to prevent multiples of an extension from getting included.\n\n\n\n\npymdownx.github\n\n\npymdownx.pymdown\n\n\n\n\nInclude Extensions Only Once\n\ue157\n\n\nIn general, you shouldn't include an extension more than once. If you try to include more than one of the aforementioned convenience extensions at the same time, you will include certain extensions multiple times possibly leading to unexpected results.  Also, be aware of what extensions these convenience extensions include and do not accidentally re-include them individually.",
            "title": "Usage Notes"
        },
        {
            "location": "/usage_notes/#incompatible-extensions",
            "text": "PyMdown Extensions includes three extensions that are meant to  replace  their counterpart in the default Python Markdown extensions.  You need to either use the PyMdown Extensions version or use the Python Markdown version;  they cannot be loaded at the same time .   pymdownx.superfences  replaces  markdown.extensions.fenced_code .  pymdownx.betterem  replaces  markdown.extensions.smartstrong .  pymdownx.extra  replaces  markdown.extensions.extra .   A few convenience extensions that include multiple extensions in one shot are also provided and should not be mixed.  And none of them should be mixed with  markdown.extensions.extra  or  pymdownx.extra . This is to prevent multiples of an extension from getting included.   pymdownx.github  pymdownx.pymdown",
            "title": "Incompatible Extensions"
        },
        {
            "location": "/usage_notes/#include-extensions-only-once",
            "text": "In general, you shouldn't include an extension more than once. If you try to include more than one of the aforementioned convenience extensions at the same time, you will include certain extensions multiple times possibly leading to unexpected results.  Also, be aware of what extensions these convenience extensions include and do not accidentally re-include them individually.",
            "title": "Include Extensions Only Once"
        },
        {
            "location": "/extensions/arithmatex/",
            "text": "Overview\n\ue157\n\n\nThe Arithmatex extension searches for \n$\n...\n$\n or \n$$\n...\n$$\n and preserves and formats them so that \nMathJax\n can detect them in the HTML output.\n\n\n$\n...\n$\n is the inline form and requires the opening token (\n$\n) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement requires no escaping of the \n$\n character.  But when needed, the \n$\n character can be escaped using \n\\$\n.\n\n\n$$\n...\n$$\n is the \nblock\n form.  When using \n$$\n, the block must start with \n$$\n and end with \n$$\n; a block contains no empty lines.\n\n\nThe Arithmatex extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows: \n$\n...\n$\n \u2192 \n\\(\n...\n\\)\n and \n$$\n...\n$$\n \u2192 \n\\[\n...\n\\]\n.  Keep this in mind when configuring MathJax for your document.  If a different conversion is desired, see \nOptions\n below to learn how to configure it.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntex_inline_wrap\n\n\n(string)\n\n\n[\n'\n\\\\\n('\n,\n \n'\n\\\\\n)'\n]\n\n\nAn array containing the opening and closing portion of the wrap.\n\n\n\n\n\n\ntex_block_wrap\n\n\n[string]\n\n\n[\n'\n\\\\\n('\n,\n \n'\n\\\\\n)'\n]\n\n\nAn array containing the opening and closing portion of the wrap.\n\n\n\n\n\n\n\n\n\n\nWrapping Format\n\n\nThe wrapping options are \nnot\n run through an HTML escaper, so make sure you escape whatever requires escaping.  The reason we don't escape the wrap strings is so you can inject an HTML tag wrapper if desired.  Most people don't need to insert HTML, but as an example, when these docs are run through CI and spell checked, math is wrapped with \n<nospell></nospell>\n tags which are filtered out to avoid spell checking the content. So there are practical applications.\n\n\n\n\nLoading MathJax\n\ue157\n\n\nArithmatex requires you to provide the MathJax library and provide and configure it to your liking.  The recommended way of including MathJax is to use the CDN.  Below in this example, we are selecting the default \nTeX-MML-AM_CHTML\n configuration. This is what \nthis\n documentation site is currently using.\n\n\n<\nscript\n \nsrc\n=\n\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\"\n></\nscript\n>\n\n\n\n\n\n\nIf you need to configure or tweak the settings further, make sure to load your configuration tweaks \nbefore\n you load the \nMathJax.js\n file. Below is an example of the configuration that we use to tweak the MathJax in this page.  We include this snippet \nbefore\n we include \nMathJax.js\n.\n\n\nwindow\n.\nMathJax\n \n=\n \n{\n\n  \njax\n:\n \n[\n\"input/TeX\"\n],\n\n  \ntex2jax\n:\n \n{\n\n    \ninlineMath\n:\n \n[\n \n[\n\"\\\\(\"\n,\n\"\\\\)\"\n]\n \n],\n\n    \ndisplayMath\n:\n \n[\n \n[\n\"\\\\[\"\n,\n\"\\\\]\"\n]\n \n]\n\n  \n},\n\n  \nTeX\n:\n \n{\n\n    \nTagSide\n:\n \n\"right\"\n,\n\n    \nTagIndent\n:\n \n\".8em\"\n,\n\n    \nMultLineWidth\n:\n \n\"85%\"\n,\n\n    \nequationNumbers\n:\n \n{\n\n      \nautoNumber\n:\n \n\"AMS\"\n,\n\n    \n},\n\n    \nunicode\n:\n \n{\n\n      \nfonts\n:\n \n\"STIXGeneral,'Arial Unicode MS'\"\n\n    \n}\n\n  \n},\n\n  \ndisplayAlign\n:\n \n'left'\n,\n\n  \nshowProcessingMessages\n:\n \nfalse\n,\n\n  \nmessageStyle\n:\n \n'none'\n\n\n};\n\n\n\n\n\n\nPlease see the \nMathJax\n site for more info on using MathJax.\n\n\nExamples\n\ue157\n\n\nSome Equations:\n\n\n$$\n\n\nE\n(\n\\mathbf\n{v}, \n\\mathbf\n{h}\n)\n \n=\n \n-\n\\sum\n_{i,j}w_{ij}v_i h_j \n-\n \n\\sum\n_i b_i v_i \n-\n \n\\sum\n_j c_j h_j\n\n\n$$\n\n\n- Here are some more equations:\n\n    \n$$\n\n\n        \n\\begin\n{align}\n\n\n            p\n(\nv_i\n=\n1\n|\n\\mathbf\n{h}\n)\n & \n=\n \n\\sigma\\left\n(\n\\sum\n_j w_{ij}h_j \n+\n b_i\n\\right\n)\n \n\\\\\n\n\n            p\n(\nh_j\n=\n1\n|\n\\mathbf\n{v}\n)\n & \n=\n \n\\sigma\\left\n(\n\\sum\n_i w_{ij}v_i \n+\n c_j\n\\right\n)\n\n\n        \n\\end\n{align}\n\n\n    \n$$\n\n\n- Inline equations: \n$\np\n(\nx|y\n)\n \n=\n \n\\frac\n{p\n(\ny|x\n)\np\n(\nx\n)\n}{p\n(\ny\n)\n}\n$\n.\n\n\n\n\n\nSome Equations:\n\n\n\\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]\n\n\n\n\n\n\nHere are some more equations:\n\n\n\\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]\n\n\n\n\n\n\nInline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).\n\n\n\n\n\n\n\nMathJax.Hub.Config({\n    tex2jax: {\n        inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n        displayMath: [ [\"\\\\[\",\"\\\\]\"] ]\n    },\n    TeX: {\n        TagSide: \"right\",\n        TagIndent: \".8em\",\n        MultLineWidth: \"85%\",\n        equationNumbers: {\n            autoNumber: \"AMS\",\n        },\n        unicode: {\n            fonts: \"STIXGeneral,'Arial Unicode MS'\"\n        }\n    },\n    displayAlign: 'left',\n    showProcessingMessages: false,\n    messageStyle: 'none'\n});",
            "title": "Arithmatex"
        },
        {
            "location": "/extensions/arithmatex/#overview",
            "text": "The Arithmatex extension searches for  $ ... $  or  $$ ... $$  and preserves and formats them so that  MathJax  can detect them in the HTML output.  $ ... $  is the inline form and requires the opening token ( $ ) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement requires no escaping of the  $  character.  But when needed, the  $  character can be escaped using  \\$ .  $$ ... $$  is the  block  form.  When using  $$ , the block must start with  $$  and end with  $$ ; a block contains no empty lines.  The Arithmatex extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows:  $ ... $  \u2192  \\( ... \\)  and  $$ ... $$  \u2192  \\[ ... \\] .  Keep this in mind when configuring MathJax for your document.  If a different conversion is desired, see  Options  below to learn how to configure it.",
            "title": "Overview"
        },
        {
            "location": "/extensions/arithmatex/#options",
            "text": "Option  Type  Default  Description      tex_inline_wrap  (string)  [ ' \\\\ (' ,   ' \\\\ )' ]  An array containing the opening and closing portion of the wrap.    tex_block_wrap  [string]  [ ' \\\\ (' ,   ' \\\\ )' ]  An array containing the opening and closing portion of the wrap.      Wrapping Format  The wrapping options are  not  run through an HTML escaper, so make sure you escape whatever requires escaping.  The reason we don't escape the wrap strings is so you can inject an HTML tag wrapper if desired.  Most people don't need to insert HTML, but as an example, when these docs are run through CI and spell checked, math is wrapped with  <nospell></nospell>  tags which are filtered out to avoid spell checking the content. So there are practical applications.",
            "title": "Options"
        },
        {
            "location": "/extensions/arithmatex/#loading-mathjax",
            "text": "Arithmatex requires you to provide the MathJax library and provide and configure it to your liking.  The recommended way of including MathJax is to use the CDN.  Below in this example, we are selecting the default  TeX-MML-AM_CHTML  configuration. This is what  this  documentation site is currently using.  < script   src = \"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\" ></ script >   If you need to configure or tweak the settings further, make sure to load your configuration tweaks  before  you load the  MathJax.js  file. Below is an example of the configuration that we use to tweak the MathJax in this page.  We include this snippet  before  we include  MathJax.js .  window . MathJax   =   { \n   jax :   [ \"input/TeX\" ], \n   tex2jax :   { \n     inlineMath :   [   [ \"\\\\(\" , \"\\\\)\" ]   ], \n     displayMath :   [   [ \"\\\\[\" , \"\\\\]\" ]   ] \n   }, \n   TeX :   { \n     TagSide :   \"right\" , \n     TagIndent :   \".8em\" , \n     MultLineWidth :   \"85%\" , \n     equationNumbers :   { \n       autoNumber :   \"AMS\" , \n     }, \n     unicode :   { \n       fonts :   \"STIXGeneral,'Arial Unicode MS'\" \n     } \n   }, \n   displayAlign :   'left' , \n   showProcessingMessages :   false , \n   messageStyle :   'none'  };   Please see the  MathJax  site for more info on using MathJax.",
            "title": "Loading MathJax"
        },
        {
            "location": "/extensions/arithmatex/#examples",
            "text": "Some Equations: $$  E ( \\mathbf {v},  \\mathbf {h} )   =   - \\sum _{i,j}w_{ij}v_i h_j  -   \\sum _i b_i v_i  -   \\sum _j c_j h_j  $$ \n\n- Here are some more equations:\n\n     $$           \\begin {align}              p ( v_i = 1 | \\mathbf {h} )  &  =   \\sigma\\left ( \\sum _j w_{ij}h_j  +  b_i \\right )   \\\\              p ( h_j = 1 | \\mathbf {v} )  &  =   \\sigma\\left ( \\sum _i w_{ij}v_i  +  c_j \\right )           \\end {align}       $$ \n\n- Inline equations:  $ p ( x|y )   =   \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ .  Some Equations:  \\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]    Here are some more equations:  \\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]    Inline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).    \nMathJax.Hub.Config({\n    tex2jax: {\n        inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n        displayMath: [ [\"\\\\[\",\"\\\\]\"] ]\n    },\n    TeX: {\n        TagSide: \"right\",\n        TagIndent: \".8em\",\n        MultLineWidth: \"85%\",\n        equationNumbers: {\n            autoNumber: \"AMS\",\n        },\n        unicode: {\n            fonts: \"STIXGeneral,'Arial Unicode MS'\"\n        }\n    },\n    displayAlign: 'left',\n    showProcessingMessages: false,\n    messageStyle: 'none'\n});",
            "title": "Examples"
        },
        {
            "location": "/extensions/b64/",
            "text": "Overview\n\ue157\n\n\nB64 allows for the embedding of local PNG, JPEG, and GIF image references with base64 encoding.  It simply needs a base path to resolve relative links in the Markdown source. The base path is the assumed location of the Markdown source at time of conversion. Using the base path, B64 will search and find the actual \nimg\n tag references (both absolute and relative) and base64 encode and embed them in the HTML output.\n\n\nIf you would like to distribute a Markdown output without having to also distribute the images separately, B64 can help.  In a normal website, this would probably not be desired.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n'.'\n\n\nA string indicating a base path to be used to resolve relative links.",
            "title": "B64"
        },
        {
            "location": "/extensions/b64/#overview",
            "text": "B64 allows for the embedding of local PNG, JPEG, and GIF image references with base64 encoding.  It simply needs a base path to resolve relative links in the Markdown source. The base path is the assumed location of the Markdown source at time of conversion. Using the base path, B64 will search and find the actual  img  tag references (both absolute and relative) and base64 encode and embed them in the HTML output.  If you would like to distribute a Markdown output without having to also distribute the images separately, B64 can help.  In a normal website, this would probably not be desired.",
            "title": "Overview"
        },
        {
            "location": "/extensions/b64/#options",
            "text": "Option  Type  Default  Description      base_path  string  '.'  A string indicating a base path to be used to resolve relative links.",
            "title": "Options"
        },
        {
            "location": "/extensions/betterem/",
            "text": "Overview\n\ue157\n\n\nBetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes that control both asterisk's and underscore's bold and italic syntax: \nsmart\n when \nsmart_enable\n is turned on and normal if \nsmart_enable\n is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When \nsmart\n is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When \nsmart\n is enabled, the behavior will be very similar in feel to \nGFM\n bold and italic (but not necessarily exact).\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nDifferences\n\ue157\n\n\n\n\nNote\n\n\nFor all examples on this page, underscores are \nsmart\n and asterisks are not.\n\n\n\n\nBetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n* Won't highlight *\n\n\n* Won't be italic *\n\n\n\n\n\n\n*Will highlight*\n\n\nWill be italic\n\n\n\n\n\n\n\n\nBetterEm allows for a more natural nested token feel.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n***I'm italic and bold* I am just bold.**\n\n\nI'm italic and bold\n I am just bold.\n\n\n\n\n\n\n***I'm bold and italic!** I am just italic.*\n\n\nI'm bold and italic!\n I am just italic.\n\n\n\n\n\n\n\n\nBetterEm will ensure smart mode doesn't terminate in scenarios where there are a large amount of consecutive tokens inside.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n___A lot of underscores____________is okay___\n\n\nA lot of underscores____________is okay\n\n\n\n\n\n\n\n\nBetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n__This will all be bold __because of the placement of the center underscores.__\n\n\nThis will all be bold __because of the placement of the center underscores.\n\n\n\n\n\n\n__This will all be bold __ because of the placement of the center underscores.__\n\n\nThis will all be bold __ because of the placement of the center asterisks.\n\n\n\n\n\n\n__This will NOT all be bold__ because of the placement of the center underscores.__\n\n\nThis will NOT all be bold\n because of the placement of the center underscores.__\n\n\n\n\n\n\n__This will all be bold_ because of the token is less than that of the surrounding.__\n\n\nThis will all be bold_ because the token count is less than that of the surrounding.\n\n\n\n\n\n\n\n\nBetterEm will allow non-smart emphasis to contain \"floating\" like tokens.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n*All will * be italic*\n\n\nAll will * be italic\n\n\n\n\n\n\n*All will *be italic*\n\n\nAll will *be italic\n\n\n\n\n\n\n*All will not* be italic*\n\n\nAll will not\n be italic*\n\n\n\n\n\n\n*All will not ** be italic*\n\n\nAll will not *\n be italic*\n\n\n\n\n\n\n**All will * be bold**\n\n\nAll will * be bold\n\n\n\n\n\n\n*All will *be bold**\n\n\nAll will *be bold\n\n\n\n\n\n\n**All will not*** be bold**\n\n\nAll will not\n* be bold**\n\n\n\n\n\n\n**All will not *** be bold**\n\n\nAll will not *\nbe bold**\n\n\n\n\n\n\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_enable\n\n\nstring\n\n\n'underscore'\n\n\nA string that specifies whether smart should be enabled for \nall\n, \nasterisk\n, \nunderscore\n, or \nnone\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nUsage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.\n\n\n\n\n\nUsage is the \nsame\n as usual.  Just keep in mind the \ndifferences\n.  Markdown is un\nfreaking\nbelievable \n.",
            "title": "BetterEm"
        },
        {
            "location": "/extensions/betterem/#overview",
            "text": "BetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes that control both asterisk's and underscore's bold and italic syntax:  smart  when  smart_enable  is turned on and normal if  smart_enable  is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When  smart  is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When  smart  is enabled, the behavior will be very similar in feel to  GFM  bold and italic (but not necessarily exact).   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!",
            "title": "Overview"
        },
        {
            "location": "/extensions/betterem/#differences",
            "text": "Note  For all examples on this page, underscores are  smart  and asterisks are not.   BetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).     Test  Result      * Won't highlight *  * Won't be italic *    *Will highlight*  Will be italic     BetterEm allows for a more natural nested token feel.     Test  Result      ***I'm italic and bold* I am just bold.**  I'm italic and bold  I am just bold.    ***I'm bold and italic!** I am just italic.*  I'm bold and italic!  I am just italic.     BetterEm will ensure smart mode doesn't terminate in scenarios where there are a large amount of consecutive tokens inside.     Test  Result      ___A lot of underscores____________is okay___  A lot of underscores____________is okay     BetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.     Test  Result      __This will all be bold __because of the placement of the center underscores.__  This will all be bold __because of the placement of the center underscores.    __This will all be bold __ because of the placement of the center underscores.__  This will all be bold __ because of the placement of the center asterisks.    __This will NOT all be bold__ because of the placement of the center underscores.__  This will NOT all be bold  because of the placement of the center underscores.__    __This will all be bold_ because of the token is less than that of the surrounding.__  This will all be bold_ because the token count is less than that of the surrounding.     BetterEm will allow non-smart emphasis to contain \"floating\" like tokens.     Test  Result      *All will * be italic*  All will * be italic    *All will *be italic*  All will *be italic    *All will not* be italic*  All will not  be italic*    *All will not ** be italic*  All will not *  be italic*    **All will * be bold**  All will * be bold    *All will *be bold**  All will *be bold    **All will not*** be bold**  All will not * be bold**    **All will not *** be bold**  All will not * be bold**",
            "title": "Differences"
        },
        {
            "location": "/extensions/betterem/#options",
            "text": "Option  Type  Default  Description      smart_enable  string  'underscore'  A string that specifies whether smart should be enabled for  all ,  asterisk ,  underscore , or  none .     Examples  Usage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.  Usage is the  same  as usual.  Just keep in mind the  differences .  Markdown is un freaking believable  .",
            "title": "Options"
        },
        {
            "location": "/extensions/caret/",
            "text": "Overview\n\ue157\n\n\nCaret optionally adds two different features which are syntactically built around the \n^\n character: \ninsert\n which inserts \n<\nins\n></\nins\n>\n tags and \nsuperscript\n which inserts \n<\nsup\n></\nsup\n>\n tags.  Syntax behavior for smart and non-smart variants of \ninsert\n models that of \nbetterem\n.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_insert\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with insert characters: \n^^underline^^me^^\n \u2192 \nunderline^^me\n.\n\n\n\n\n\n\ninsert\n\n\nbool\n\n\nTrue\n\n\nEnable insert feature.\n\n\n\n\n\n\nsuperscript\n\n\nbool\n\n\nTrue\n\n\nEnable superscript feature.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nThe first feature adds underline emphasis (\nins\n tags) when inline text is surrounded by double carets: \n^^underline me^^\n \u2192 \nunderline me\n.  It can optionally be configured to use smart logic: \n^^underline^^me^^\n \u2192 \nunderline^^me\n.\n\n\nThe second feature adds superscript using single carets: \nH^2^0\n \u2192 H\n2\n0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces: \ntext^a\\ superscript^\n \u2192 text\na superscript\n.",
            "title": "Caret"
        },
        {
            "location": "/extensions/caret/#overview",
            "text": "Caret optionally adds two different features which are syntactically built around the  ^  character:  insert  which inserts  < ins ></ ins >  tags and  superscript  which inserts  < sup ></ sup >  tags.  Syntax behavior for smart and non-smart variants of  insert  models that of  betterem .",
            "title": "Overview"
        },
        {
            "location": "/extensions/caret/#options",
            "text": "Option  Type  Default  Description      smart_insert  bool  True  Use smart logic with insert characters:  ^^underline^^me^^  \u2192  underline^^me .    insert  bool  True  Enable insert feature.    superscript  bool  True  Enable superscript feature.",
            "title": "Options"
        },
        {
            "location": "/extensions/caret/#examples",
            "text": "The first feature adds underline emphasis ( ins  tags) when inline text is surrounded by double carets:  ^^underline me^^  \u2192  underline me .  It can optionally be configured to use smart logic:  ^^underline^^me^^  \u2192  underline^^me .  The second feature adds superscript using single carets:  H^2^0  \u2192 H 2 0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces:  text^a\\ superscript^  \u2192 text a superscript .",
            "title": "Examples"
        },
        {
            "location": "/extensions/critic/",
            "text": "Overview\n\ue157\n\n\nCritic is an extension that adds handling and support of \nCritic Markup\n.  This extension runs before all other extensions to parse the critic edits.  It allows for the removal or acceptance of the critic modifications and modifies the source to reflect the rejection or approval (highlights and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output (\nmileage may vary\n).\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nstring\n\n\nview\n\n\nview\n just parses the markup and displays it in its HTML equivalent rendering.  \naccept\n strips out the critic markup and replaces them with the suggested changes.  \nreject\n rejects all the suggestions and strips the critic markup out replacing it with the original.\n\n\n\n\n\n\n\n\nLimitations with Previewing Critic Markup\n\ue157\n\n\nParsing CriticMarkup is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually \nand\n trying to convert the document to HTML, things can get ugly.  I think this is the one unfortunate problem with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created for the preview (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here: \nhttp://fletcher.github.io/MultiMarkdown-4/criticmarkup\n.\n\n\nThe critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some of the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region's HTML output which allows for CSS styling.  There is probably a lot more post-processing that could be done to fix more issues, but whether this extension will be going further down that road has not yet been decided.\n\n\nExamples\n\ue157\n\n\nMarkup\nExample\ndelete\ndelete\ninsert\ninsert\ndelete and replace with substitutions\ndelete and replace\nsubstitutions\nhighlight\nhighlight\ncomment\ntext\ncomment\n\n\n\nHere they are in action:\n\n\nHere\n \nis\n \nsome\n \n{--*incorrect*--}\n \nMarkdown.\n  \nI\n \nam\n \nadding\n \nthis\n{++ here.++}\n.\n  \nHere\n \nis\n \nsome\n \nmore\n \n{--text\n\n\n that I am removing--}\ntext.\n  \nAnd\n \nhere\n \nis\n \neven\n \nmore\n \n{++text that I \n\n\n am ++}\nadding.\n{~~\n\n\n\n~>  ~~}\nParagraph\n \nwas\n \ndeleted\n \nand\n \nreplaced\n \nwith\n \nsome\n \nspaces.\n{~~  ~>\n\n\n\n~~}\nSpaces\n \nwere\n \nremoved\n \nand\n \na\n \nparagraph\n \nwas\n \nadded.\n\nAnd\n \nhere\n \nis\n \na\n \ncomment\n \non\n \n{==some\n\n\n ==text== ==}{>>This works quite well. I just wanted to comment on it.<<}\n.\n \nSubstitutions\n \n{~~is~>are~~}\n \ngreat!\n\nGeneral\n \nblock\n \nhandling.\n\n\n{--\n\n\n\n* test\n\n\n* test\n\n\n* test\n\n\n    * test\n\n\n* test\n\n\n\n--}\n\n\n\n{++\n\n\n\n* test\n\n\n* test\n\n\n* test\n\n\n    * test\n\n\n* test\n\n\n\n++}\n\n\n\n\n\n\nHere is some \nincorrect\n Markdown.  I am adding this\n here.\n.  Here is some more \ntext that I am removing\ntext.  And here is even more \ntext that I am \nadding.\n\u00a0\n  \nParagraph was deleted and replaced with some spaces.\n  \n\n\n\n\u00a0\nSpaces were removed and a paragraph was added.\nAnd here is a comment on \nsome \ntext\n \nThis works quite well. I just wanted to comment on it.\n. Substitutions \nis\nare\n great!\nGeneral block handling.\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\n\n\nCSS\n\ue157\n\n\nCritic renders the CriticMarkup with the following classes.\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncritic\n\n\nThis is applied to all critic edits.\n\n\n\n\n\n\nbreak\n\n\nThis is applied to critic inserts or deletes that encompass \nonly\n 2+ newlines.\n\n\n\n\n\n\nblock\n\n\nApplied to critic HTML tags that are detected as surrounding a block region.\n\n\n\n\n\n\ncomment\n\n\nA CriticMarkup comment.\n\n\n\n\n\n\n\n\nHere is some example CSS you can use for rendering the visualization.\n\n\n/* Critic Markup */\n\n\n.markdown-body\n \n.critic\n \n{\n\n  \nfont-family\n:\n \ninherit\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder-style\n:\n \nsolid\n;\n\n  \nborder-width\n:\n \n1px\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.critic\n:before\n,\n\n\n.markdown-body\n \n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n'\\00a0'\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \nfont-size\n:\n \ninitial\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n:before\n,\n\n\n.markdown-body\n \n.block\n:after\n \n{\n\n  \ncontent\n:\n \n''\n;\n\n\n}\n\n\n\n.markdown-body\n \nmark\n.critic\n \n{\n\n  \nborder-color\n:\n \n#ff8600\n;\n\n  \nbackground\n:\n \n#ffddaa\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.critic\n \n{\n\n  \nborder-color\n:\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.critic\n \n{\n\n  \nborder-color\n:\n \n#dd0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n,\n\n\n.markdown-body\n \ndel\n.break\n \n{\n\n  \nfont-size\n:\n \n0\n;\n\n  \nborder\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n,\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncontent\n:\n \n'\\00a0\\b6\\00a0'\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.after\n,\n\n\n.markdown-body\n \ndel\n.after\n \n{\n\n  \ncontent\n:\n \n''\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#00bb00\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#bb0000\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#bb0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n \n{\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n0\n;\n\n  \nborder-top\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n  \nborder-bottom\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n,\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \nfont-size\n:\n \ninherit\n;\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n \n{\n\n  \ncontent\n:\n \n'\\00a0\\bb'\n;\n\n  \nborder-right\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n'\\ab\\00a0'\n;\n\n  \nborder-left\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \npadding\n:\n \n.02em\n;\n\n\n}",
            "title": "Critic"
        },
        {
            "location": "/extensions/critic/#overview",
            "text": "Critic is an extension that adds handling and support of  Critic Markup .  This extension runs before all other extensions to parse the critic edits.  It allows for the removal or acceptance of the critic modifications and modifies the source to reflect the rejection or approval (highlights and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output ( mileage may vary ).",
            "title": "Overview"
        },
        {
            "location": "/extensions/critic/#options",
            "text": "Option  Type  Default  Description      mode  string  view  view  just parses the markup and displays it in its HTML equivalent rendering.   accept  strips out the critic markup and replaces them with the suggested changes.   reject  rejects all the suggestions and strips the critic markup out replacing it with the original.",
            "title": "Options"
        },
        {
            "location": "/extensions/critic/#limitations-with-previewing-critic-markup",
            "text": "Parsing CriticMarkup is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually  and  trying to convert the document to HTML, things can get ugly.  I think this is the one unfortunate problem with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created for the preview (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here:  http://fletcher.github.io/MultiMarkdown-4/criticmarkup .  The critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some of the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region's HTML output which allows for CSS styling.  There is probably a lot more post-processing that could be done to fix more issues, but whether this extension will be going further down that road has not yet been decided.",
            "title": "Limitations with Previewing Critic Markup"
        },
        {
            "location": "/extensions/critic/#examples",
            "text": "Markup Example delete delete insert insert delete and replace with substitutions delete and replace substitutions highlight highlight comment text comment  Here they are in action:  Here   is   some   {--*incorrect*--}   Markdown.    I   am   adding   this {++ here.++} .    Here   is   some   more   {--text   that I am removing--} text.    And   here   is   even   more   {++text that I    am ++} adding. {~~  ~>  ~~} Paragraph   was   deleted   and   replaced   with   some   spaces. {~~  ~>  ~~} Spaces   were   removed   and   a   paragraph   was   added.\n\nAnd   here   is   a   comment   on   {==some   ==text== ==}{>>This works quite well. I just wanted to comment on it.<<} .   Substitutions   {~~is~>are~~}   great!\n\nGeneral   block   handling. {--  * test  * test  * test      * test  * test  --}  {++  * test  * test  * test      * test  * test  ++}   Here is some  incorrect  Markdown.  I am adding this  here. .  Here is some more  text that I am removing text.  And here is even more  text that I am  adding. \u00a0    Paragraph was deleted and replaced with some spaces.     \u00a0 Spaces were removed and a paragraph was added. And here is a comment on  some  text   This works quite well. I just wanted to comment on it. . Substitutions  is are  great! General block handling. test test test test test test test test test test",
            "title": "Examples"
        },
        {
            "location": "/extensions/critic/#css",
            "text": "Critic renders the CriticMarkup with the following classes.     Classes  Description      critic  This is applied to all critic edits.    break  This is applied to critic inserts or deletes that encompass  only  2+ newlines.    block  Applied to critic HTML tags that are detected as surrounding a block region.    comment  A CriticMarkup comment.     Here is some example CSS you can use for rendering the visualization.  /* Critic Markup */  .markdown-body   .critic   { \n   font-family :   inherit ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   border-style :   solid ; \n   border-width :   1px ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   text-decoration :   none ;  }  .markdown-body   .critic :before ,  .markdown-body   .critic :after   { \n   content :   '\\00a0' ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   font-size :   initial ;  }  .markdown-body   .block :before ,  .markdown-body   .block :after   { \n   content :   '' ;  }  .markdown-body   mark .critic   { \n   border-color :   #ff8600 ; \n   background :   #ffddaa ;  }  .markdown-body   ins .critic   { \n   border-color :   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .critic   { \n   border-color :   #dd0000 ; \n   background :   #ffdddd ;  }  .markdown-body   ins .break ,  .markdown-body   del .break   { \n   font-size :   0 ; \n   border :   none ;  }  .markdown-body   ins .break :before ,  .markdown-body   del .break :before   { \n   content :   '\\00a0\\b6\\00a0' ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ;  }  .markdown-body   ins .after ,  .markdown-body   del .after   { \n   content :   '' ;  }  .markdown-body   ins .break :before   { \n   color :   #00bb00 ; \n   border :   1px   solid   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .break :before   { \n   color :   #bb0000 ; \n   border :   1px   solid   #bb0000 ; \n   background :   #ffdddd ;  }  .markdown-body   span .critic   { \n   background :   #ddddff ; \n   border :   0 ; \n   border-top :   1px   solid   #0000bb ; \n   border-bottom :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before ,  .markdown-body   span .critic :after   { \n   font-size :   inherit ; \n   background :   #ddddff ; \n   border :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before   { \n   content :   '\\00a0\\bb' ; \n   border-right :   none ; \n   - webkit - border-top - left - radius :   3px ; \n   - moz - border-top - left - radius :   3px ; \n   border-top - left - radius :   3px ; \n   - webkit - border-bottom - left - radius :   3px ; \n   - moz - border-bottom - left - radius :   3px ; \n   border-bottom - left - radius :   3px ;  }  .markdown-body   span .critic :after   { \n   content :   '\\ab\\00a0' ; \n   border-left :   none ; \n   - webkit - border-top - right - radius :   3px ; \n   - moz - border-top - right - radius :   3px ; \n   border-top - right - radius :   3px ; \n   - webkit - border-bottom - right - radius :   3px ; \n   - moz - border-bottom - right - radius :   3px ; \n   border-bottom - right - radius :   3px ;  }  .markdown-body   .block   { \n   display :   block ; \n   padding :   .02em ;  }",
            "title": "CSS"
        },
        {
            "location": "/extensions/emoji/",
            "text": "Overview\n\ue157\n\n\nThe Emoji extension adds support for inserting emojis via simple short names enclosed within colons: \n:short_name:\n.  This is accomplished by using a short name index to map easy to remember names to the Unicode data. The Unicode data is then converted into actual Unicode emoji characters and/or special HTML elements that represent the emoji.\n\n\nThere are a number of familiar emoji short name conventions that people may be aware of, and they differ slightly.  At the present, Emoji chooses to focus on two specific short name conventions. The first convention is from \nGemoji\n which is Github's open source solution that provides emojis in \nGFM\n.  The second is from \nEmojiOne\n which is another open source emoji solution.\n\n\nThe short name indexes simply provide easy to remember names mapped to the Unicode data. Custom emojis (like Gemoji's \n:octocat:\n) wold have no Unicode data associated with them and would only provide a long name.  While it may be thought that an index like Gemoji is only for Github emoji images, you could easily map EmojiOne images to the Gemoji short names and vice versa. You could even map \nTwemoji\n images to EmojiOne if desired.\n\n\nEmoji provides various output formats that take the Unicode data associated with a short name (or the short name itself in the case of a custom emoji) and generates an HTML output. Most hosted emoji images follow the same pattern and are named after their Unicode code points separated by hyphens (minus things like zero width joiners and variation selectors).  This is true with EmojiOne, Github, and Twemoji, to name a few.  The default output \nto_png\n could theoretically be used with the EmojiOne index to output valid PNG images for EmojiOne, Github, or Twemoji (assuming appropriate CDN or local source images were provided). With that said, some output formats may lend themselves better to assets that are available from a specific provider. For instance, EmojiOne provides SVG, PNG, and sprite assets, while others provide only PNG images.\n\n\nAs previously mentioned, short name indexes are sourced from EmojiOne's and Gemoji's latest official tags. The index contains the emoji names, shortnames, values, etc.; everything needed to insert Unicode emoji characters or specially crafted HTML elements.\n\n\n\n\nEmojiOne and Gemoji licensing\n\n\nPymdown Extensions has no affiliation with EmojiOne or Gemoji.  The indexes generated from their sources are covered under their respective licensing.  When using their images or CSS, please see their licensing terms to ensure proper usage and attributions.\n\n\nEmojiOne: \nhttp://emojione.com/licensing/\n\nGemoji: \nhttps://github.com/github/gemoji/blob/master/LICENSE\n\n\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nemoji_index\n\n\nfunction\n\n\npymdownx.emoji.emojione\n\n\nA function that returns the index to use when parsing \n:short_name:\n syntax. See \nDefault Emoji Indexes\n to see the provided indexes.\n\n\n\n\n\n\nemoji_generator\n\n\nfunction\n\n\npymdownx.emoji.to_png\n\n\nA function that takes the emoji info and constructs the desired emoji ouput. See \nDefault Emoji Generators\n to see the provided generators.\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\n'short'\n\n\nSpecifies the title format that is fed into the emoji generator function.  Can either be \nlong\n which is the long description of the emoji, \nshort\n which is the short name (\n:short:\n), or \nnone\n which will simply pass \nNone\n.\n\n\n\n\n\n\nalt\n\n\nstr\n\n\n'unicode'\n\n\nSpecifies the format for the alt value that is passed to the emoji generator function. If \nalt\n is set to \nshort\n, the short name will be passed to the generator.  If \nalt\n is set to \nunicode\n the Unicode characters are passed to the generator.  Lastly, if \nalt\n is set to \nhtml_entity\n, the Unicode characters are passed encoded as HTML entities.\n\n\n\n\n\n\nremove_variation_selector\n\n\nbool\n\n\nFalse\n\n\nSpecifies whether variation selectors should be removed from Unicode alt. Currently, only \nfe0f\n is removed as it is the only one presently found in the current emojis.\n\n\n\n\n\n\noptions\n\n\ndict\n\n\n{}\n\n\nOptions that are specific to emoji generator functions.  Supported parameters can vary from function to function.\n\n\n\n\n\n\n\n\n\n\nLegacy GithubEmoji Emulation\n\n\nThe Emoji extension was actually created to replace the now deprecated \nGithubEmoji\n extension. Emoji was written to be much more flexible.  If you have a desire to configure the output to be like the legacy GithubEmoji extension, you can use the settings below. This shows the full setup. To learn more about the settings used, continue reading the documentation.\n\n\nimport\n \npymdownx.emoji\n\n\n\nextension_configs\n \n=\n \n{\n\n    \n\"pymdownx.emoji\"\n:\n \n{\n\n        \n\"emoji_index\"\n:\n \npymdownx\n.\nemoji\n.\ngemoji\n,\n\n        \n\"emoji_generator\"\n:\n \npymdownx\n.\nemoji\n.\nto_png\n,\n\n        \n\"alt\"\n:\n \n\"short\"\n,\n\n        \n\"options\"\n:\n \n{\n\n            \n\"attributes\"\n:\n \n{\n\n                \n\"align\"\n:\n \n\"absmiddle\"\n,\n\n                \n\"height\"\n:\n \n\"20px\"\n,\n\n                \n\"width\"\n:\n \n\"20px\"\n\n            \n},\n\n            \n\"image_path\"\n:\n \n\"https://assets-cdn.github.com/images/icons/emoji/unicode/\"\n,\n\n            \n\"non_standard_image_path\"\n:\n \n\"https://assets-cdn.github.com/images/icons/emoji/\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nDefault Emoji Indexes\n\ue157\n\n\nBy default, Emoji provides two indexes: \nemojione\n and \ngemoji\n.  Both indexes are generated from the most recent official release tag source. They can be used by passing in one of the two functions below via the \nemoji_index\n parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out \nCustom Emoji Indexes\n.\n\n\n\n\npymdownx.emoji.emojione\n\n\n\n\nThis is the default function that is used and provides an index using the latest EmojiOne supported emojis (at the time of release).  You can always find out what tag it was built with by doing the following:\n\n\n>>>\n \nimport\n \npymdownx.emoji1_db\n \nas\n \ne1db\n\n\n>>>\n \ne1db\n.\nversion\n\n\n'v2.2.7'\n\n\n\n\n\n\n\n\npymdownx.emoji.gemoji\n\n\n\n\nThis function provides an index of the latest Gemoji supported emoji (at the time of release). You can always find out what tag it was built with by doing the following:\n\n\n>>>\n \nimport\n \npymdownx.gemoji_db\n \nas\n \ngmdb\n\n\n>>>\n \ngmdb\n.\nversion\n\n\n'v3.0.0'\n\n\n\n\n\n\n\n\n\n\nDefault Emoji Generators\n\ue157\n\n\nEmoji provides six default emoji generators.  All the generators can be used with the \nemojione\n index, but only two will work well with the \ngemoji\n index: \npymdownx.emoji.to_png\n and \npymdownx.emoji.to_alt\n. You can select a generator to use by passing in one of the functions below via the \nemoji_generator\n parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out \nCustom Emoji Generators\n.\n\n\n\n\npymdownx.emoji.to_png\n\n\n\n\nThis is a general purpose generator and, by default, provides an EmojiOne CDN and Github CDN path(s).  The PNG output form is as follows:\n\n\n<\nimg\n \nalt\n=\n\"\ud83d\ude04\"\n \nclass\n=\n\"emojione\"\n \nsrc\n=\n\"https://cdn.jsdelivr.net/emojione/assets/png/1f604.png\"\n \ntitle\n=\n\":smile:\"\n \n/>\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nName of the index used\n\n\nSpecifies the class(es) to be used in the img element.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\nCDN for the default index used\n\n\nThis can be either a local path or a CDN containing the assets.  By default, an appropriate CDN is provided for EmojiOne and Gemoji depending on which index is being used.\n\n\n\n\n\n\nnon_standard_image_path\n\n\nstr\n\n\nCDN for the default index used\n\n\nThis can be either a local path, or a CDN containing the assets. Currently, only Gemoji's non-standard emojis take advantage of this as the Github CDN alters the path slightly for its non-Unicode emoji.  By default, an appropriate CDN is provided for Gemoji.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_svg\n\n\n\n\nThis generator was written to output EmojiOne SVG images. The SVG image outputs as:\n\n\n<\nimg\n \nalt\n=\n\"\ud83d\ude04\"\n \nclass\n=\n\"emojione\"\n \nsrc\n=\n\"https://cdn.jsdelivr.net/emojione/assets/svg/1f604.svg\"\n \ntitle\n=\n\":smile:\"\n \n/>\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nName of the index used\n\n\nSpecifies the class(es) to be used in the img element. The default will match the name of the index used.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\nA CDN for EmojiOne images\n\n\nThis can be either a local path or a CDN containing the assets.  By default, an appropriate CDN is provided for EmojiOne.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_png_sprite\n\n\n\n\nThis generator was written to support PNG sprite output for EmojiOne.  It is expected that this will be used in conjunction with the the official EmojiOne CSS.  You can include the CSS from the CDN in your document.  Example CDN for version 2.2.7: \nhttps://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/sprites/emojione.sprites.css\n. This outputs the emoji as a span in the form below.  The CSS will apply the appropriate mapping in the sprite PNG for the background image of the span.\n\n\n<\nspan\n \nclass\n=\n\"emojione emojione-1f604\"\n \ntitle\n=\n\":smile:\"\n>\n\ud83d\ude04\n</\nspan\n>\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nName of the index used\n\n\nClass(es) used for the span where the classes are inserted as \"class\" in the following template: \n'%(class)s-%(unicode)s'\n.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_svg_sprite\n\n\n\n\nThis was written to support EmojiOne SVG sprite output.  The output form was taken directly from an example in the EmojiOne source.  It is expected that the the user will provide a local version of the official SVG sprite and the path to it.  The output is:\n\n\n<\nsvg\n \nclass\n=\n\"emojione\"\n><\ndescription\n>\n\ud83d\ude04\n</\ndescription\n><\nuse\n \nxlink:href\n=\n\"./../assets/sprites/emojione.sprites.svg#emoji-1f604\"\n></\nuse\n></\nsvg\n>\n\n\n\n\n\n\nGenerator Specific Options\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\nName of the index used\n\n\nClass(es) to apply to the svg element where the classes are inserted as \"class\" in the following template: \n'%(class)s-%(unicode)s'\n.\n\n\n\n\n\n\nimage_path\n\n\nstr\n\n\n'./../assets/sprites/emojione.sprites.svg'\n\n\nPath to the SVG sprites.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_awesome\n\n\n\n\nThis generator is another EmojiOne specific output called \nEmojione Awesome\n.  According to EmojiOne's documentation, it aims to give a font-awesome like interface for EmojiOne.  There isn't currently a CDN link that could be found, but you can provide the CSS in your project locally by \ndownloading it\n from their repo.  The output format is:\n\n\n<\ni\n \nclass\n=\n\"e1a-smile\"\n></\ni\n>\n\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclasses\n\n\nstr\n\n\n'e1a'\n\n\nClass(es) to apply to the svg element where the classes are inserted as \"class\" in the following template: \n'%(class)s-%(shortname)s'\n.\n\n\n\n\n\n\nattributes\n\n\ndict\n\n\n{}\n\n\nA dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.\n\n\n\n\n\n\n\n\n\n\npymdownx.emoji.to_alt\n\n\n\n\nThis generator supports both Gemoji and EmojiOne.  The generator outputs the alt value directly to the document.  The output can be Unicode characters, HTML entities, or even just the short name depending on what the global setting of 'alt' is set to.\n\n\n\ud83d\ude03\n\n\n\n\n\nThere are no generator specific options.\n\n\n\n\n\n\nCustom Emoji Indexes\n\ue157\n\n\nIn order to provide a custom index, the Emoji extension must be given a function that returns a suitable emoji index.  No parameters are passed to the function.  The function should simply return the custom index in the following format.\n\n\nemoji_index\n \n=\n \n{\n\n    \n# Name is the name of the index.  This is passed into the emoji\n\n    \n# generator functions and can be used to differentiate logic\n\n    \n# for different indexes if required.\n\n    \n\"name\"\n:\n \n\"myindex\"\n,\n\n\n    \n# The actual index.  A dictionary of all the emoji.\n\n    \n# Different emoji shortnames with the same Unicode data\n\n    \n# can be mentioned under aliases.\n\n    \n\"emoji\"\n:\n \n{\n\n        \n# Key is the short name.\n\n        \n\":zero:\"\n:\n \n{\n\n\n            \n# Name is the long name.\n\n            \n\"name\"\n:\n \n\"keycap digit zero\"\n,\n\n\n            \n# Unicode is the representation of the Unicode\n\n            \n# code points with variations and joiners striped out.\n\n            \n# This is used to reference pngs or svgs associated\n\n            \n# with the emoji and can also sometimes be used as\n\n            \n# part of special class names in the HTML output.\n\n            \n#\n\n            \n# Do not include this if the emoji is a custom,\n\n            \n# non-Unicode emoji.\n\n            \n\"unicode\"\n:\n \n\"0030-20e3\"\n,\n\n\n            \n# This is the full Unicode code points and is\n\n            \n# used for the \"alt\" attributes in the HTML output of images.\n\n            \n# It is redundant to include this if it is the\n\n            \n# same as 'unicode', but it won't hurt anything if it is.\n\n            \n#\n\n            \n# Do not include this if the emoji is a custom,\n\n            \n# non-Unicode emoji.\n\n            \n\"unicode_alt\"\n:\n \n\"0030-fe0f-20e3\"\n\n        \n},\n\n        \n# No need to specify 'unicode_alt' as it is the same\n\n        \n# as 'unicode'.\n\n        \n\":thumbsup:\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"thumbs up sign\"\n,\n\n            \n\"unicode\"\n:\n \n\"1f44d\"\n\n        \n},\n\n        \n# Should not specify any unicode fields\n\n        \n# as this is not a real unicode emoji.\n\n        \n\":octocat:\"\n:\n \n{\n\n            \n\"name\"\n:\n \n\"octocat\"\n\n        \n},\n\n    \n},\n\n    \n# Short names that share previously defined Unicode data\n\n    \n# like '+1' and 'thumbsup' etc.\n\n    \n\"aliases\"\n:\n \n{\n\n        \n# Key is the alias.\n\n        \n# Value is the short name it maps to in the\n\n        \n# previously defined 'emoji' key.\n\n        \n\":+1:\"\n:\n \n\":thumbsup:\"\n\n    \n}\n\n\n}\n\n\n\n\n\n\nCustom Emoji Generators\n\ue157\n\n\nEach different kind of output is controlled by a different emoji generator function, but all generator functions have the same format. The format is shown below in case you need to create your own custom output generator.\n\n\n\n\ndef emoji_generator(index, shortname, alias, uc, alt, title, options, md)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nstr\n\n\nThe name of the selected emoji index.\n\n\n\n\n\n\nshortname\n\n\nstr\n\n\nThe current short name.  This may differ from the actual name used in a document as aliases get translated to the main short name.\n\n\n\n\n\n\nalias\n\n\nstr\n\n\nIf the name specified in the document was an alias, that alias will be set here, and the main short name will be found under \nshortname\n.  This will be \nNone\n if the name used was not an alias.\n\n\n\n\n\n\nuc\n\n\nstr\n\n\nThis is a string of the Unicode values for the emoji.  This is used to reference emoji image names or for specifying class names etc., so it may not contain all the code points.  The string returned consists of each Unicode value represented as a hex value separated with hyphens.  Values such as U+200D ZERO WIDTH JOINER and  U+FE0F VARIATION SELECTOR-16 are stripped out.  So the value here will not always be practical for calculating the actual Unicode points of an emoji.  This will be \nNone\n for non-standard emoji that are not Unicode.\n\n\n\n\n\n\nalt\n\n\nstr\n\n\nThis is the alternative emoji value (or fallback value).  Its format will differ depending on the extension setting \nalt\n.  This will be returned as either the Unicode characters, HTML entities, or the short name used.  See the \nalt\n setting for more info.\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nThis is the title that can be used in img elements.  Depending on the global extension setting \ntitle\n, this will either return the long name, the short name, or \nNone\n.  See the \ntitle\n setting for more info.\n\n\n\n\n\n\noptions\n\n\ndict\n\n\nThis is a dictionary to specify generator function specific options.  This can be anything, and it is up to the generator function to parse and provide defaults.\n\n\n\n\n\n\nmd\n\n\nclass\n\n\nThis is the Markdown class object.  This is mainly used to access specific things needed from the Markdown class.  If you needed to stash your output, you would do something like: \nmd.htmlStash.store(alt, safe=True)\n.\n\n\n\n\n\n\n\n\n\n\nNon-Unicode emojis\n\n\nKeep in mind that Gemoji ships with some non-standard emojis like \n:octocat:\n that do not have Unicode code points.  \nuc\n and \nalt\n are affected by this and will return \nNone\n and the short name respectively instead of strings describing the Unicode points.  For example \n:octocat:\n will just return \nNone\n for \nuc\n and \n:octocat:\n for \nalt\n.  If you are parsing an index with custom emojis, like Gemoji has, then you need to be aware of this.\n\n\n\n\n\n\n\n\nUsing with MkDocs\n\ue157\n\n\nThis project uses these extensions with \nMkDocs\n to generate the documentation.  It might not be obvious how to set the index or generator functions in Mkdoc's YAML settings file, but it is actually pretty easy.  The functions are referenced like you would import them in Python except you also append them with a special prefix to let the YAML module know that the setting value is a Python object.  For instance, to specify the \nto_svg\n generator, you would simply reference it like this: \n!!python/name:pymdownx.emoji.to_svg\n (or you could use your own custom module).\n\n\nmarkdown_extensions\n:\n\n  \n-\n \npymdownx.emoji\n:\n\n      \nemoji_generator\n:\n \n!!python/name:pymdownx.emoji.to_svg\n\n\n\n\n\n\nEmoji Index Updates\n\ue157\n\n\nThe Emoji extension might at times be behind on having indexes built from the latest repos. We try to keep the indexes updated with new releases, but if they fall out of date, you can open an issue on the repo to alert the maintainer(s) and they will update them when someone gets a chance.  Pull requests are also welcome.  The process for updating the indexes is automated, so it is fairly easy to do for a pull request.  See \nGenerating Emoji Indexes\n for more info.\n\n\nExamples\n\ue157\n\n\nCurrent examples are all rendered with EmojiOne.\n\n\nEmojiOne :smile: emojis are very useful :thumbsup:.\n\nYou can also escape `:` characters to escape the emoji: \\:smile:.\n\n\n\n\n\nEmojiOne \n emojis are very useful \n.\n\n\nYou can also escape \n:\n characters to escape the emoji: :smile:.",
            "title": "Emoji"
        },
        {
            "location": "/extensions/emoji/#overview",
            "text": "The Emoji extension adds support for inserting emojis via simple short names enclosed within colons:  :short_name: .  This is accomplished by using a short name index to map easy to remember names to the Unicode data. The Unicode data is then converted into actual Unicode emoji characters and/or special HTML elements that represent the emoji.  There are a number of familiar emoji short name conventions that people may be aware of, and they differ slightly.  At the present, Emoji chooses to focus on two specific short name conventions. The first convention is from  Gemoji  which is Github's open source solution that provides emojis in  GFM .  The second is from  EmojiOne  which is another open source emoji solution.  The short name indexes simply provide easy to remember names mapped to the Unicode data. Custom emojis (like Gemoji's  :octocat: ) wold have no Unicode data associated with them and would only provide a long name.  While it may be thought that an index like Gemoji is only for Github emoji images, you could easily map EmojiOne images to the Gemoji short names and vice versa. You could even map  Twemoji  images to EmojiOne if desired.  Emoji provides various output formats that take the Unicode data associated with a short name (or the short name itself in the case of a custom emoji) and generates an HTML output. Most hosted emoji images follow the same pattern and are named after their Unicode code points separated by hyphens (minus things like zero width joiners and variation selectors).  This is true with EmojiOne, Github, and Twemoji, to name a few.  The default output  to_png  could theoretically be used with the EmojiOne index to output valid PNG images for EmojiOne, Github, or Twemoji (assuming appropriate CDN or local source images were provided). With that said, some output formats may lend themselves better to assets that are available from a specific provider. For instance, EmojiOne provides SVG, PNG, and sprite assets, while others provide only PNG images.  As previously mentioned, short name indexes are sourced from EmojiOne's and Gemoji's latest official tags. The index contains the emoji names, shortnames, values, etc.; everything needed to insert Unicode emoji characters or specially crafted HTML elements.   EmojiOne and Gemoji licensing  Pymdown Extensions has no affiliation with EmojiOne or Gemoji.  The indexes generated from their sources are covered under their respective licensing.  When using their images or CSS, please see their licensing terms to ensure proper usage and attributions.  EmojiOne:  http://emojione.com/licensing/ \nGemoji:  https://github.com/github/gemoji/blob/master/LICENSE",
            "title": "Overview"
        },
        {
            "location": "/extensions/emoji/#options",
            "text": "Option  Type  Default  Description      emoji_index  function  pymdownx.emoji.emojione  A function that returns the index to use when parsing  :short_name:  syntax. See  Default Emoji Indexes  to see the provided indexes.    emoji_generator  function  pymdownx.emoji.to_png  A function that takes the emoji info and constructs the desired emoji ouput. See  Default Emoji Generators  to see the provided generators.    title  str  'short'  Specifies the title format that is fed into the emoji generator function.  Can either be  long  which is the long description of the emoji,  short  which is the short name ( :short: ), or  none  which will simply pass  None .    alt  str  'unicode'  Specifies the format for the alt value that is passed to the emoji generator function. If  alt  is set to  short , the short name will be passed to the generator.  If  alt  is set to  unicode  the Unicode characters are passed to the generator.  Lastly, if  alt  is set to  html_entity , the Unicode characters are passed encoded as HTML entities.    remove_variation_selector  bool  False  Specifies whether variation selectors should be removed from Unicode alt. Currently, only  fe0f  is removed as it is the only one presently found in the current emojis.    options  dict  {}  Options that are specific to emoji generator functions.  Supported parameters can vary from function to function.      Legacy GithubEmoji Emulation  The Emoji extension was actually created to replace the now deprecated  GithubEmoji  extension. Emoji was written to be much more flexible.  If you have a desire to configure the output to be like the legacy GithubEmoji extension, you can use the settings below. This shows the full setup. To learn more about the settings used, continue reading the documentation.  import   pymdownx.emoji  extension_configs   =   { \n     \"pymdownx.emoji\" :   { \n         \"emoji_index\" :   pymdownx . emoji . gemoji , \n         \"emoji_generator\" :   pymdownx . emoji . to_png , \n         \"alt\" :   \"short\" , \n         \"options\" :   { \n             \"attributes\" :   { \n                 \"align\" :   \"absmiddle\" , \n                 \"height\" :   \"20px\" , \n                 \"width\" :   \"20px\" \n             }, \n             \"image_path\" :   \"https://assets-cdn.github.com/images/icons/emoji/unicode/\" , \n             \"non_standard_image_path\" :   \"https://assets-cdn.github.com/images/icons/emoji/\" \n         } \n     }  }",
            "title": "Options"
        },
        {
            "location": "/extensions/emoji/#default-emoji-indexes",
            "text": "By default, Emoji provides two indexes:  emojione  and  gemoji .  Both indexes are generated from the most recent official release tag source. They can be used by passing in one of the two functions below via the  emoji_index  parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out  Custom Emoji Indexes .   pymdownx.emoji.emojione   This is the default function that is used and provides an index using the latest EmojiOne supported emojis (at the time of release).  You can always find out what tag it was built with by doing the following:  >>>   import   pymdownx.emoji1_db   as   e1db  >>>   e1db . version  'v2.2.7'    pymdownx.emoji.gemoji   This function provides an index of the latest Gemoji supported emoji (at the time of release). You can always find out what tag it was built with by doing the following:  >>>   import   pymdownx.gemoji_db   as   gmdb  >>>   gmdb . version  'v3.0.0'",
            "title": "Default Emoji Indexes"
        },
        {
            "location": "/extensions/emoji/#default-emoji-generators",
            "text": "Emoji provides six default emoji generators.  All the generators can be used with the  emojione  index, but only two will work well with the  gemoji  index:  pymdownx.emoji.to_png  and  pymdownx.emoji.to_alt . You can select a generator to use by passing in one of the functions below via the  emoji_generator  parameter.  Pass the actual function reference, not a string. If you need to create your own, just check out  Custom Emoji Generators .   pymdownx.emoji.to_png   This is a general purpose generator and, by default, provides an EmojiOne CDN and Github CDN path(s).  The PNG output form is as follows:  < img   alt = \"\ud83d\ude04\"   class = \"emojione\"   src = \"https://cdn.jsdelivr.net/emojione/assets/png/1f604.png\"   title = \":smile:\"   />   Generator Specific Options     Option  Type  Default  Description      classes  str  Name of the index used  Specifies the class(es) to be used in the img element.    image_path  str  CDN for the default index used  This can be either a local path or a CDN containing the assets.  By default, an appropriate CDN is provided for EmojiOne and Gemoji depending on which index is being used.    non_standard_image_path  str  CDN for the default index used  This can be either a local path, or a CDN containing the assets. Currently, only Gemoji's non-standard emojis take advantage of this as the Github CDN alters the path slightly for its non-Unicode emoji.  By default, an appropriate CDN is provided for Gemoji.    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_svg   This generator was written to output EmojiOne SVG images. The SVG image outputs as:  < img   alt = \"\ud83d\ude04\"   class = \"emojione\"   src = \"https://cdn.jsdelivr.net/emojione/assets/svg/1f604.svg\"   title = \":smile:\"   />   Generator Specific Options     Option  Type  Default  Description      classes  str  Name of the index used  Specifies the class(es) to be used in the img element. The default will match the name of the index used.    image_path  str  A CDN for EmojiOne images  This can be either a local path or a CDN containing the assets.  By default, an appropriate CDN is provided for EmojiOne.    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_png_sprite   This generator was written to support PNG sprite output for EmojiOne.  It is expected that this will be used in conjunction with the the official EmojiOne CSS.  You can include the CSS from the CDN in your document.  Example CDN for version 2.2.7:  https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/sprites/emojione.sprites.css . This outputs the emoji as a span in the form below.  The CSS will apply the appropriate mapping in the sprite PNG for the background image of the span.  < span   class = \"emojione emojione-1f604\"   title = \":smile:\" > \ud83d\ude04 </ span >   Generator Specific Options     Option  Type  Default  Description      classes  str  Name of the index used  Class(es) used for the span where the classes are inserted as \"class\" in the following template:  '%(class)s-%(unicode)s' .    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_svg_sprite   This was written to support EmojiOne SVG sprite output.  The output form was taken directly from an example in the EmojiOne source.  It is expected that the the user will provide a local version of the official SVG sprite and the path to it.  The output is:  < svg   class = \"emojione\" >< description > \ud83d\ude04 </ description >< use   xlink:href = \"./../assets/sprites/emojione.sprites.svg#emoji-1f604\" ></ use ></ svg >   Generator Specific Options     Option  Type  Default  Description      classes  str  Name of the index used  Class(es) to apply to the svg element where the classes are inserted as \"class\" in the following template:  '%(class)s-%(unicode)s' .    image_path  str  './../assets/sprites/emojione.sprites.svg'  Path to the SVG sprites.      pymdownx.emoji.to_awesome   This generator is another EmojiOne specific output called  Emojione Awesome .  According to EmojiOne's documentation, it aims to give a font-awesome like interface for EmojiOne.  There isn't currently a CDN link that could be found, but you can provide the CSS in your project locally by  downloading it  from their repo.  The output format is:  < i   class = \"e1a-smile\" ></ i >      Option  Type  Default  Description      classes  str  'e1a'  Class(es) to apply to the svg element where the classes are inserted as \"class\" in the following template:  '%(class)s-%(shortname)s' .    attributes  dict  {}  A dictionary containing tag attributes as key value string pairs. The dict keys are the attribute names and dict values are the attribute values.      pymdownx.emoji.to_alt   This generator supports both Gemoji and EmojiOne.  The generator outputs the alt value directly to the document.  The output can be Unicode characters, HTML entities, or even just the short name depending on what the global setting of 'alt' is set to.  \ud83d\ude03  There are no generator specific options.",
            "title": "Default Emoji Generators"
        },
        {
            "location": "/extensions/emoji/#custom-emoji-indexes",
            "text": "In order to provide a custom index, the Emoji extension must be given a function that returns a suitable emoji index.  No parameters are passed to the function.  The function should simply return the custom index in the following format.  emoji_index   =   { \n     # Name is the name of the index.  This is passed into the emoji \n     # generator functions and can be used to differentiate logic \n     # for different indexes if required. \n     \"name\" :   \"myindex\" , \n\n     # The actual index.  A dictionary of all the emoji. \n     # Different emoji shortnames with the same Unicode data \n     # can be mentioned under aliases. \n     \"emoji\" :   { \n         # Key is the short name. \n         \":zero:\" :   { \n\n             # Name is the long name. \n             \"name\" :   \"keycap digit zero\" , \n\n             # Unicode is the representation of the Unicode \n             # code points with variations and joiners striped out. \n             # This is used to reference pngs or svgs associated \n             # with the emoji and can also sometimes be used as \n             # part of special class names in the HTML output. \n             # \n             # Do not include this if the emoji is a custom, \n             # non-Unicode emoji. \n             \"unicode\" :   \"0030-20e3\" , \n\n             # This is the full Unicode code points and is \n             # used for the \"alt\" attributes in the HTML output of images. \n             # It is redundant to include this if it is the \n             # same as 'unicode', but it won't hurt anything if it is. \n             # \n             # Do not include this if the emoji is a custom, \n             # non-Unicode emoji. \n             \"unicode_alt\" :   \"0030-fe0f-20e3\" \n         }, \n         # No need to specify 'unicode_alt' as it is the same \n         # as 'unicode'. \n         \":thumbsup:\" :   { \n             \"name\" :   \"thumbs up sign\" , \n             \"unicode\" :   \"1f44d\" \n         }, \n         # Should not specify any unicode fields \n         # as this is not a real unicode emoji. \n         \":octocat:\" :   { \n             \"name\" :   \"octocat\" \n         }, \n     }, \n     # Short names that share previously defined Unicode data \n     # like '+1' and 'thumbsup' etc. \n     \"aliases\" :   { \n         # Key is the alias. \n         # Value is the short name it maps to in the \n         # previously defined 'emoji' key. \n         \":+1:\" :   \":thumbsup:\" \n     }  }",
            "title": "Custom Emoji Indexes"
        },
        {
            "location": "/extensions/emoji/#custom-emoji-generators",
            "text": "Each different kind of output is controlled by a different emoji generator function, but all generator functions have the same format. The format is shown below in case you need to create your own custom output generator.   def emoji_generator(index, shortname, alias, uc, alt, title, options, md)      Parameter  Type  Description      index  str  The name of the selected emoji index.    shortname  str  The current short name.  This may differ from the actual name used in a document as aliases get translated to the main short name.    alias  str  If the name specified in the document was an alias, that alias will be set here, and the main short name will be found under  shortname .  This will be  None  if the name used was not an alias.    uc  str  This is a string of the Unicode values for the emoji.  This is used to reference emoji image names or for specifying class names etc., so it may not contain all the code points.  The string returned consists of each Unicode value represented as a hex value separated with hyphens.  Values such as U+200D ZERO WIDTH JOINER and  U+FE0F VARIATION SELECTOR-16 are stripped out.  So the value here will not always be practical for calculating the actual Unicode points of an emoji.  This will be  None  for non-standard emoji that are not Unicode.    alt  str  This is the alternative emoji value (or fallback value).  Its format will differ depending on the extension setting  alt .  This will be returned as either the Unicode characters, HTML entities, or the short name used.  See the  alt  setting for more info.    title  str  This is the title that can be used in img elements.  Depending on the global extension setting  title , this will either return the long name, the short name, or  None .  See the  title  setting for more info.    options  dict  This is a dictionary to specify generator function specific options.  This can be anything, and it is up to the generator function to parse and provide defaults.    md  class  This is the Markdown class object.  This is mainly used to access specific things needed from the Markdown class.  If you needed to stash your output, you would do something like:  md.htmlStash.store(alt, safe=True) .      Non-Unicode emojis  Keep in mind that Gemoji ships with some non-standard emojis like  :octocat:  that do not have Unicode code points.   uc  and  alt  are affected by this and will return  None  and the short name respectively instead of strings describing the Unicode points.  For example  :octocat:  will just return  None  for  uc  and  :octocat:  for  alt .  If you are parsing an index with custom emojis, like Gemoji has, then you need to be aware of this.",
            "title": "Custom Emoji Generators"
        },
        {
            "location": "/extensions/emoji/#using-with-mkdocs",
            "text": "This project uses these extensions with  MkDocs  to generate the documentation.  It might not be obvious how to set the index or generator functions in Mkdoc's YAML settings file, but it is actually pretty easy.  The functions are referenced like you would import them in Python except you also append them with a special prefix to let the YAML module know that the setting value is a Python object.  For instance, to specify the  to_svg  generator, you would simply reference it like this:  !!python/name:pymdownx.emoji.to_svg  (or you could use your own custom module).  markdown_extensions : \n   -   pymdownx.emoji : \n       emoji_generator :   !!python/name:pymdownx.emoji.to_svg",
            "title": "Using with MkDocs"
        },
        {
            "location": "/extensions/emoji/#emoji-index-updates",
            "text": "The Emoji extension might at times be behind on having indexes built from the latest repos. We try to keep the indexes updated with new releases, but if they fall out of date, you can open an issue on the repo to alert the maintainer(s) and they will update them when someone gets a chance.  Pull requests are also welcome.  The process for updating the indexes is automated, so it is fairly easy to do for a pull request.  See  Generating Emoji Indexes  for more info.",
            "title": "Emoji Index Updates"
        },
        {
            "location": "/extensions/emoji/#examples",
            "text": "Current examples are all rendered with EmojiOne.  EmojiOne :smile: emojis are very useful :thumbsup:.\n\nYou can also escape `:` characters to escape the emoji: \\:smile:.  EmojiOne   emojis are very useful  .  You can also escape  :  characters to escape the emoji: :smile:.",
            "title": "Examples"
        },
        {
            "location": "/extensions/escapeall/",
            "text": "Overview\n\ue157\n\n\nIf you ever have to stop and try to remember, \nCan I escape this char?\n or \nWill backslash escape this?\n, you are not alone.  EscapeAll makes \n\\\n escape everything making such questions moot.  Now instead of questioning or looking up what can be escaped, you can expect that \n\\\n will escape the character following it.  So if you need a literal \n\\\n, just escape it: \n\\\\\n.\n\n\n\n\nWhat about newlines?\n\n\n\n\nIt escapes everything.\n\n\n\n\nWhat about Unicode?\n\n\n\n\nIt escapes everything!\n\n\n\n\nWhat about\u2026\n\n\n\n\nEVERYTHING! IT ESCAPES EVERYTHING!\n\n\nExamples\n\ue157\n\n\n\\W\\e\\ \\c\\a\\n\\ \\e\\s\\c\\a\\p\\e\\ \\e\\v\\e\\r\\y\\t\\h\\i\\n\\g\\!\\ \\\n\\\n\\\u2764\\\ud83d\ude04\n\n\n\n\n\nWe can escape everything! \n\n\u2764\ud83d\ude04",
            "title": "EscapeAll"
        },
        {
            "location": "/extensions/escapeall/#overview",
            "text": "If you ever have to stop and try to remember,  Can I escape this char?  or  Will backslash escape this? , you are not alone.  EscapeAll makes  \\  escape everything making such questions moot.  Now instead of questioning or looking up what can be escaped, you can expect that  \\  will escape the character following it.  So if you need a literal  \\ , just escape it:  \\\\ .   What about newlines?   It escapes everything.   What about Unicode?   It escapes everything!   What about\u2026   EVERYTHING! IT ESCAPES EVERYTHING!",
            "title": "Overview"
        },
        {
            "location": "/extensions/escapeall/#examples",
            "text": "\\W\\e\\ \\c\\a\\n\\ \\e\\s\\c\\a\\p\\e\\ \\e\\v\\e\\r\\y\\t\\h\\i\\n\\g\\!\\ \\\n\\\n\\\u2764\\\ud83d\ude04  We can escape everything! \n\n\u2764\ud83d\ude04",
            "title": "Examples"
        },
        {
            "location": "/extensions/extra/",
            "text": "Overview\n\ue157\n\n\nPython Markdown has an \nextra\n extension that provides features similar to PHP Markdown Extra.  PyMdown Extensions aims to provide not only new features, but to improve behavior in Python Markdown's existing feature set.  Some of these things can be at odds.  Python Markdown's \nsmartstrong\n and \nfenced_code\n are not compatible with PyMdown Extensions' \nbetterem\n and \nsuperfences\n.  \nsmartstong\n should never be loaded at the same time as \nbetterem\n, and \nsuperfences\n should not be loaded at the same time as \nfenced_code\n.  Because of this, it is not possible to use Python Markdown's \nextra\n and PyMdown's \nsuperfences\n and \nbetterem\n. To make this less frustrating, PyMdown Extensions provides it's own implementation of \nextra\n.\n\n\nPyMdown's \nextra\n is just like Python Markdown's extra except \nsmartstrong\n is replaced by \nbetterem\n and \nfenced_code\n is replaced by \nsuperfences\n.  All other features and extensions should be identical because we are using the same ones.\n\n\nThis extension is a convenience extension, and it currently provides no other additional features.  But remember \ndon't use \npymdownx.extra\n while also using \nmarkdown.extensions.extra\n!\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions:\n\n\n\n\n\n\n\n\nExtension\n\n\nName\n\n\n\n\n\n\n\n\n\n\nbetterem\n\n\npymdownx.betterem\n\n\n\n\n\n\nsuperfences\n\n\npymdownx.superfences\n\n\n\n\n\n\nFootnotes\n\n\nmarkdown.extensions.footnotes\n\n\n\n\n\n\nAttribute Lists\n\n\nmarkdown.extensions.attr_list\n\n\n\n\n\n\nDefinition Lists\n\n\nmarkdown.extensions.def_list\n\n\n\n\n\n\nTables\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\nAbbreviations\n\n\nmarkdown.extensions.abbr\n\n\n\n\n\n\nextrarawhtml\n\n\npymdownx.extrarawhtml",
            "title": "Extra"
        },
        {
            "location": "/extensions/extra/#overview",
            "text": "Python Markdown has an  extra  extension that provides features similar to PHP Markdown Extra.  PyMdown Extensions aims to provide not only new features, but to improve behavior in Python Markdown's existing feature set.  Some of these things can be at odds.  Python Markdown's  smartstrong  and  fenced_code  are not compatible with PyMdown Extensions'  betterem  and  superfences .   smartstong  should never be loaded at the same time as  betterem , and  superfences  should not be loaded at the same time as  fenced_code .  Because of this, it is not possible to use Python Markdown's  extra  and PyMdown's  superfences  and  betterem . To make this less frustrating, PyMdown Extensions provides it's own implementation of  extra .  PyMdown's  extra  is just like Python Markdown's extra except  smartstrong  is replaced by  betterem  and  fenced_code  is replaced by  superfences .  All other features and extensions should be identical because we are using the same ones.  This extension is a convenience extension, and it currently provides no other additional features.  But remember  don't use  pymdownx.extra  while also using  markdown.extensions.extra !   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions:     Extension  Name      betterem  pymdownx.betterem    superfences  pymdownx.superfences    Footnotes  markdown.extensions.footnotes    Attribute Lists  markdown.extensions.attr_list    Definition Lists  markdown.extensions.def_list    Tables  markdown.extensions.tables    Abbreviations  markdown.extensions.abbr    extrarawhtml  pymdownx.extrarawhtml",
            "title": "Overview"
        },
        {
            "location": "/extensions/extrarawhtml/",
            "text": "Overview\n\ue157\n\n\nPython Markdown provides an \nextra\n extension that has features similar to PHP Markdown Extra.  For reasons covered in \npymdownx.extra\n, PyMdown Extensions implements its own \nextra\n extension.  In order to accomplish this, Python Markdown's raw HTML parsing functionality, which is used to parse nested Markdown inside HTML blocks, had to be split out of the \nextra\n implementation.  Afterwards, it was decided expose it to allow people who maybe didn't want to use all of the features found in \nextra\n, but still wanted to use the parsing of nested Markdown inside of HTML blocks.  This is basically a wrapper around Python Markdown's \nextra\n extension's raw HTML parsing.  For more info see \nPython Markdown's Extra documentation\n.",
            "title": "ExtraRawHtml"
        },
        {
            "location": "/extensions/extrarawhtml/#overview",
            "text": "Python Markdown provides an  extra  extension that has features similar to PHP Markdown Extra.  For reasons covered in  pymdownx.extra , PyMdown Extensions implements its own  extra  extension.  In order to accomplish this, Python Markdown's raw HTML parsing functionality, which is used to parse nested Markdown inside HTML blocks, had to be split out of the  extra  implementation.  Afterwards, it was decided expose it to allow people who maybe didn't want to use all of the features found in  extra , but still wanted to use the parsing of nested Markdown inside of HTML blocks.  This is basically a wrapper around Python Markdown's  extra  extension's raw HTML parsing.  For more info see  Python Markdown's Extra documentation .",
            "title": "Overview"
        },
        {
            "location": "/extensions/github/",
            "text": "Overview\n\ue157\n\n\nThe Github extension is a convenience extension to load up and configure the minimum extensions needed to get a \nGFM\n feel.  It is not a 1:1 emulation, but some aspects are pretty close.  There is no desire to make it exact, but the feel is nice if you like \nGFM\n feel; some things may differ slightly.\n\n\n\n\nTip\n\n\nFor code highlighting, you will also need to load the \nmarkdown.extensions.codehilite\n extension yourself as well with \nguess_lang=False\n. You will also need to provide your preferred Pygments style (or configure a JavaScript highlighter).  Though there is no Github style included with this extension, you are most likely able to find a suitable theme online by searching. There are Github styles found at the \npymdown-styles\n repo; it contains the original Pygments Github style (github) and the Github 2014 style (github2014) which Github used before they ditched Pygments for their own in-house highlighter.\n\n\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions that get loaded by default:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n{\n\"smart_enable\"\n:\n \n'all'\n \n}\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n{\n\"subscript\"\n:\n \nFalse\n \n}\n\n\npymdownx.tilde\n\n\n\n\n\n\nemoji\n\n\nsee \nGithub Emoji Configuration\n\n\npymdownx.emoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\n\n\n\n\nOutput Change\n\n\nHeaderAnchor is no longer included starting in version \n1.4.0\n as it wasn't really part of the \nGFM\n syntax, and HeaderAnchor is now deprecated.  HeaderAnchor is an unnecessary extension, and the same end result can be achieved with \nmarkdown.extensions.toc\n (with the \npermalink\n option enabled) and some custom CSS.  This extension was more about the syntax than it was about styling.  If you are not ready to give up the extension, you can manually include the \npymdownx.headeranchor\n extension in addition to \npymdownx.github\n. But in the future, the HeaderAnchor extension will be removed from Pymdown Extensions.\n\n\n\n\nGithub Emoji Configuration\n\ue157\n\n\nThis is the full, default setup used to get Github emoji images.  This is valid at the time of writing this. Github constantly tweaks how they do things, so in time this may render differently than what they actually do. But this should provide emojis for as long as the CDNs are valid.\n\n\nimport\n \npymdownx.emoji\n\n\n\nextension_configs\n \n=\n \n{\n\n    \n\"pymdownx.emoji\"\n:\n \n{\n\n        \n\"emoji_index\"\n:\n \npymdownx\n.\nemoji\n.\ngemoji\n,\n\n        \n\"emoji_generator\"\n:\n \npymdownx\n.\nemoji\n.\nto_png\n,\n\n        \n\"alt\"\n:\n \n\"short\"\n,\n\n        \n\"options\"\n:\n \n{\n\n            \n\"attributes\"\n:\n \n{\n\n                \n\"align\"\n:\n \n\"absmiddle\"\n,\n\n                \n\"height\"\n:\n \n\"20px\"\n,\n\n                \n\"width\"\n:\n \n\"20px\"\n\n            \n},\n\n            \n\"image_path\"\n:\n \n\"https://assets-cdn.github.com/images/icons/emoji/unicode/\"\n,\n\n            \n\"non_standard_image_path\"\n:\n \n\"https://assets-cdn.github.com/images/icons/emoji/\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nno_nl2br\n\n\nbool\n\n\nTrue\n\n\nIf \nFalse\n, this includes the \nnl2br\n extension.\n\n\n\n\n\n\n\n\n\n\nDeprecated Option\n\n\nIn version \n1.3.0\n, the setting \nno_nl2br\n is now \nTrue\n by default and the setting is deprecated and will be removed in the future. Github's \nGFM\n (which we are emulating) no longer converts new lines to \n<br>\n.  If you prefer having nl2br enabled, you can enable the \nmarkdown.extensions.nl2br\n extension separately.",
            "title": "Github"
        },
        {
            "location": "/extensions/github/#overview",
            "text": "The Github extension is a convenience extension to load up and configure the minimum extensions needed to get a  GFM  feel.  It is not a 1:1 emulation, but some aspects are pretty close.  There is no desire to make it exact, but the feel is nice if you like  GFM  feel; some things may differ slightly.   Tip  For code highlighting, you will also need to load the  markdown.extensions.codehilite  extension yourself as well with  guess_lang=False . You will also need to provide your preferred Pygments style (or configure a JavaScript highlighter).  Though there is no Github style included with this extension, you are most likely able to find a suitable theme online by searching. There are Github styles found at the  pymdown-styles  repo; it contains the original Pygments Github style (github) and the Github 2014 style (github2014) which Github used before they ditched Pygments for their own in-house highlighter.    Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions that get loaded by default:     Extension  Options  Name      Tables   markdown.extensions.tables    magiclink   pymdownx.magiclink    betterem  { \"smart_enable\" :   'all'   }  pymdownx.betterem    tilde  { \"subscript\" :   False   }  pymdownx.tilde    emoji  see  Github Emoji Configuration  pymdownx.emoji    tasklist   pymdownx.tasklist    superfences   pymdownx.superfences      Output Change  HeaderAnchor is no longer included starting in version  1.4.0  as it wasn't really part of the  GFM  syntax, and HeaderAnchor is now deprecated.  HeaderAnchor is an unnecessary extension, and the same end result can be achieved with  markdown.extensions.toc  (with the  permalink  option enabled) and some custom CSS.  This extension was more about the syntax than it was about styling.  If you are not ready to give up the extension, you can manually include the  pymdownx.headeranchor  extension in addition to  pymdownx.github . But in the future, the HeaderAnchor extension will be removed from Pymdown Extensions.",
            "title": "Overview"
        },
        {
            "location": "/extensions/github/#github-emoji-configuration",
            "text": "This is the full, default setup used to get Github emoji images.  This is valid at the time of writing this. Github constantly tweaks how they do things, so in time this may render differently than what they actually do. But this should provide emojis for as long as the CDNs are valid.  import   pymdownx.emoji  extension_configs   =   { \n     \"pymdownx.emoji\" :   { \n         \"emoji_index\" :   pymdownx . emoji . gemoji , \n         \"emoji_generator\" :   pymdownx . emoji . to_png , \n         \"alt\" :   \"short\" , \n         \"options\" :   { \n             \"attributes\" :   { \n                 \"align\" :   \"absmiddle\" , \n                 \"height\" :   \"20px\" , \n                 \"width\" :   \"20px\" \n             }, \n             \"image_path\" :   \"https://assets-cdn.github.com/images/icons/emoji/unicode/\" , \n             \"non_standard_image_path\" :   \"https://assets-cdn.github.com/images/icons/emoji/\" \n         } \n     }  }",
            "title": "Github Emoji Configuration"
        },
        {
            "location": "/extensions/github/#options",
            "text": "Option  Type  Default  Description      no_nl2br  bool  True  If  False , this includes the  nl2br  extension.      Deprecated Option  In version  1.3.0 , the setting  no_nl2br  is now  True  by default and the setting is deprecated and will be removed in the future. Github's  GFM  (which we are emulating) no longer converts new lines to  <br> .  If you prefer having nl2br enabled, you can enable the  markdown.extensions.nl2br  extension separately.",
            "title": "Options"
        },
        {
            "location": "/extensions/githubemoji/",
            "text": "Overview\n\ue157\n\n\n\n\nDeprecated Extension\n\n\nThis extension has been deprecated in version \n1.3.0\n.  Users are encouraged to use the \nEmoji extension\n instead.  This extension will be removed at some time in the future.\n\n\n\n\nGithubEmoji adds support for \nGFM\n emojis.  Using \nGFM\n's emoji syntax, this extension will create image links to Github's emoji assets.  It adds support for all of Github's supported emojis (at the time of writing this).\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\n'emoji'\n\n\nInsert the given class name into the img tag.  To disable class name insertion, provide an empty string.\n\n\n\n\n\n\noffline\n\n\nbool\n\n\nTrue\n\n\nWhen enabled, GithubEmoji will use the last generated emoji table from Github at the time of release.  If for some reason Github changes things and you \nmust\n have the latest, you can set this to \nFalse\n and GithubEmoji will request the latest table via the \nGithub API\n.  It does this with the \nrequests\n module, and it will only be in memory.  As requests is not a required module, if you do not have requests installed, this will default back to offline.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nSince 'online' calls through the Github API are done anonymously, Github will limit the caller to approximately 60 calls in an hour.  There are no plans at this time to add \nOAuth support\n.",
            "title": "GithubEmoji"
        },
        {
            "location": "/extensions/githubemoji/#overview",
            "text": "Deprecated Extension  This extension has been deprecated in version  1.3.0 .  Users are encouraged to use the  Emoji extension  instead.  This extension will be removed at some time in the future.   GithubEmoji adds support for  GFM  emojis.  Using  GFM 's emoji syntax, this extension will create image links to Github's emoji assets.  It adds support for all of Github's supported emojis (at the time of writing this).",
            "title": "Overview"
        },
        {
            "location": "/extensions/githubemoji/#options",
            "text": "Option  Type  Default  Description      css_class  string  'emoji'  Insert the given class name into the img tag.  To disable class name insertion, provide an empty string.    offline  bool  True  When enabled, GithubEmoji will use the last generated emoji table from Github at the time of release.  If for some reason Github changes things and you  must  have the latest, you can set this to  False  and GithubEmoji will request the latest table via the  Github API .  It does this with the  requests  module, and it will only be in memory.  As requests is not a required module, if you do not have requests installed, this will default back to offline.      Note  Since 'online' calls through the Github API are done anonymously, Github will limit the caller to approximately 60 calls in an hour.  There are no plans at this time to add  OAuth support .",
            "title": "Options"
        },
        {
            "location": "/extensions/headeranchor/",
            "text": "Overview\n\ue157\n\n\n\n\nDeprecated Extension\n\n\nThis extension has been deprecated in version \n1.4.0\n.  The same effect can be accomplished using\n\n\nmarkdown.extensions.toc\n with \npermalinks\n and some custom CSS.  It doesn't make sense to continue supporting this as nothing is really gained by specifically doing anchors Github's way.\n\n\n\n\nHeaderAnchor adds anchors to headers in the style of \nGFM\n's header anchors (anchors that appear to the left of the headers when the cursor hovers over the header). The header anchors in this document were all generated with this extension.\n\n\nOptions\n\ue157\n\n\nBy default, HeaderAnchor will use [\nToc\n's][toc] settings (if \nToc\n is being used), but HeaderAnchor can be run without \nToc\n.  HeaderAnchor can also be run along side \nToc\n and ignore \nToc\n's settings; though it is advised to keep \nToc\n and HeaderAnchor's settings in sync to ensure header links properly link.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nstring\n\n\n'-'\n\n\nIf not using \nToc\n, or ignoring \nToc\n's settings, this will specify the word separator used.\n\n\n\n\n\n\nslugify\n\n\nfunction\n\n\nDefault method\n\n\nIf not using \nToc\n, or ignoring \nToc\n's settings, this will specify the function to generate anchors based on header text.  By Default, this will use \nToc\n's default, fallback slugify method, but if for any reason \nToc\n is not installed, HeaderAnchor will fall back to an equivalent method.\n\n\n\n\n\n\nuse_toc_settings\n\n\nbool\n\n\nTrue\n\n\nThis specifies whether HeaderAnchor should get its settings from \nToc\n.  This affects \nslugify\n and \nseparator\n.\n\n\n\n\n\n\n\n\nAlternate Slugify\n\ue157\n\n\nPython Markdown's default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.\n\n\n\n\nNote\n\n\nThis extension has been deprecated. But for legacy compatibility, you can still reference slugs at \npymdownx.headeranchor\n, but slugs are actually found at \npymdownx.slugs\n moving forward.\n\n\n\n\nuslugify\n\ue157\n\n\nIn order to get slugs closer to like \nGFM\n's slugs (in regards to Unicode chars), a slugify has been included at \npymdownx.slugs.uslugify\n.  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override \nToc\n's and/or HeaderAnchor's slugify.\n\n\nuslugify_encoded\n\ue157\n\n\nIf you aren't encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use \npymdownx.slugs.uslugify_encoded\n which will percent encode non-ASCII word chars.  You can use this to override \nToc\n's and/or HeaderAnchor's slugify.\n\n\nCSS\n\ue157\n\n\nHere we will show some example CSS for rendering the header anchors. While Material Icon font is used in this example, you can substitute it with \nOcticons\n for even more of a \nGFM\n feel, or use something else entirely.\n\n\nThe HTML tags with classes are set like this:\n\n\n<\nh1\n \nid\n=\n\"css\"\n>\n\n    \n<\na\n \nname\n=\n\"user-content-css\"\n \nhref\n=\n\"#css\"\n \nclass\n=\n\"headeranchor-link\"\n \naria-hidden\n=\n\"true\"\n>\n\n        \n<\nspan\n \nclass\n=\n\"headeranchor\"\n></\nspan\n>\n\n    \n</\na\n>\n\n    CSS\n\n</\nh1\n>\n\n\n\n\n\n\nWe have two classes to work with:\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheaderanchor-link\n\n\nThis is attached to the actual anchor tag that links to the header.\n\n\n\n\n\n\nheaderanchor\n\n\nThis is the span we attach the anchor character to.\n\n\n\n\n\n\n\n\nThe CSS below is an example.\n\n\n/* Header Anchors */\n\n\n.markdown-body\n \n.headeranchor-link\n \n{\n\n  \nopacity\n:\n \n0\n;\n\n  \nfloat\n:\n \nleft\n;\n\n  \nmargin-top\n:\n  \n-.\n5\nrem\n;\n\n  \npadding-right\n:\n \n4px\n;\n\n  \nmargin-left\n:\n \n-2\n.\n4\nrem\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor-link\n:not\n(\n:hover\n)\n \n{\n\n  \ncolor\n:\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n0\n.\n26\n);\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor-link\n:focus\n \n{\n\n  \noutline\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:target\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh2\n:target\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh3\n:target\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh4\n:target\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh5\n:target\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh6\n:target\n \n.headeranchor-link\n \n{\n\n  \nopacity\n:\n \n1\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\ntransform\n:\ntranslateY\n(\n.\n5\nrem\n);\n\n  \ntransform\n:\ntranslateY\n(\n.\n5\nrem\n);\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh2\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh3\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh4\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh5\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh6\n:hover\n \n.headeranchor-link\n \n{\n\n  \nopacity\n:\n \n1\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\ntransform\n:\ntranslateY\n(\n.\n5\nrem\n);\n\n  \ntransform\n:\ntranslateY\n(\n.\n5\nrem\n);\n\n  \n-\nwebkit\n-\ntransition\n:\n \ncolor\n \n.25s\n,\nopacity\n \n.125s\n \n.25s\n,-\nwebkit\n-\ntransform\n \n.25s\n \n.25s\n;\n\n  \ntransition\n:\n \ncolor\n \n.25s\n,\nopacity\n \n.125s\n \n.25s\n,-\nwebkit\n-\ntransform\n \n.25s\n \n.25s\n;\n\n  \ntransition\n:\n \ntransform\n \n.25s\n \n.25s\n,\ncolor\n \n.25s\n,\nopacity\n \n.125s\n \n.25s\n;\n\n  \ntransition\n:\n \ntransform\n \n.25s\n \n.25s\n,\ncolor\n \n.25s\n,\nopacity\n \n.125s\n \n.25s\n,-\nwebkit\n-\ntransform\n \n.25s\n \n.25s\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor\n \n{\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n  \nfont\n:\n \nnormal\n \nnormal\n \n2\nrem\n \n\"Material Icons\"\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nmoz\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nms\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \nuser\n-\nselect\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor\n:before\n \n{\n\n  \ncontent\n:\n \n'\\E157'\n;\n\n\n}",
            "title": "HeaderAnchor"
        },
        {
            "location": "/extensions/headeranchor/#overview",
            "text": "Deprecated Extension  This extension has been deprecated in version  1.4.0 .  The same effect can be accomplished using  markdown.extensions.toc  with  permalinks  and some custom CSS.  It doesn't make sense to continue supporting this as nothing is really gained by specifically doing anchors Github's way.   HeaderAnchor adds anchors to headers in the style of  GFM 's header anchors (anchors that appear to the left of the headers when the cursor hovers over the header). The header anchors in this document were all generated with this extension.",
            "title": "Overview"
        },
        {
            "location": "/extensions/headeranchor/#options",
            "text": "By default, HeaderAnchor will use [ Toc 's][toc] settings (if  Toc  is being used), but HeaderAnchor can be run without  Toc .  HeaderAnchor can also be run along side  Toc  and ignore  Toc 's settings; though it is advised to keep  Toc  and HeaderAnchor's settings in sync to ensure header links properly link.     Option  Type  Default  Description      separator  string  '-'  If not using  Toc , or ignoring  Toc 's settings, this will specify the word separator used.    slugify  function  Default method  If not using  Toc , or ignoring  Toc 's settings, this will specify the function to generate anchors based on header text.  By Default, this will use  Toc 's default, fallback slugify method, but if for any reason  Toc  is not installed, HeaderAnchor will fall back to an equivalent method.    use_toc_settings  bool  True  This specifies whether HeaderAnchor should get its settings from  Toc .  This affects  slugify  and  separator .",
            "title": "Options"
        },
        {
            "location": "/extensions/headeranchor/#alternate-slugify",
            "text": "Python Markdown's default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.   Note  This extension has been deprecated. But for legacy compatibility, you can still reference slugs at  pymdownx.headeranchor , but slugs are actually found at  pymdownx.slugs  moving forward.",
            "title": "Alternate Slugify"
        },
        {
            "location": "/extensions/headeranchor/#uslugify",
            "text": "In order to get slugs closer to like  GFM 's slugs (in regards to Unicode chars), a slugify has been included at  pymdownx.slugs.uslugify .  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override  Toc 's and/or HeaderAnchor's slugify.",
            "title": "uslugify"
        },
        {
            "location": "/extensions/headeranchor/#uslugify_encoded",
            "text": "If you aren't encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use  pymdownx.slugs.uslugify_encoded  which will percent encode non-ASCII word chars.  You can use this to override  Toc 's and/or HeaderAnchor's slugify.",
            "title": "uslugify_encoded"
        },
        {
            "location": "/extensions/headeranchor/#css",
            "text": "Here we will show some example CSS for rendering the header anchors. While Material Icon font is used in this example, you can substitute it with  Octicons  for even more of a  GFM  feel, or use something else entirely.  The HTML tags with classes are set like this:  < h1   id = \"css\" > \n     < a   name = \"user-content-css\"   href = \"#css\"   class = \"headeranchor-link\"   aria-hidden = \"true\" > \n         < span   class = \"headeranchor\" ></ span > \n     </ a > \n    CSS </ h1 >   We have two classes to work with:     Classes  Description      headeranchor-link  This is attached to the actual anchor tag that links to the header.    headeranchor  This is the span we attach the anchor character to.     The CSS below is an example.  /* Header Anchors */  .markdown-body   .headeranchor-link   { \n   opacity :   0 ; \n   float :   left ; \n   margin-top :    -. 5 rem ; \n   padding-right :   4px ; \n   margin-left :   -2 . 4 rem ; \n   text-decoration :   none ;  }  .markdown-body   .headeranchor-link :not ( :hover )   { \n   color :   rgba ( 0 ,   0 ,   0 ,   0 . 26 );  }  .markdown-body   .headeranchor-link :focus   { \n   outline :   none ;  }  .markdown-body   h1 :target   .headeranchor-link ,  .markdown-body   h2 :target   .headeranchor-link ,  .markdown-body   h3 :target   .headeranchor-link ,  .markdown-body   h4 :target   .headeranchor-link ,  .markdown-body   h5 :target   .headeranchor-link ,  .markdown-body   h6 :target   .headeranchor-link   { \n   opacity :   1 ; \n   text-decoration :   none ; \n   - webkit - transform : translateY ( . 5 rem ); \n   transform : translateY ( . 5 rem );  }  .markdown-body   h1 :hover   .headeranchor-link ,  .markdown-body   h2 :hover   .headeranchor-link ,  .markdown-body   h3 :hover   .headeranchor-link ,  .markdown-body   h4 :hover   .headeranchor-link ,  .markdown-body   h5 :hover   .headeranchor-link ,  .markdown-body   h6 :hover   .headeranchor-link   { \n   opacity :   1 ; \n   text-decoration :   none ; \n   - webkit - transform : translateY ( . 5 rem ); \n   transform : translateY ( . 5 rem ); \n   - webkit - transition :   color   .25s , opacity   .125s   .25s ,- webkit - transform   .25s   .25s ; \n   transition :   color   .25s , opacity   .125s   .25s ,- webkit - transform   .25s   .25s ; \n   transition :   transform   .25s   .25s , color   .25s , opacity   .125s   .25s ; \n   transition :   transform   .25s   .25s , color   .25s , opacity   .125s   .25s ,- webkit - transform   .25s   .25s ;  }  .markdown-body   .headeranchor   { \n   vertical-align :   middle ; \n   font :   normal   normal   2 rem   \"Material Icons\" ; \n   line-height :   1 ; \n   display :   inline - block ; \n   text-decoration :   none ; \n   - webkit - user - select :   none ; \n   - moz - user - select :   none ; \n   - ms - user - select :   none ; \n   user - select :   none ;  }  .markdown-body   .headeranchor :before   { \n   content :   '\\E157' ;  }",
            "title": "CSS"
        },
        {
            "location": "/extensions/inlinehilite/",
            "text": "Overview\n\ue157\n\n\nInlineHilite is an inline version of \nCodeHilite\n which adds inline code highlighting.  Borrowing from CodeHilite's existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: \n`:::language mycode`\n or \n`#!language mycode`\n.  We will call these specifiers (\n#!language\n and \n:::language\n) mock shebangs.\n\n\nWhen using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come \nimmediately\n after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.\n\n\n\n\nTip\n\n\nIf using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.\n\n\nIf you are using a JavaScript highlighter such as \nhighlight.js\n you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the block highlighted code so you can also target and style them with CSS differently.  InlineHilite allows you to have a different \ncss_class\n than what is used by \nCodeHilite\n.\n\n\n\n\nOptions\n\ue157\n\n\nBy default, InlineHilite will use CodeHilite's settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite's settings.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstyle_plain_text\n\n\nbool\n\n\nFalse\n\n\nBy default, InlineHilite will avoid syntax highlighting a code block with no language specified or the \ntext\n language specified.  No classes or style will be applied, but the text will be formatted for a code element.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.\n\n\n\n\n\n\nuse_codehilite_settings\n\n\nbool\n\n\nTrue\n\n\nDetermine whether CodeHilite's settings should be used, or if InlineHilite should use a different set.\n\n\n\n\n\n\nguess_lang\n\n\nbool\n\n\nTrue\n\n\nIf CodeHilite is not used, or if ignoring CodeHilite's settings, determine whether InlineHilite should try to guess a code block's language if not specified.\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\n'inlinehilite'\n\n\nIf ignoring CodeHilite's settings, this is the class name that will be injected into code tags when they are processed.\n\n\n\n\n\n\npygments_style\n\n\nstring\n\n\n'default'\n\n\nIf CodeHilite is not used, or if ignoring CodeHilite's settings, this will be the Pygments' style to use.  When using Pygments, this really only has an effect when used with \nnoclasses\n.\n\n\n\n\n\n\nnoclasses\n\n\nbool\n\n\nFalse\n\n\nIf CodeHilite is not used, or if ignoring CodeHilite's settings, this will cause the styles to directly be written to the tag's style attribute instead of requiring a stylesheet.\n\n\n\n\n\n\nuse_pygments\n\n\nbool\n\n\nTrue\n\n\nIf CodeHilite is not used, or if ignoring CodeHilite's settings, this will control whether Pygments (if available) is used on the code block, or if the block's content will just be escaped and prepped for a JavaScript syntax highlighter.\n\n\n\n\n\n\n\n\nExample\n\ue157\n\n\nHere is some code: `#!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.\n\n\n\n\n\nHere is some code: \nfunction\n \npad\n(\nv\n){\nreturn\n \n(\n'0'\n+\nv\n).\nsplit\n(\n''\n).\nreverse\n().\nsplice\n(\n0\n,\n2\n).\nreverse\n().\njoin\n(\n''\n)}\n\n\nThe mock shebang will be treated like text here: \n#!js var test = 0;\n.",
            "title": "InlineHilite"
        },
        {
            "location": "/extensions/inlinehilite/#overview",
            "text": "InlineHilite is an inline version of  CodeHilite  which adds inline code highlighting.  Borrowing from CodeHilite's existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code:  `:::language mycode`  or  `#!language mycode` .  We will call these specifiers ( #!language  and  :::language ) mock shebangs.  When using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come  immediately  after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.   Tip  If using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.  If you are using a JavaScript highlighter such as  highlight.js  you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the block highlighted code so you can also target and style them with CSS differently.  InlineHilite allows you to have a different  css_class  than what is used by  CodeHilite .",
            "title": "Overview"
        },
        {
            "location": "/extensions/inlinehilite/#options",
            "text": "By default, InlineHilite will use CodeHilite's settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite's settings.     Option  Type  Default  Description      style_plain_text  bool  False  By default, InlineHilite will avoid syntax highlighting a code block with no language specified or the  text  language specified.  No classes or style will be applied, but the text will be formatted for a code element.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.    use_codehilite_settings  bool  True  Determine whether CodeHilite's settings should be used, or if InlineHilite should use a different set.    guess_lang  bool  True  If CodeHilite is not used, or if ignoring CodeHilite's settings, determine whether InlineHilite should try to guess a code block's language if not specified.    css_class  string  'inlinehilite'  If ignoring CodeHilite's settings, this is the class name that will be injected into code tags when they are processed.    pygments_style  string  'default'  If CodeHilite is not used, or if ignoring CodeHilite's settings, this will be the Pygments' style to use.  When using Pygments, this really only has an effect when used with  noclasses .    noclasses  bool  False  If CodeHilite is not used, or if ignoring CodeHilite's settings, this will cause the styles to directly be written to the tag's style attribute instead of requiring a stylesheet.    use_pygments  bool  True  If CodeHilite is not used, or if ignoring CodeHilite's settings, this will control whether Pygments (if available) is used on the code block, or if the block's content will just be escaped and prepped for a JavaScript syntax highlighter.",
            "title": "Options"
        },
        {
            "location": "/extensions/inlinehilite/#example",
            "text": "Here is some code: `#!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.  Here is some code:  function   pad ( v ){ return   ( '0' + v ). split ( '' ). reverse (). splice ( 0 , 2 ). reverse (). join ( '' )}  The mock shebang will be treated like text here:  #!js var test = 0; .",
            "title": "Example"
        },
        {
            "location": "/extensions/magiclink/",
            "text": "Overview\n\ue157\n\n\nMagicLink adds scans for URLs and generates proper HTML links.  No special syntax is required, you just type or paste links.  MagicLink auto-link HTML, FTP, and email links.\n\n\nExamples\n\ue157\n\n\nThis requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/pymdown-extensions.\n\nOr even an email address fake.email@email.com.\n\n\n\n\n\nThis requires no special syntax.\n\n\nJust paste links directly in the document like this: \nhttps://github.com/facelessuser/pymdown-extensions\n.\n\n\nOr even an email address \nfake.email@email.com\n.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhide_protocol\n\n\nbool\n\n\nFalse\n\n\nIf \nTrue\n, links are displayed without the initial ftp://, http:// or https://",
            "title": "MagicLink"
        },
        {
            "location": "/extensions/magiclink/#overview",
            "text": "MagicLink adds scans for URLs and generates proper HTML links.  No special syntax is required, you just type or paste links.  MagicLink auto-link HTML, FTP, and email links.",
            "title": "Overview"
        },
        {
            "location": "/extensions/magiclink/#examples",
            "text": "This requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/pymdown-extensions.\n\nOr even an email address fake.email@email.com.  This requires no special syntax.  Just paste links directly in the document like this:  https://github.com/facelessuser/pymdown-extensions .  Or even an email address  fake.email@email.com .",
            "title": "Examples"
        },
        {
            "location": "/extensions/magiclink/#options",
            "text": "Option  Type  Default  Description      hide_protocol  bool  False  If  True , links are displayed without the initial ftp://, http:// or https://",
            "title": "Options"
        },
        {
            "location": "/extensions/mark/",
            "text": "Overview\n\ue157\n\n\nMark adds the ability to insert \n<\nmark\n></\nmark\n>\n tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of \nmark\n models that of \nbetterem\n.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_mark\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with mark characters: \n==mark==me==\n \u2192 \nmark==me\n.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nMark adds \nmark\n tags when inline text is surrounded by double equal signs: \n==mark me==\n \u2192 \nmark me\n.  It can optionally be configured to use smart logic: \n==mark==me==\n \u2192 \nmark==me\n.",
            "title": "Mark"
        },
        {
            "location": "/extensions/mark/#overview",
            "text": "Mark adds the ability to insert  < mark ></ mark >  tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of  mark  models that of  betterem .",
            "title": "Overview"
        },
        {
            "location": "/extensions/mark/#options",
            "text": "Option  Type  Default  Description      smart_mark  bool  True  Use smart logic with mark characters:  ==mark==me==  \u2192  mark==me .",
            "title": "Options"
        },
        {
            "location": "/extensions/mark/#examples",
            "text": "Mark adds  mark  tags when inline text is surrounded by double equal signs:  ==mark me==  \u2192  mark me .  It can optionally be configured to use smart logic:  ==mark==me==  \u2192  mark==me .",
            "title": "Examples"
        },
        {
            "location": "/extensions/pathconverter/",
            "text": "Overview\n\ue157\n\n\nPathConverter is an extension that can convert local, relative reference paths to absolute or relative paths for links and images. It was originally written for a project that wanted to preview the markdown by rendering it in a temporary location. This extension allowed the paths to be converted to work from the temporary location. This context is important when trying to understand why this extension was created. It's actual usage is limited to situations like this, so it isn't something that would get used in most normal scenarios.\n\n\nPathConverter takes an absolute base path. The base path is the Markdown content's assumed location at time of conversion.  The path is used as a reference for locating images and referenced files relative to the Markdown content.  Essentially, the references in the Markdown file would currently be relative to this base path at conversion time. The references existence is not verified, but the it is analyze to determine if it is a relative path, and if so, it is eligible for conversion. In the case of \nabsolute\n mode, the relative Markdown references would be converted to absolute paths.\n\n\nIf PathConverter is in \nrelative\n mode, the extension will also need a relative path to convert to.  The relative path must be an absolute path to the location the HTML is assumed to live after conversion.  If the references paths can be confirmed to be relative, those references will be converted to relative paths that align to the provided relative path parameter. The idea is that a Markdown file could be found in a location that is not meant to be its final location. References within the Markdown source would link relative to the base path, but they would then be converted to be relative to it's new location \u2013 the relative path parameter.\n\n\nCurrently PathConverter will search desired tags for \nhref\n and \nsrc\n attributes. By default, only \na\n, \nscript\n, \nimg\n, and \nlink\n tags are searched.\n\n\nPathConverter is also intelligent enough to only operate on the file portion of the reference link.  Consider the following scenario:  \npath/to/file.html#header-to-jump-to\n.  In the example, \npath/to/file.html\n will be converted, but \n#header-to-jump-to\n will be left unaltered.\n\n\nAs mentioned before, the use cases for something like this are limited, but if you have a situation that lends well to something like this, PathConverter can help.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n''\n\n\nA string indicating an absolute base path to be used to find referenced files.\n\n\n\n\n\n\nrelative_path\n\n\nstring\n\n\n''\n\n\nA string indicating an absolute path that the references are to be relative to (not used when \nabsolute\n is set \nTrue\n).\n\n\n\n\n\n\nabsolute\n\n\nbool\n\n\nFalse\n\n\nDetermines whether paths are converted to absolute or relative.\n\n\n\n\n\n\ntags\n\n\nstring\n\n\n'a script img link'\n\n\nTags (separated by spaces) that are searched to find \nhref\n and \nsrc\n attributes.",
            "title": "PathConverter"
        },
        {
            "location": "/extensions/pathconverter/#overview",
            "text": "PathConverter is an extension that can convert local, relative reference paths to absolute or relative paths for links and images. It was originally written for a project that wanted to preview the markdown by rendering it in a temporary location. This extension allowed the paths to be converted to work from the temporary location. This context is important when trying to understand why this extension was created. It's actual usage is limited to situations like this, so it isn't something that would get used in most normal scenarios.  PathConverter takes an absolute base path. The base path is the Markdown content's assumed location at time of conversion.  The path is used as a reference for locating images and referenced files relative to the Markdown content.  Essentially, the references in the Markdown file would currently be relative to this base path at conversion time. The references existence is not verified, but the it is analyze to determine if it is a relative path, and if so, it is eligible for conversion. In the case of  absolute  mode, the relative Markdown references would be converted to absolute paths.  If PathConverter is in  relative  mode, the extension will also need a relative path to convert to.  The relative path must be an absolute path to the location the HTML is assumed to live after conversion.  If the references paths can be confirmed to be relative, those references will be converted to relative paths that align to the provided relative path parameter. The idea is that a Markdown file could be found in a location that is not meant to be its final location. References within the Markdown source would link relative to the base path, but they would then be converted to be relative to it's new location \u2013 the relative path parameter.  Currently PathConverter will search desired tags for  href  and  src  attributes. By default, only  a ,  script ,  img , and  link  tags are searched.  PathConverter is also intelligent enough to only operate on the file portion of the reference link.  Consider the following scenario:   path/to/file.html#header-to-jump-to .  In the example,  path/to/file.html  will be converted, but  #header-to-jump-to  will be left unaltered.  As mentioned before, the use cases for something like this are limited, but if you have a situation that lends well to something like this, PathConverter can help.",
            "title": "Overview"
        },
        {
            "location": "/extensions/pathconverter/#options",
            "text": "Option  Type  Default  Description      base_path  string  ''  A string indicating an absolute base path to be used to find referenced files.    relative_path  string  ''  A string indicating an absolute path that the references are to be relative to (not used when  absolute  is set  True ).    absolute  bool  False  Determines whether paths are converted to absolute or relative.    tags  string  'a script img link'  Tags (separated by spaces) that are searched to find  href  and  src  attributes.",
            "title": "Options"
        },
        {
            "location": "/extensions/plainhtml/",
            "text": "Overview\n\ue157\n\n\nPlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like \nstyle\n, \nid\n, \nclass\n, and \non<name>\n attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to strip out just comments or just attributes etc.\n\n\nBecause comments aren't stripped until the end in a post-processing step, they are present throughout the entire Markdown conversion process and could possibly affect parsing, so be careful how you generally insert comments.\n\n\n\n\nWarning\n\n\nThis is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like \nbleach\n.\n\n\n\n\nOptions\n\ue157\n\n\nBy default, PlainHtml strips the following attributes: \nstyle\n, \nid\n, \nclass\n, and \non<name>\n.  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstrip_comments\n\n\nbool\n\n\nTrue\n\n\nStrip HTML comments during post process.\n\n\n\n\n\n\nstrip_js_on_attributes\n\n\nbool\n\n\nTrue\n\n\nStrip JavaScript script attributes with the pattern on* during post process.\n\n\n\n\n\n\nstrip_attributes\n\n\nstring\n\n\n'id class style'\n\n\nA string specifying attribute names separated by spaces.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\n<!-- We are only allowing strip_comments and strip_js_on_attributes\n     in this example. -->\n\nHere is a test. You can verify the result by inspecting the code in your browser.\n\n\n\nHere is a test. You can verify the result by inspecting the code in your browser.",
            "title": "PlainHtml"
        },
        {
            "location": "/extensions/plainhtml/#overview",
            "text": "PlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like  style ,  id ,  class , and  on<name>  attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to strip out just comments or just attributes etc.  Because comments aren't stripped until the end in a post-processing step, they are present throughout the entire Markdown conversion process and could possibly affect parsing, so be careful how you generally insert comments.   Warning  This is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like  bleach .",
            "title": "Overview"
        },
        {
            "location": "/extensions/plainhtml/#options",
            "text": "By default, PlainHtml strips the following attributes:  style ,  id ,  class , and  on<name> .  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.     Option  Type  Default  Description      strip_comments  bool  True  Strip HTML comments during post process.    strip_js_on_attributes  bool  True  Strip JavaScript script attributes with the pattern on* during post process.    strip_attributes  string  'id class style'  A string specifying attribute names separated by spaces.",
            "title": "Options"
        },
        {
            "location": "/extensions/plainhtml/#examples",
            "text": "<!-- We are only allowing strip_comments and strip_js_on_attributes\n     in this example. -->\n\nHere is a test. You can verify the result by inspecting the code in your browser.  Here is a test. You can verify the result by inspecting the code in your browser.",
            "title": "Examples"
        },
        {
            "location": "/extensions/progressbar/",
            "text": "Overview\n\ue157\n\n\nProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown's built in \nattr_list\n extension.  Though progress bars are rendered as block items, it accepts attr_list's inline format.\n\n\nThe basic syntax for progress bars is: \n[= <percentage or fraction> \"optional single or double quoted title\"]\n.  The opening \n[\n can be followed by one or more \n=\n characters. After the \n=\n char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlevel_class\n\n\nbool\n\n\nTrue\n\n\nEnables or disables the level class feature.  The level class feature adds level classes in increments of 20.\n\n\n\n\n\n\nadd_classes\n\n\nstring\n\n\n''\n\n\nThis option accepts a string of classes separated by spaces.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\n| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0% \"0%\"]{: .candystripe-animate}              |\n|Animated: 5%        |[=5% \"5%\"]{: .candystripe-animate}              |\n|Animated: 25%       |[=25% \"25%\"]{: .candystripe-animate}            |\n|Animated: 45%       |[=45% \"45%\"]{: .candystripe-animate}            |\n|Animated: 65%       |[=65% \"65%\"]{: .candystripe-animate}            |\n|Animated: 85%       |[=85% \"85%\"]{: .candystripe-animate}            |\n|Animated: 100%      |[=100% \"100%\"]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537 \"212.2/537 Testing division\"]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50% \"I'm a block!\"]After               |\n|Animated with Gloss |[= 50% \"Glossy\"]{: .candystripe-animate .gloss} |\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nAnimated: 0%\n\n\n\n\n\n\n\n\n0%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 5%\n\n\n\n\n\n\n\n\n5%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 25%\n\n\n\n\n\n\n\n\n25%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 45%\n\n\n\n\n\n\n\n\n45%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 65%\n\n\n\n\n\n\n\n\n65%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 85%\n\n\n\n\n\n\n\n\n85%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 100%\n\n\n\n\n\n\n\n\n100%\n\n\n\n\n\n\n\n\n\n\n\n\nDivision Percentage\n\n\n\n\n\n\n\n\n212.2/537 Testing division\n\n\n\n\n\n\n\n\n\n\n\n\nNo Label\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInline\n\n\nBefore\n\n\n\n\nI'm a block!\n\n\n\n\nAfter\n\n\n\n\n\n\nAnimated with Gloss\n\n\n\n\n\n\n\n\nGlossy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS\n\ue157\n\n\nThe general HTML structure of the progress bar is as follows:\n\n\n<\ndiv\n \nclass\n=\n\"progress progress-100plus\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"progress-bar\"\n \nstyle\n=\n\"width:100.00%\"\n>\n\n        \n<\np\n \nclass\n=\n\"progress-label\"\n>\n100%\n</\np\n>\n\n    \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprogress\n\n\nThis is attached to the outer \ndiv\n container of the progress bar.\n\n\n\n\n\n\nprogress-bar\n\n\nThis is attached to the inner \ndiv\n whose width is adjusted to give the visual appearance of a bar at the desired percentage.\n\n\n\n\n\n\nprogress-label\n\n\nThis is attached to the \np\n element that will contain the desired label.\n\n\n\n\n\n\nprogress-<integer>plus\n\n\nThis is an optional class that indicates the percentage of the progress bar by increments of 20.\n\n\n\n\n\n\n\n\n/* Progress Bars */\n\n\n.markdown-body\n \n.progress\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nwidth\n:\n \n300px\n;\n\n  \nmargin\n:\n \n10px\n \n0\n;\n\n  \nheight\n:\n \n24px\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#ededed\n;\n\n  \nposition\n:\n \nrelative\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n-1px\n \n1px\n \n3px\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-label\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntext-align\n:\n \ncenter\n;\n\n  \nfont-weight\n:\n \nbold\n;\n\n  \nwidth\n:\n \n100%\n;\n \nmargin\n:\n \n0\n;\n\n  \nline-height\n:\n \n24px\n \n!important\n;\n\n  \ncolor\n:\n \n#333\n;\n\n  \ntext-shadow\n:\n \n1px\n \n1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n1px\n \n0\n \n#fefefe\n,\n \n1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n0\n \n1px\n \n0\n \n#fefefe\n,\n \n0\n \n-1px\n \n0\n \n#fefefe\n,\n \n1px\n \n0\n \n0\n \n#fefefe\n,\n \n-1px\n \n0\n \n0\n \n#fefefe\n,\n \n1px\n \n1px\n \n2px\n \n#000\n;\n\n  \n-\nwebkit\n-\nfont\n-\nsmoothing\n:\n \nantialiased\n \n!important\n;\n\n  \nwhite-space\n:\n \nnowrap\n;\n\n  \noverflow\n:\n \nhidden\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-bar\n \n{\n\n  \nheight\n:\n \n24px\n;\n\n  \nfloat\n:\n \nleft\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#96c6d7\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n0\n \n1px\n \n0\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n5\n)\n,\n \ninset\n \n0\n \n-1px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n  \nbackground\n-\nsize\n:\n \n30px\n \n30px\n;\n\n  \nbackground-image\n:\n \n-\nwebkit\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n\n    \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n\n    \ntransparent\n \n77%\n,\n \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nmoz\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nms\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\no\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-100plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#a6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-80plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-60plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7c896\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-40plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7a796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-20plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d796a6\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-0plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c25f77\n;\n\n\n}\n\n\n\n.markdown-body\n \n.candystripe-animate\n \n.progress-bar\n{\n\n  \n-\nwebkit\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \n-\nmoz\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n\n}\n\n\n\n@-webkit-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@-moz-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n.markdown-body\n \n.gloss\n \n.progress-bar\n \n{\n\n  \nbox\n-\nshadow\n:\n\n    \ninset\n \n0\n \n4px\n \n12px\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n7\n)\n,\n\n    \ninset\n \n0\n \n-12px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n05\n);\n\n\n}",
            "title": "ProgressBar"
        },
        {
            "location": "/extensions/progressbar/#overview",
            "text": "ProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown's built in  attr_list  extension.  Though progress bars are rendered as block items, it accepts attr_list's inline format.  The basic syntax for progress bars is:  [= <percentage or fraction> \"optional single or double quoted title\"] .  The opening  [  can be followed by one or more  =  characters. After the  =  char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.",
            "title": "Overview"
        },
        {
            "location": "/extensions/progressbar/#options",
            "text": "Option  Type  Default  Description      level_class  bool  True  Enables or disables the level class feature.  The level class feature adds level classes in increments of 20.    add_classes  string  ''  This option accepts a string of classes separated by spaces.",
            "title": "Options"
        },
        {
            "location": "/extensions/progressbar/#examples",
            "text": "| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0% \"0%\"]{: .candystripe-animate}              |\n|Animated: 5%        |[=5% \"5%\"]{: .candystripe-animate}              |\n|Animated: 25%       |[=25% \"25%\"]{: .candystripe-animate}            |\n|Animated: 45%       |[=45% \"45%\"]{: .candystripe-animate}            |\n|Animated: 65%       |[=65% \"65%\"]{: .candystripe-animate}            |\n|Animated: 85%       |[=85% \"85%\"]{: .candystripe-animate}            |\n|Animated: 100%      |[=100% \"100%\"]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537 \"212.2/537 Testing division\"]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50% \"I'm a block!\"]After               |\n|Animated with Gloss |[= 50% \"Glossy\"]{: .candystripe-animate .gloss} |     Test  Result      Animated: 0%     0%       Animated: 5%     5%       Animated: 25%     25%       Animated: 45%     45%       Animated: 65%     65%       Animated: 85%     85%       Animated: 100%     100%       Division Percentage     212.2/537 Testing division       No Label           Inline  Before   I'm a block!   After    Animated with Gloss     Glossy",
            "title": "Examples"
        },
        {
            "location": "/extensions/progressbar/#css",
            "text": "The general HTML structure of the progress bar is as follows:  < div   class = \"progress progress-100plus\" > \n     < div   class = \"progress-bar\"   style = \"width:100.00%\" > \n         < p   class = \"progress-label\" > 100% </ p > \n     </ div >  </ div >      Classes  Description      progress  This is attached to the outer  div  container of the progress bar.    progress-bar  This is attached to the inner  div  whose width is adjusted to give the visual appearance of a bar at the desired percentage.    progress-label  This is attached to the  p  element that will contain the desired label.    progress-<integer>plus  This is an optional class that indicates the percentage of the progress bar by increments of 20.     /* Progress Bars */  .markdown-body   .progress   { \n   display :   block ; \n   width :   300px ; \n   margin :   10px   0 ; \n   height :   24px ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #ededed ; \n   position :   relative ; \n   box - shadow :   inset   -1px   1px   3px   rgba ( 0 ,   0 ,   0 ,   . 1 );  }  .markdown-body   .progress-label   { \n   position :   absolute ; \n   text-align :   center ; \n   font-weight :   bold ; \n   width :   100% ;   margin :   0 ; \n   line-height :   24px   !important ; \n   color :   #333 ; \n   text-shadow :   1px   1px   0   #fefefe ,   -1px   -1px   0   #fefefe ,   -1px   1px   0   #fefefe ,   1px   -1px   0   #fefefe ,   0   1px   0   #fefefe ,   0   -1px   0   #fefefe ,   1px   0   0   #fefefe ,   -1px   0   0   #fefefe ,   1px   1px   2px   #000 ; \n   - webkit - font - smoothing :   antialiased   !important ; \n   white-space :   nowrap ; \n   overflow :   hidden ;  }  .markdown-body   .progress-bar   { \n   height :   24px ; \n   float :   left ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #96c6d7 ; \n   box - shadow :   inset   0   1px   0   rgba ( 255 ,   255 ,   255 ,   . 5 ) ,   inset   0   -1px   0   rgba ( 0 ,   0 ,   0 ,   . 1 ); \n   background - size :   30px   30px ; \n   background-image :   - webkit - linear - gradient ( \n     135 deg ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   27% , \n     transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% , \n     transparent   77% ,   transparent \n   ); \n   background-image :   - moz - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - ms - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - o - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   );  }  .markdown-body   .progress-100plus   .progress-bar   { \n   background-color :   #a6d796 ;  }  .markdown-body   .progress-80plus   .progress-bar   { \n   background-color :   #c6d796 ;  }  .markdown-body   .progress-60plus   .progress-bar   { \n   background-color :   #d7c896 ;  }  .markdown-body   .progress-40plus   .progress-bar   { \n   background-color :   #d7a796 ;  }  .markdown-body   .progress-20plus   .progress-bar   { \n   background-color :   #d796a6 ;  }  .markdown-body   .progress-0plus   .progress-bar   { \n   background-color :   #c25f77 ;  }  .markdown-body   .candystripe-animate   .progress-bar { \n   - webkit - animation :   animate - stripes   3s   linear   infinite ; \n   - moz - animation :   animate - stripes   3s   linear   infinite ; \n   animation :   animate - stripes   3s   linear   infinite ;  }  @-webkit-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @-moz-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  .markdown-body   .gloss   .progress-bar   { \n   box - shadow : \n     inset   0   4px   12px   rgba ( 255 ,   255 ,   255 ,   . 7 ) , \n     inset   0   -12px   0   rgba ( 0 ,   0 ,   0 ,   . 05 );  }",
            "title": "CSS"
        },
        {
            "location": "/extensions/pymdown/",
            "text": "Overview\n\ue157\n\n\n\n\nDeprecated Extension\n\n\nThis is extension is deprecated in version \n1.3.0\n and will be removed in the future.  It is advised individually include the desired extensions instead of relying on \npymdownx.pymdown\n to include them.\n\n\n\n\nThe PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nExtensions:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n\n\npymdownx.tilde\n\n\n\n\n\n\ncaret\n\n\n\n\npymdownx.caret\n\n\n\n\n\n\nmark\n\n\n\n\npymdownx.mark\n\n\n\n\n\n\nsmartsymbols\n\n\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\nemoji\n\n\n\n\npymdownx.emoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nprogressbar\n\n\n\n\npymdownx.progressbar\n\n\n\n\n\n\nheaderanchor\n\n\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\narithmatex\n\n\n\n\npymdownx.arithmatex",
            "title": "PyMdown"
        },
        {
            "location": "/extensions/pymdown/#overview",
            "text": "Deprecated Extension  This is extension is deprecated in version  1.3.0  and will be removed in the future.  It is advised individually include the desired extensions instead of relying on  pymdownx.pymdown  to include them.   The PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!   Extensions:     Extension  Options  Name      magiclink   pymdownx.magiclink    betterem   pymdownx.betterem    tilde   pymdownx.tilde    caret   pymdownx.caret    mark   pymdownx.mark    smartsymbols   pymdownx.smartsymbols    emoji   pymdownx.emoji    tasklist   pymdownx.tasklist    progressbar   pymdownx.progressbar    headeranchor   pymdownx.headeranchor    superfences   pymdownx.superfences    arithmatex   pymdownx.arithmatex",
            "title": "Overview"
        },
        {
            "location": "/extensions/smartsymbols/",
            "text": "Overview\n\ue157\n\n\nSmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more \"smarty-pants\" like replacements.  It is meant to be used along side Python Markdown's \nsmarty\n extension not to replace.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrademark\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for trademark symbol.\n\n\n\n\n\n\ncopyright\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for copyright symbol.\n\n\n\n\n\n\nregistered\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for registered symbol.\n\n\n\n\n\n\ncare_of\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for care / of.\n\n\n\n\n\n\nplusminus\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for plus / minus.\n\n\n\n\n\n\narrows\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for creating arrows.\n\n\n\n\n\n\nnotequal\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for not equal symbol.\n\n\n\n\n\n\nfractions\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for common fractions.\n\n\n\n\n\n\nordinal_numbers\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for ordinal numbers.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\n\n\n\n\n\n\nMarkdown\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n(tm)\n\n\n\u2122\n\n\n\n\n\n\n(c)\n\n\n\u00a9\n\n\n\n\n\n\n(r)\n\n\n\u00ae\n\n\n\n\n\n\nc/o\n\n\n\u2105\n\n\n\n\n\n\n+/-\n\n\n\u00b1\n\n\n\n\n\n\n-->\n\n\n\u2192\n\n\n\n\n\n\n<--\n\n\n\u2190\n\n\n\n\n\n\n<-->\n\n\n\u2194\n\n\n\n\n\n\n=/=\n\n\n\u2260\n\n\n\n\n\n\n1/4, etc.\n\n\n\u00bc, etc.\n\n\n\n\n\n\n1st 2nd etc.\n\n\n1\nst\n 2\nnd\n etc.",
            "title": "SmartSymbols"
        },
        {
            "location": "/extensions/smartsymbols/#overview",
            "text": "SmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more \"smarty-pants\" like replacements.  It is meant to be used along side Python Markdown's  smarty  extension not to replace.",
            "title": "Overview"
        },
        {
            "location": "/extensions/smartsymbols/#options",
            "text": "Option  Type  Default  Description      trademark  bool  True  Add syntax for trademark symbol.    copyright  bool  True  Add syntax for copyright symbol.    registered  bool  True  Add syntax for registered symbol.    care_of  bool  True  Add syntax for care / of.    plusminus  bool  True  Add syntax for plus / minus.    arrows  bool  True  Add syntax for creating arrows.    notequal  bool  True  Add syntax for not equal symbol.    fractions  bool  True  Add syntax for common fractions.    ordinal_numbers  bool  True  Add syntax for ordinal numbers.",
            "title": "Options"
        },
        {
            "location": "/extensions/smartsymbols/#examples",
            "text": "Markdown  Result      (tm)  \u2122    (c)  \u00a9    (r)  \u00ae    c/o  \u2105    +/-  \u00b1    -->  \u2192    <--  \u2190    <-->  \u2194    =/=  \u2260    1/4, etc.  \u00bc, etc.    1st 2nd etc.  1 st  2 nd  etc.",
            "title": "Examples"
        },
        {
            "location": "/extensions/snippets/",
            "text": "Overview\n\ue157\n\n\nSnippets is an extension to insert markdown or HTML snippets into another markdown file. This is done by placing the following markup: \n---8<--- filename.md\n.  As you can see, the notation is an ASCII scissor cutting a line followed by the file name.  The dashes can be as few as 2 (\n--8<--\n) or longer if desired (\n--8<---------\n); whatever your preference is.  The important thing is that it must reside on a line by itself.  If it is indented, the content will be indented to that level as well.\n\n\nSnippets can also handle recursive file inclusion.  And if Snippets encounters the same file in the current stack, it will avoid re-processing it in order to avoid an infinite loop (or crash on hitting max recursion depth).\n\n\nSnippets is run as a preprocessor, so if a snippet is found in a fenced code block etc., it will still get processed.  If the specified file cannot be found, the the markup will be left in the file.\n\n\nSnippets is great for situations where you have content you need to insert into multiple documents.  For instance, this document keeps all its hyperlinks in a separate file.  Then includes it at the bottom of a document that uses one or more of the links. If a link needs to be updated, it can be updated in one location.\n\n\n\n\nNote\n\n\nThis syntax is experimental. While the functionality of the extension is not likely to change, the syntax could if it becomes problematic (or at least an alternative syntax might be provided).\n\n\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n'.'\n\n\nA string indicating a base path to be used resolve snippet locations.\n\n\n\n\n\n\nencoding\n\n\nstring\n\n\nutf-8\n\n\nEncoding to use when reading in the snippets.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nAssuming you have a snippet named \nmy_snippet.md\n, and the content of \nmy_snippet.md\n is as follows:\n\n\nA snippet\n\n\n\n\n\nAlso assuming a base path that points to a folder where both your markdown and your snippet both reside. We can enter this content to load our snippet.\n\n\nHere we will include a snippet.\n\n---8<--- my_snippet.md\n\n\n\n\n\nThe result will be:\n\n\nHere we will include a snippet.\n\nA snippet",
            "title": "Snippets"
        },
        {
            "location": "/extensions/snippets/#overview",
            "text": "Snippets is an extension to insert markdown or HTML snippets into another markdown file. This is done by placing the following markup:  ---8<--- filename.md .  As you can see, the notation is an ASCII scissor cutting a line followed by the file name.  The dashes can be as few as 2 ( --8<-- ) or longer if desired ( --8<--------- ); whatever your preference is.  The important thing is that it must reside on a line by itself.  If it is indented, the content will be indented to that level as well.  Snippets can also handle recursive file inclusion.  And if Snippets encounters the same file in the current stack, it will avoid re-processing it in order to avoid an infinite loop (or crash on hitting max recursion depth).  Snippets is run as a preprocessor, so if a snippet is found in a fenced code block etc., it will still get processed.  If the specified file cannot be found, the the markup will be left in the file.  Snippets is great for situations where you have content you need to insert into multiple documents.  For instance, this document keeps all its hyperlinks in a separate file.  Then includes it at the bottom of a document that uses one or more of the links. If a link needs to be updated, it can be updated in one location.   Note  This syntax is experimental. While the functionality of the extension is not likely to change, the syntax could if it becomes problematic (or at least an alternative syntax might be provided).",
            "title": "Overview"
        },
        {
            "location": "/extensions/snippets/#options",
            "text": "Option  Type  Default  Description      base_path  string  '.'  A string indicating a base path to be used resolve snippet locations.    encoding  string  utf-8  Encoding to use when reading in the snippets.",
            "title": "Options"
        },
        {
            "location": "/extensions/snippets/#examples",
            "text": "Assuming you have a snippet named  my_snippet.md , and the content of  my_snippet.md  is as follows:  A snippet  Also assuming a base path that points to a folder where both your markdown and your snippet both reside. We can enter this content to load our snippet.  Here we will include a snippet.\n\n---8<--- my_snippet.md  The result will be:  Here we will include a snippet.\n\nA snippet",
            "title": "Examples"
        },
        {
            "location": "/extensions/superfences/",
            "text": "Overview\n\ue157\n\n\nSuperFences provides 4 features:\n\n\n\n\nThe ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see \nLimitations\n for more info).\n\n\nSpecial UML flowchart fence via the \nflow\n language specifier.\n\n\nSpecial UML sequence diagram via the \nsequence\n language specifier.\n\n\nThe ability to disable indented code blocks in favor of only using the fenced variant (off by default).\n\n\n\n\nAll features can be turned on or off.\n\n\nSuperFences relies on the \nCodeHilite\n extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting is desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter \ncould\n be used.\n\n\n\n\nReminder\n\n\nRemember to read the \nUsage Notes\n for information that may be relevant when using this extension!\n\n\n\n\nNested Fenced Blocks\n\ue157\n\n\nFenced blocks require all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at the very least, the first line of the fenced block needs to have the appropriate number of \n>\n characters signifying the quote depth.\n\n\n> ```\n  a fenced block\n  ```\n\n\n\n\n\nKeep in mind that too many blank lines will cause a blockquote to terminate, so remember to use \n>\n markers accordingly if not marking every line.\n\n\n> ```\n  a fenced block\n\n> with blank lines\n  ```\n\n\n\n\n\nIf using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.\n\n\n-<space>\n    ```\n    a fenced block\n    ```\n\nDefinition\n:<space>\n    ```\n    a fenced block\n    ```\n\n\n\n\n\nUML Diagrams\n\ue157\n\n\nWhen using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:\n\n\nflowcharts:\n\n\n\n\nraphael.js\n\n\nflowchart.js\n\n\n\n\nsequence diagrams:\n\n\n\n\nraphael.js\n\n\nunderscore.js\n\n\nsequence-diagram.js\n\n\n\n\nAll of these libraries can be included using a CDN (you can use the version of your choice):\n\n\n<\nscript\n \nsrc\n=\n\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.4/raphael-min.js\"\n></\nscript\n>\n\n\n<\nscript\n \nsrc\n=\n\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"\n></\nscript\n>\n\n\n<\nscript\n \nsrc\n=\n\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"\n></\nscript\n>\n\n\n<\nscript\n \nsrc\n=\n\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.4.2/flowchart.min.js\"\n></\nscript\n>\n\n\n\n\n\n\nSimply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  We are going to show some examples (\numl-converter.js\n, \nflow-loader.js\n, and \nsequence-loader.js\n) that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.\n\n\n/* uml-converter.js */\n\n\n(\nfunction\n \n(\nwin\n,\n \ndoc\n)\n \n{\n\n  \nwin\n.\nconvertUML\n \n=\n \nfunction\n(\nclassName\n,\n \nconverter\n,\n \nsettings\n)\n \n{\n\n    \nvar\n \ncharts\n \n=\n \ndoc\n.\nquerySelectorAll\n(\n\"pre.\"\n \n+\n \nclassName\n),\n\n        \narr\n \n=\n \n[],\n\n        \ni\n,\n \nj\n,\n \nmaxItem\n,\n \ndiagaram\n,\n \ntext\n,\n \ncurNode\n;\n\n\n    \n// Is there a settings object?\n\n    \nif\n \n(\nsettings\n \n===\n \nvoid\n \n0\n)\n \n{\n\n        \nsettings\n \n=\n \n{};\n\n    \n}\n\n\n    \n// Make sure we are dealing with an array\n\n    \nfor\n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \ncharts\n.\nlength\n;\n \ni\n \n<\n \nmaxItem\n;\n \ni\n++\n)\n \narr\n.\npush\n(\ncharts\n[\ni\n])\n\n\n    \n// Find the UML source element and get the text\n\n    \nfor\n \n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \narr\n.\nlength\n;\n \ni\n \n<\n \nmaxItem\n;\n \ni\n++\n)\n \n{\n\n        \nchildEl\n \n=\n \narr\n[\ni\n].\nfirstChild\n;\n\n        \nparentEl\n \n=\n \nchildEl\n.\nparentNode\n;\n\n        \ntext\n \n=\n \n\"\"\n;\n\n        \nfor\n \n(\nj\n \n=\n \n0\n;\n \nj\n \n<\n \nchildEl\n.\nchildNodes\n.\nlength\n;\n \nj\n++\n)\n \n{\n\n            \ncurNode\n \n=\n \nchildEl\n.\nchildNodes\n[\nj\n];\n\n            \nwhitespace\n \n=\n \n/^\\s*$/\n;\n\n            \nif\n \n(\ncurNode\n.\nnodeName\n \n===\n \n\"#text\"\n \n&&\n \n!\n(\nwhitespace\n.\ntest\n(\ncurNode\n.\nnodeValue\n)))\n \n{\n\n                \ntext\n \n=\n \ncurNode\n.\nnodeValue\n;\n\n                \nbreak\n;\n\n            \n}\n\n        \n}\n\n\n        \n// Do UML conversion and replace source\n\n        \nel\n \n=\n \ndoc\n.\ncreateElement\n(\n'div'\n);\n\n        \nel\n.\nclassName\n \n=\n \nclassName\n;\n\n        \nparentEl\n.\nparentNode\n.\ninsertBefore\n(\nel\n,\n \nparentEl\n);\n\n        \nparentEl\n.\nparentNode\n.\nremoveChild\n(\nparentEl\n);\n\n        \ndiagram\n \n=\n \nconverter\n.\nparse\n(\ntext\n);\n\n        \ndiagram\n.\ndrawSVG\n(\nel\n,\n \nsettings\n);\n\n    \n}\n\n  \n}\n\n\n})(\nwindow\n,\n \ndocument\n)\n\n\n\n\n\n\n/* flow-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\n'DOMContentLoaded'\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\n'onreadystatechange'\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \n'interactive'\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\n'uml-flowchart'\n,\n \nflowchart\n);});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\n/* sequence-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\n'DOMContentLoaded'\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\n'onreadystatechange'\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \n'interactive'\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\n'uml-sequence-diagram'\n,\n \nDiagram\n,\n \n{\ntheme\n:\n \n'simple'\n});});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\nUML flowcharts and sequence diagrams will be rendered as HTML \n<pre><code>\n tags before the JavaScript libraries are run on them.  They will be assigned the CSS classes \numl-flowchart\n and \numl-sequence-diagram\n respectively for flowcharts and sequence diagrams.\n\n\nLimitations\n\ue157\n\n\nThis extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute \nmarkdown='1'\n.  But since this is run as a preprocessor, it is not aware of the HTML blocks.\n\n\nSuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables, since that extension allows for characters to obscure the blocks like the blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks need to be handled by a block parser, but there is much work to be done on Python Markdown's internal block handlers before this is possible.\n\n\nSuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.\n\n\nFor the reasons above, the nested fences feature really is just a workaround.  But for a lot of people, this functionality is more than sufficient.\n\n\nOptions\n\ue157\n\n\nGeneral syntax highlighting settings are configured via CodeHilite which should installed and enabled in order to get the highlighting.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndisable_indented_code_blocks\n\n\nbool\n\n\nFalse\n\n\nDisables Python Markdown's indented code block parsing.  This is nice if you only ever use fenced blocks.\n\n\n\n\n\n\nnested\n\n\nbool\n\n\nTrue\n\n\nUse nested fences.\n\n\n\n\n\n\numl_flow\n\n\nbool\n\n\nTrue\n\n\nEnable flowcharts.\n\n\n\n\n\n\numl_sequence\n\n\nbool\n\n\nTrue\n\n\nEnable sequence diagrams.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nThis highlights the special features of this extension except for \ndisable_indented_code_blocks\n.\n\n\nNested Fences\n\ue157\n\n\n    ```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n        > ```\n        > Blockquotes?\n        > Not a problem!\n        > ```\n\n\n\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\n\n\nThis is a list that contains multiple code blocks.\n\n\n\n\n\n\nHere is an indented block\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\n\n\n\n\nHere is a fenced code block:\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\nBlockquotes?\nNot a problem!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUML Flow Charts\n\ue157\n\n\n```flow\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1\n```\n\n\n\n\n\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1\n\n\n\n\nUML Sequence Diagrams\n\ue157\n\n\n```sequence\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```\n\n\n\n\n\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(function (document) {\n    var convertUML = function(className, converter, settings) {\n        var charts = document.querySelectorAll(\"pre.\" + className),\n            arr = [],\n            i, j, maxItem, diagaram, text, curNode;\n\n        // Is there a settings object?\n        if (settings === void 0) {\n            settings = {};\n        }\n\n        // Make sure we are dealing with an array\n        for(i = 0, maxItem = charts.length; i < maxItem; i++) arr.push(charts[i]);\n\n        // Find the UML source element and get the text\n        for (i = 0, maxItem = arr.length; i < maxItem; i++) {\n            childEl = arr[i].firstChild;\n            parentEl = childEl.parentNode;\n            text = \"\";\n            for (j = 0; j < childEl.childNodes.length; j++) {\n                curNode = childEl.childNodes[j];\n                whitespace = /^\\s*$/;\n                if (curNode.nodeName === \"#text\" && !(whitespace.test(curNode.nodeValue))) {\n                    text = curNode.nodeValue;\n                    break;\n                }\n            }\n\n            // Do UML conversion and replace source\n            el = document.createElement('div');\n            el.className = className;\n            parentEl.parentNode.insertBefore(el, parentEl);\n            parentEl.parentNode.removeChild(parentEl);\n            diagram = converter.parse(text);\n            diagram.drawSVG(el, settings);\n        }\n    };\n\n    function onReady(fn) {\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', fn);\n        } else {\n            document.attachEvent('onreadystatechange', function() {\n                if (document.readyState === 'interactive')\n                    fn();\n            });\n        }\n    }\n\n    onReady(function(){\n        convertUML('uml-flowchart', flowchart);\n        convertUML('uml-sequence-diagram', Diagram, {theme: 'simple'});\n    });\n})(document);",
            "title": "SuperFences"
        },
        {
            "location": "/extensions/superfences/#overview",
            "text": "SuperFences provides 4 features:   The ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see  Limitations  for more info).  Special UML flowchart fence via the  flow  language specifier.  Special UML sequence diagram via the  sequence  language specifier.  The ability to disable indented code blocks in favor of only using the fenced variant (off by default).   All features can be turned on or off.  SuperFences relies on the  CodeHilite  extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting is desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter  could  be used.   Reminder  Remember to read the  Usage Notes  for information that may be relevant when using this extension!",
            "title": "Overview"
        },
        {
            "location": "/extensions/superfences/#nested-fenced-blocks",
            "text": "Fenced blocks require all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at the very least, the first line of the fenced block needs to have the appropriate number of  >  characters signifying the quote depth.  > ```\n  a fenced block\n  ```  Keep in mind that too many blank lines will cause a blockquote to terminate, so remember to use  >  markers accordingly if not marking every line.  > ```\n  a fenced block\n\n> with blank lines\n  ```  If using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.  -<space>\n    ```\n    a fenced block\n    ```\n\nDefinition\n:<space>\n    ```\n    a fenced block\n    ```",
            "title": "Nested Fenced Blocks"
        },
        {
            "location": "/extensions/superfences/#uml-diagrams",
            "text": "When using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:  flowcharts:   raphael.js  flowchart.js   sequence diagrams:   raphael.js  underscore.js  sequence-diagram.js   All of these libraries can be included using a CDN (you can use the version of your choice):  < script   src = \"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.4/raphael-min.js\" ></ script >  < script   src = \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" ></ script >  < script   src = \"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\" ></ script >  < script   src = \"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.4.2/flowchart.min.js\" ></ script >   Simply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  We are going to show some examples ( uml-converter.js ,  flow-loader.js , and  sequence-loader.js ) that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.  /* uml-converter.js */  ( function   ( win ,   doc )   { \n   win . convertUML   =   function ( className ,   converter ,   settings )   { \n     var   charts   =   doc . querySelectorAll ( \"pre.\"   +   className ), \n         arr   =   [], \n         i ,   j ,   maxItem ,   diagaram ,   text ,   curNode ; \n\n     // Is there a settings object? \n     if   ( settings   ===   void   0 )   { \n         settings   =   {}; \n     } \n\n     // Make sure we are dealing with an array \n     for ( i   =   0 ,   maxItem   =   charts . length ;   i   <   maxItem ;   i ++ )   arr . push ( charts [ i ]) \n\n     // Find the UML source element and get the text \n     for   ( i   =   0 ,   maxItem   =   arr . length ;   i   <   maxItem ;   i ++ )   { \n         childEl   =   arr [ i ]. firstChild ; \n         parentEl   =   childEl . parentNode ; \n         text   =   \"\" ; \n         for   ( j   =   0 ;   j   <   childEl . childNodes . length ;   j ++ )   { \n             curNode   =   childEl . childNodes [ j ]; \n             whitespace   =   /^\\s*$/ ; \n             if   ( curNode . nodeName   ===   \"#text\"   &&   ! ( whitespace . test ( curNode . nodeValue )))   { \n                 text   =   curNode . nodeValue ; \n                 break ; \n             } \n         } \n\n         // Do UML conversion and replace source \n         el   =   doc . createElement ( 'div' ); \n         el . className   =   className ; \n         parentEl . parentNode . insertBefore ( el ,   parentEl ); \n         parentEl . parentNode . removeChild ( parentEl ); \n         diagram   =   converter . parse ( text ); \n         diagram . drawSVG ( el ,   settings ); \n     } \n   }  })( window ,   document )   /* flow-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( 'DOMContentLoaded' ,   fn ); \n     }   else   { \n       doc . attachEvent ( 'onreadystatechange' ,   function ()   { \n         if   ( doc . readyState   ===   'interactive' ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( 'uml-flowchart' ,   flowchart );});  })( document )   /* sequence-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( 'DOMContentLoaded' ,   fn ); \n     }   else   { \n       doc . attachEvent ( 'onreadystatechange' ,   function ()   { \n         if   ( doc . readyState   ===   'interactive' ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( 'uml-sequence-diagram' ,   Diagram ,   { theme :   'simple' });});  })( document )   UML flowcharts and sequence diagrams will be rendered as HTML  <pre><code>  tags before the JavaScript libraries are run on them.  They will be assigned the CSS classes  uml-flowchart  and  uml-sequence-diagram  respectively for flowcharts and sequence diagrams.",
            "title": "UML Diagrams"
        },
        {
            "location": "/extensions/superfences/#limitations",
            "text": "This extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute  markdown='1' .  But since this is run as a preprocessor, it is not aware of the HTML blocks.  SuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables, since that extension allows for characters to obscure the blocks like the blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks need to be handled by a block parser, but there is much work to be done on Python Markdown's internal block handlers before this is possible.  SuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.  For the reasons above, the nested fences feature really is just a workaround.  But for a lot of people, this functionality is more than sufficient.",
            "title": "Limitations"
        },
        {
            "location": "/extensions/superfences/#options",
            "text": "General syntax highlighting settings are configured via CodeHilite which should installed and enabled in order to get the highlighting.     Option  Type  Default  Description      disable_indented_code_blocks  bool  False  Disables Python Markdown's indented code block parsing.  This is nice if you only ever use fenced blocks.    nested  bool  True  Use nested fences.    uml_flow  bool  True  Enable flowcharts.    uml_sequence  bool  True  Enable sequence diagrams.",
            "title": "Options"
        },
        {
            "location": "/extensions/superfences/#examples",
            "text": "This highlights the special features of this extension except for  disable_indented_code_blocks .",
            "title": "Examples"
        },
        {
            "location": "/extensions/superfences/#nested-fences",
            "text": "```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n        > ```\n        > Blockquotes?\n        > Not a problem!\n        > ```  ```\nThis will still be parsed\nas a normal indented code block.\n```  This will still be parsed\nas a fenced code block.    This is a list that contains multiple code blocks.    Here is an indented block  ```\nThis will still be parsed\nas a normal indented code block.\n```    Here is a fenced code block:  This will still be parsed\nas a fenced code block.   Blockquotes?\nNot a problem!",
            "title": "Nested Fences"
        },
        {
            "location": "/extensions/superfences/#uml-flow-charts",
            "text": "```flow\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1\n```  st=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\n\nst->op1->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op1",
            "title": "UML Flow Charts"
        },
        {
            "location": "/extensions/superfences/#uml-sequence-diagrams",
            "text": "```sequence\nTitle: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow\n```  Title: Here is a title\nA->B: Normal line\nB-->C: Dashed line\nC->>D: Open arrow\nD-->>A: Dashed open arrow      \n(function (document) {\n    var convertUML = function(className, converter, settings) {\n        var charts = document.querySelectorAll(\"pre.\" + className),\n            arr = [],\n            i, j, maxItem, diagaram, text, curNode;\n\n        // Is there a settings object?\n        if (settings === void 0) {\n            settings = {};\n        }\n\n        // Make sure we are dealing with an array\n        for(i = 0, maxItem = charts.length; i < maxItem; i++) arr.push(charts[i]);\n\n        // Find the UML source element and get the text\n        for (i = 0, maxItem = arr.length; i < maxItem; i++) {\n            childEl = arr[i].firstChild;\n            parentEl = childEl.parentNode;\n            text = \"\";\n            for (j = 0; j < childEl.childNodes.length; j++) {\n                curNode = childEl.childNodes[j];\n                whitespace = /^\\s*$/;\n                if (curNode.nodeName === \"#text\" && !(whitespace.test(curNode.nodeValue))) {\n                    text = curNode.nodeValue;\n                    break;\n                }\n            }\n\n            // Do UML conversion and replace source\n            el = document.createElement('div');\n            el.className = className;\n            parentEl.parentNode.insertBefore(el, parentEl);\n            parentEl.parentNode.removeChild(parentEl);\n            diagram = converter.parse(text);\n            diagram.drawSVG(el, settings);\n        }\n    };\n\n    function onReady(fn) {\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', fn);\n        } else {\n            document.attachEvent('onreadystatechange', function() {\n                if (document.readyState === 'interactive')\n                    fn();\n            });\n        }\n    }\n\n    onReady(function(){\n        convertUML('uml-flowchart', flowchart);\n        convertUML('uml-sequence-diagram', Diagram, {theme: 'simple'});\n    });\n})(document);",
            "title": "UML Sequence Diagrams"
        },
        {
            "location": "/extensions/tasklist/",
            "text": "Overview\n\ue157\n\n\nThe Tasklist extension adds \nGFM\n style checkbox lists.  They follow the same syntax as \nGFM\n.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncustom_checkbox\n\n\nbool\n\n\nFalse\n\n\nGenerate tasklists in such a way as to allow for styling the checkbox with CSS.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nExample tasklists results are generated with \ncustom_checkbox\n enabled.\n\n\nTask List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3\n\n\n\n\n\nTask List\n\n\n\n\n item 1\n\n\n item A\n\n\n item B\n\n    more text\n\n\n item a\n\n\n item b\n\n\n item c\n\n\n\n\n\n\n item C\n\n\n\n\n\n\n item 2\n\n\n item 3\n\n\n\n\nCSS\n\ue157\n\n\nThe default HTML structure of tasklists is found below:\n\n\n<\nul\n \nclass\n=\n\"task-list\"\n>\n\n    \n<\nli\n \nclass\n=\n\"task-list-item\"\n>\n\n        \n<\ninput\n \ntype\n=\n\"checkbox\"\n \ndisabled\n=\n\"\"\n \nchecked\n=\n\"\"\n>\n\n        item 1\n    \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n\n\n\nIf \ncustom_checkbox\n is enabled the structure will be as follows:\n\n\n<\nul\n \nclass\n=\n\"task-list\"\n>\n\n    \n<\nli\n \nclass\n=\n\"task-list-item\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"task-list-control\"\n>\n\n            \n<\ninput\n \ntype\n=\n\"checkbox\"\n \ndisabled\n \nchecked\n=\n\"\"\n>\n\n            \n<\nspan\n \nclass\n=\n\"task-list-indicator\"\n></\nspan\n>\n\n        \n</\nlabel\n>\n\n        item 1\n    \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask-list\n\n\nAttached to either the \nul\n or \nol\n tag and represents the entire list element.\n\n\n\n\n\n\ntask-list-item\n\n\nThis is attached the \nli\n tag and represents an item in the list.\n\n\n\n\n\n\ntask-list-control\n\n\nThis is attached to the \nlabel\n tag and represents the control object.\n\n\n\n\n\n\ntask-list-indicator\n\n\nThis is attached to the \nspan\n directly following the input and is used to style the visual indicator.\n\n\n\n\n\n\n\n\nIn order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.\n\n\n.markdown-body\n \n.task-list-item\n \n{\n\n  \nlist-style-type\n:\n \nnone\n \n!important\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-item\n \ninput\n[\ntype\n=\n\"checkbox\"\n]\n \n{\n\n  \nmargin\n:\n \n0\n \n4px\n \n0.25em\n \n-20px\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n\n\n\nIf custom checkbox icons are desired, custom styles can be used to give a unique look to the checkmarks.  Below is a very simple CSS example that creates a light gray square with rounded corners and displays a green Unicode check mark when the control is checked.  This can be adapted to use webfonts, images, etc.\n\n\n.markdown-body\n \n.task-list-item\n \n{\n\n  \nlist-style-type\n:\n \nnone\n \n!important\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-item\n \ninput\n[\ntype\n=\n\"checkbox\"\n]\n \n{\n\n  \nmargin\n:\n \n0\n \n4px\n \n0.25em\n \n-20px\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \n{\n\n  \ndisplay\n:\n \ninline\n;\n \n/* Ensure label is inline incase theme sets it to block.*/\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \n{\n\n  \nposition\n:\n \nrelative\n;\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n  \ncolor\n:\n \n#555\n;\n\n  \ncursor\n:\n \npointer\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \ninput\n[\ntype\n=\n\"checkbox\"\n]\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \nopacity\n:\n \n0\n;\n\n  \nz-index\n:\n \n-1\n;\n \n/* Put the input behind the label so it doesn't overlay text */\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-indicator\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntop\n:\n \n-8px\n;\n\n  \nleft\n:\n \n-18px\n;\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nwidth\n:\n  \n14px\n;\n\n  \nheight\n:\n \n14px\n;\n\n  \ncolor\n:\n \n#eee\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder\n-\nradius\n:\n \n.\n25\nrem\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-control\n \ninput\n[\ntype\n=\n\"checkbox\"\n]\n:checked\n \n+\n \n.task-list-indicator\n:\n:before\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nmargin-top\n:\n \n-4px\n;\n\n  \nmargin-left\n:\n \n2px\n;\n\n  \nfont-size\n:\n \n16px\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ncontent\n:\n \n\"\u2714\"\n;\n\n  \ncolor\n:\n \n#1EBB52\n;\n\n\n}",
            "title": "Tasklist"
        },
        {
            "location": "/extensions/tasklist/#overview",
            "text": "The Tasklist extension adds  GFM  style checkbox lists.  They follow the same syntax as  GFM .",
            "title": "Overview"
        },
        {
            "location": "/extensions/tasklist/#options",
            "text": "Option  Type  Default  Description      custom_checkbox  bool  False  Generate tasklists in such a way as to allow for styling the checkbox with CSS.",
            "title": "Options"
        },
        {
            "location": "/extensions/tasklist/#examples",
            "text": "Example tasklists results are generated with  custom_checkbox  enabled.  Task List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3  Task List    item 1   item A   item B \n    more text   item a   item b   item c     item C     item 2   item 3",
            "title": "Examples"
        },
        {
            "location": "/extensions/tasklist/#css",
            "text": "The default HTML structure of tasklists is found below:  < ul   class = \"task-list\" > \n     < li   class = \"task-list-item\" > \n         < input   type = \"checkbox\"   disabled = \"\"   checked = \"\" > \n        item 1\n     </ li >  </ ul >   If  custom_checkbox  is enabled the structure will be as follows:  < ul   class = \"task-list\" > \n     < li   class = \"task-list-item\" > \n         < label   class = \"task-list-control\" > \n             < input   type = \"checkbox\"   disabled   checked = \"\" > \n             < span   class = \"task-list-indicator\" ></ span > \n         </ label > \n        item 1\n     </ li >  </ ul >      Classes  Description      task-list  Attached to either the  ul  or  ol  tag and represents the entire list element.    task-list-item  This is attached the  li  tag and represents an item in the list.    task-list-control  This is attached to the  label  tag and represents the control object.    task-list-indicator  This is attached to the  span  directly following the input and is used to style the visual indicator.     In order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.  .markdown-body   .task-list-item   { \n   list-style-type :   none   !important ;  }  .markdown-body   .task-list-item   input [ type = \"checkbox\" ]   { \n   margin :   0   4px   0.25em   -20px ; \n   vertical-align :   middle ;  }   If custom checkbox icons are desired, custom styles can be used to give a unique look to the checkmarks.  Below is a very simple CSS example that creates a light gray square with rounded corners and displays a green Unicode check mark when the control is checked.  This can be adapted to use webfonts, images, etc.  .markdown-body   .task-list-item   { \n   list-style-type :   none   !important ;  }  .markdown-body   .task-list-item   input [ type = \"checkbox\" ]   { \n   margin :   0   4px   0.25em   -20px ; \n   vertical-align :   middle ;  }  .markdown-body   .task-list-control   { \n   display :   inline ;   /* Ensure label is inline incase theme sets it to block.*/  }  .markdown-body   .task-list-control   { \n   position :   relative ; \n   display :   inline - block ; \n   color :   #555 ; \n   cursor :   pointer ;  }  .markdown-body   .task-list-control   input [ type = \"checkbox\" ]   { \n   position :   absolute ; \n   opacity :   0 ; \n   z-index :   -1 ;   /* Put the input behind the label so it doesn't overlay text */  }  .markdown-body   .task-list-indicator   { \n   position :   absolute ; \n   top :   -8px ; \n   left :   -18px ; \n   display :   block ; \n   width :    14px ; \n   height :   14px ; \n   color :   #eee ; \n   background-color :   #eee ; \n   border - radius :   . 25 rem ;  }  .markdown-body   .task-list-control   input [ type = \"checkbox\" ] :checked   +   .task-list-indicator : :before   { \n   display :   block ; \n   margin-top :   -4px ; \n   margin-left :   2px ; \n   font-size :   16px ; \n   line-height :   1 ; \n   content :   \"\u2714\" ; \n   color :   #1EBB52 ;  }",
            "title": "CSS"
        },
        {
            "location": "/extensions/tilde/",
            "text": "Overview\n\ue157\n\n\nTilde optionally adds two different features which are syntactically built around the \n~\n character: \ndelete\n which inserts \n<\ndel\n></\ndel\n>\n tags and \nsubscript\n which inserts \n<\nsub\n></\nsub\n>\n tags.  Syntax behavior for smart and non-smart variants of \ndelete\n models that of \nbetterem\n.\n\n\nOptions\n\ue157\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_delete\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with delete characters: \n~~delete~~me~~\n \u2192 \ndelete~~me\n.\n\n\n\n\n\n\ndelete\n\n\nbool\n\n\nTrue\n\n\nEnable delete feature.\n\n\n\n\n\n\nsubscript\n\n\nbool\n\n\nTrue\n\n\nEnable subscript feature.\n\n\n\n\n\n\n\n\nExamples\n\ue157\n\n\nThe first feature adds delete emphasis (\ndel\n tags) when inline text is surrounded by double tildes: \n~~delete me~~\n \u2192 \ndelete me\n.  It can optionally be configured to use smart logic: \n~~delete~~me~~\n \u2192 \ndelete~~me\n.\n\n\nThe second feature adds subscripts using single tildes: \nCH~3~CH~2~OH\n \u2192 CH\n3\nCH\n2\nOH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces: \ntext~a\\ subscript~\n \u2192 text\na subscript\n.",
            "title": "Tilde"
        },
        {
            "location": "/extensions/tilde/#overview",
            "text": "Tilde optionally adds two different features which are syntactically built around the  ~  character:  delete  which inserts  < del ></ del >  tags and  subscript  which inserts  < sub ></ sub >  tags.  Syntax behavior for smart and non-smart variants of  delete  models that of  betterem .",
            "title": "Overview"
        },
        {
            "location": "/extensions/tilde/#options",
            "text": "Option  Type  Default  Description      smart_delete  bool  True  Use smart logic with delete characters:  ~~delete~~me~~  \u2192  delete~~me .    delete  bool  True  Enable delete feature.    subscript  bool  True  Enable subscript feature.",
            "title": "Options"
        },
        {
            "location": "/extensions/tilde/#examples",
            "text": "The first feature adds delete emphasis ( del  tags) when inline text is surrounded by double tildes:  ~~delete me~~  \u2192  delete me .  It can optionally be configured to use smart logic:  ~~delete~~me~~  \u2192  delete~~me .  The second feature adds subscripts using single tildes:  CH~3~CH~2~OH  \u2192 CH 3 CH 2 OH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces:  text~a\\ subscript~  \u2192 text a subscript .",
            "title": "Examples"
        },
        {
            "location": "/miscellaneous_extras/",
            "text": "Alternate Slugify\n\ue157\n\n\nPython Markdown's default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.\n\n\nuslugify\n\ue157\n\n\nIn order to handle Unicode characters in slugs better, a slugify has been included at \npymdownx.slugs.uslugify\n.  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override \nToc\n's slugify.\n\n\nuslugify_encoded\n\ue157\n\n\nIf you aren't encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use \npymdownx.slugs.uslugify_encoded\n which will percent encode non-ASCII word chars.  You can use this to override \nToc\n's slugify.",
            "title": "Miscellaneous Extras"
        },
        {
            "location": "/miscellaneous_extras/#alternate-slugify",
            "text": "Python Markdown's default slugify strips out Unicode chars. To better handle Unicode, a couple of optional slugify options have been provided.",
            "title": "Alternate Slugify"
        },
        {
            "location": "/miscellaneous_extras/#uslugify",
            "text": "In order to handle Unicode characters in slugs better, a slugify has been included at  pymdownx.slugs.uslugify .  This assumes you are encoding your HTML as UTF-8.  UTF-8 Unicode should be okay in your slugs in modern browsers.  You can use this to override  Toc 's slugify.",
            "title": "uslugify"
        },
        {
            "location": "/miscellaneous_extras/#uslugify_encoded",
            "text": "If you aren't encoding your HTML as UTF-8, or prefer the safer percent encoded Unicode slugs, you can use  pymdownx.slugs.uslugify_encoded  which will percent encode non-ASCII word chars.  You can use this to override  Toc 's slugify.",
            "title": "uslugify_encoded"
        },
        {
            "location": "/contributing/",
            "text": "Overview\n\ue157\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nAnswer questions in the issue tracker.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try and find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nVersion being used.\n\n\nOperating system.\n\n\nVersion of Python.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nAnswer Questions in Issues\n\ue157\n\n\nTake time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for.  Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out \nDevelopment\n for more info on the environment and process.\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation. Check out \nDevelopment\n for more info on documentation.",
            "title": "Contributing &amp; Support"
        },
        {
            "location": "/contributing/#overview",
            "text": "Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Answer questions in the issue tracker.  Documentation improvements via pull requests.",
            "title": "Overview"
        },
        {
            "location": "/contributing/#bug-reports",
            "text": "Please  read the documentation  and  search the issue tracker  to try and find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Version being used.  Operating system.  Version of Python.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.",
            "title": "Bug Reports"
        },
        {
            "location": "/contributing/#reviewing-code",
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.",
            "title": "Reviewing Code"
        },
        {
            "location": "/contributing/#answer-questions-in-issues",
            "text": "Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for.  Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.",
            "title": "Answer Questions in Issues"
        },
        {
            "location": "/contributing/#pull-requests",
            "text": "Pull requests are welcome, and a great way to help fix bugs and add new features. If you you are interested in directly contributing to the code, please check out  Development  for more info on the environment and process.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/#documentation-improvements",
            "text": "A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation. Check out  Development  for more info on documentation.",
            "title": "Documentation Improvements"
        },
        {
            "location": "/development/",
            "text": "Project Layout\n\ue157\n\n\nThere are a number of files for build, test, and continuous integration in the root of the project, but in general, the project is broken up like so.\n\n\n\u251c\u2500\u2500 doc_theme\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 pymdownx\n\u251c\u2500\u2500 requirements\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 tools\n\n\n\n\n\n\n\n\n\n\n\nDirectory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndoc_theme\n\n\nThis contains document theme tweaks for the current theme\n\n\n\n\n\n\ndocs\n\n\nThis contains the source files for the documentation.\n\n\n\n\n\n\npymdownx\n\n\nThis contains the source code for all the extensions.\n\n\n\n\n\n\nrequirements\n\n\nThis contains files with lists of dependencies required dependencies for continuous integration.\n\n\n\n\n\n\ntests\n\n\nThis contains the various tests that are run in order to ensure code health.\n\n\n\n\n\n\ntools\n\n\nThis contains various tools that are necessary during development.\n\n\n\n\n\n\n\n\nCoding Standards\n\ue157\n\n\nWhen writing code, the code should roughly conform to PEP8 and PEP257 suggestions.  The PyMdown Extensions project utilizes the flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules).  When in doubt follow the formatting hints of existing code when adding or modifying files. existing files.  Listed below are the modules used:\n\n\n\n\nflake8\n\n\nflake8_docstrings\n\n\npep8-naming\n\n\n\n\nFlake8 can be run directly via the command line from the root of the project.\n\n\nflake8\n\n\n\n\n\nBuilding Documents\n\ue157\n\n\nDocuments are in Markdown (with with some additional syntax) and converted to HTML via Python Markdown and this extension bundle. If you would like to build and preview the documentation, you must have these packages installed:\n\n\n\n\nPython Markdown\n: the Markdown parser.\n\n\nMkDocs\n: the document site generator.\n\n\nMaterial\n: a material theme for MkDocs.\n\n\npymdown-extensions: this Python Markdown extension bundle.\n\n\n\n\nIn order to build and preview the documents, just run the following from the root of the project and you should be able to view the docs at \nlocalhost:8000\n in your browser (assuming you have the dependencies installed).\n\n\nmkdocs serve\n\n\n\n\n\nSpell Checking Documents\n\ue157\n\n\nDuring validation we build the docs and run a spell checker on them.  The spell checker script uses \naspell\n.  Currently this project uses the latest aspell.  As the latest aspell is not available on Windows, it is not expected that everyone will install and run aspell locally.  In order to perform the spell check, it is expected you are setup to build the documents, and that you have aspell installed in the your system path. To initiate the spell check run the following command from the root of the project:\n\n\npython spelling.py\n\n\n\n\n\nIt should print out the files with the misspelled words if any are found.  If you find it prints words that are not misspelled, you can add them in \n.dictionary\n in the root of the project.\n\n\nValidation Tests\n\ue157\n\n\nIn order to preserve good code health, a test suite has been put together with \npytest\n. There are currently two kinds of tests: syntax and targeted.  To run these tests, you can use the following command:\n\n\npython run_tests.py\n\n\n\n\n\nSyntax\n\ue157\n\n\nSyntax tests are essentially text files containing Markdown. They are found under \ntests/extensions\n.  \ntest_syntax.py\n scans all the files and converts the files to HTML with the extensions and options defined in \ntests/extensions/tests.yml\n.  They are then compared to the current stored HTML output.  If the two differ, the test fails.\n\n\nTo run \nonly\n these tests, from the root of the project run the following command:\n\n\npython run_tests.py --test-target syntax\n\n\n\n\n\nYou could also run them directly with:\n\n\npy.test tests/test_syntax.py\n\n\n\n\n\nTo accept the differences in a test due to a change(s) you made, you can run the following command:\n\n\npython run_tests.py --update\n\n\n\n\n\nTargeted\n\ue157\n\n\nTargeted tests are unit tests that target specific areas in the code and exercises them to ensure proper functionality.  These tests are found in \ntest_targeted.py\n.\n\n\nYou can run \nonly\n these tests from the root of the project with:\n\n\npython run_tests.py --test-target targeted\n\n\n\n\n\nYou could also run them directly with:\n\n\npy.test tests/test_targeted.py\n\n\n\n\n\nRunning Validation With Tox\n\ue157\n\n\nTox\n is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus aspell).  You could also setup your own virtual environments with the virtualenv module without tox, and manually do the same.\n\n\nFirst, you need to have tox installed:\n\n\npip install tox\n\n\n\n\n\nBy running tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests.  See \ntox.ini\n to learn more.\n\n\ntox\n\n\n\n\n\nIf you don't have all the Python versions needed to test all the environments, those entries will fail.  You can ignore those.  Spelling will also fail if you don't have the correct version of aspell.\n\n\nTo target a specific environment to test, you use the \n-e\n option to select the environment of interest.  To select lint:\n\n\ntox -elint\n\n\n\n\n\nTo select PY27 unit tests (or other versions \u2013 change accordingly):\n\n\ntox -epy27-unittests\n\n\n\n\n\nTo select spelling:\n\n\ntox -espelling\n\n\n\n\n\nCode Coverage\n\ue157\n\n\nWhen running the validation tests through tox, it is setup to track code coverage via the \ncoverage\n module.  Coverage is run on each \npyxx-unittests\n environment.  If you've made changes to the code, you can clear the old coverage data:\n\n\ncoverage erase\n\n\n\n\n\nThen run each unit test environment to and coverage will be calculated. All the data from each run is merged together.  HTML is output for each file in \n.tox/pyXX-unittests/tmp\n.  You can use these to see areas that are not covered/exercised yet with testing.\n\n\nYou can checkout \ntox.ini\n to see how this is accomplished.\n\n\nGenerating Emoji Indexes\n\ue157\n\n\nThe Emoji extension has emoji indexes generated from the source of Gemoji and EmojiOne.  Below is the process for auto-generating these indexes.\n\n\n\n\nEnsure you have \nrequests\n installed: \npip install requests\n.\n\n\nFork the repository and checkout to your machine.\n\n\nNavigate to the root of the project.\n\n\nCall the generator script: \npython tools/gen_emoji.py --gemoji\n or \npython tools/gen_emoji.py --emojione\n.  It will prompt you to select a tag to download.  Please pull the latest \nofficial\n tag.  Please don't pull experimental tags.  This should update the indexes.\n\n\nThen you want to update the tests.\n\n\nForce the tests to update via \npython run_tests.py --update\n.\n\n\n\n\nNothing is fool proof.  If they make a breaking change to the files that the script parses, or the location of the files change, the auto-update tool may need to be updated itself (hopefully this would be a rare occurrence).  If such a change does occur, and you are feeling brave, a pull request would be appreciated, but in time, they will be resolved regardless.",
            "title": "Development"
        },
        {
            "location": "/development/#project-layout",
            "text": "There are a number of files for build, test, and continuous integration in the root of the project, but in general, the project is broken up like so.  \u251c\u2500\u2500 doc_theme\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 pymdownx\n\u251c\u2500\u2500 requirements\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 tools     Directory  Description      doc_theme  This contains document theme tweaks for the current theme    docs  This contains the source files for the documentation.    pymdownx  This contains the source code for all the extensions.    requirements  This contains files with lists of dependencies required dependencies for continuous integration.    tests  This contains the various tests that are run in order to ensure code health.    tools  This contains various tools that are necessary during development.",
            "title": "Project Layout"
        },
        {
            "location": "/development/#coding-standards",
            "text": "When writing code, the code should roughly conform to PEP8 and PEP257 suggestions.  The PyMdown Extensions project utilizes the flake8 linter (with some additional plugins) to ensure code conforms (give or take some of the rules).  When in doubt follow the formatting hints of existing code when adding or modifying files. existing files.  Listed below are the modules used:   flake8  flake8_docstrings  pep8-naming   Flake8 can be run directly via the command line from the root of the project.  flake8",
            "title": "Coding Standards"
        },
        {
            "location": "/development/#building-documents",
            "text": "Documents are in Markdown (with with some additional syntax) and converted to HTML via Python Markdown and this extension bundle. If you would like to build and preview the documentation, you must have these packages installed:   Python Markdown : the Markdown parser.  MkDocs : the document site generator.  Material : a material theme for MkDocs.  pymdown-extensions: this Python Markdown extension bundle.   In order to build and preview the documents, just run the following from the root of the project and you should be able to view the docs at  localhost:8000  in your browser (assuming you have the dependencies installed).  mkdocs serve",
            "title": "Building Documents"
        },
        {
            "location": "/development/#spell-checking-documents",
            "text": "During validation we build the docs and run a spell checker on them.  The spell checker script uses  aspell .  Currently this project uses the latest aspell.  As the latest aspell is not available on Windows, it is not expected that everyone will install and run aspell locally.  In order to perform the spell check, it is expected you are setup to build the documents, and that you have aspell installed in the your system path. To initiate the spell check run the following command from the root of the project:  python spelling.py  It should print out the files with the misspelled words if any are found.  If you find it prints words that are not misspelled, you can add them in  .dictionary  in the root of the project.",
            "title": "Spell Checking Documents"
        },
        {
            "location": "/development/#validation-tests",
            "text": "In order to preserve good code health, a test suite has been put together with  pytest . There are currently two kinds of tests: syntax and targeted.  To run these tests, you can use the following command:  python run_tests.py",
            "title": "Validation Tests"
        },
        {
            "location": "/development/#syntax",
            "text": "Syntax tests are essentially text files containing Markdown. They are found under  tests/extensions .   test_syntax.py  scans all the files and converts the files to HTML with the extensions and options defined in  tests/extensions/tests.yml .  They are then compared to the current stored HTML output.  If the two differ, the test fails.  To run  only  these tests, from the root of the project run the following command:  python run_tests.py --test-target syntax  You could also run them directly with:  py.test tests/test_syntax.py  To accept the differences in a test due to a change(s) you made, you can run the following command:  python run_tests.py --update",
            "title": "Syntax"
        },
        {
            "location": "/development/#targeted",
            "text": "Targeted tests are unit tests that target specific areas in the code and exercises them to ensure proper functionality.  These tests are found in  test_targeted.py .  You can run  only  these tests from the root of the project with:  python run_tests.py --test-target targeted  You could also run them directly with:  py.test tests/test_targeted.py",
            "title": "Targeted"
        },
        {
            "location": "/development/#running-validation-with-tox",
            "text": "Tox  is a great way to run the validation tests, spelling checks, and linting in virtual environments so as not to mess with your current working environment. Tox will use the specified Python version for the given environment and create a virtual environment and install all the needed requirements (minus aspell).  You could also setup your own virtual environments with the virtualenv module without tox, and manually do the same.  First, you need to have tox installed:  pip install tox  By running tox, it will walk through all the environments and create them (assuming you have all the python versions on your machine) and run the related tests.  See  tox.ini  to learn more.  tox  If you don't have all the Python versions needed to test all the environments, those entries will fail.  You can ignore those.  Spelling will also fail if you don't have the correct version of aspell.  To target a specific environment to test, you use the  -e  option to select the environment of interest.  To select lint:  tox -elint  To select PY27 unit tests (or other versions \u2013 change accordingly):  tox -epy27-unittests  To select spelling:  tox -espelling",
            "title": "Running Validation With Tox"
        },
        {
            "location": "/development/#code-coverage",
            "text": "When running the validation tests through tox, it is setup to track code coverage via the  coverage  module.  Coverage is run on each  pyxx-unittests  environment.  If you've made changes to the code, you can clear the old coverage data:  coverage erase  Then run each unit test environment to and coverage will be calculated. All the data from each run is merged together.  HTML is output for each file in  .tox/pyXX-unittests/tmp .  You can use these to see areas that are not covered/exercised yet with testing.  You can checkout  tox.ini  to see how this is accomplished.",
            "title": "Code Coverage"
        },
        {
            "location": "/development/#generating-emoji-indexes",
            "text": "The Emoji extension has emoji indexes generated from the source of Gemoji and EmojiOne.  Below is the process for auto-generating these indexes.   Ensure you have  requests  installed:  pip install requests .  Fork the repository and checkout to your machine.  Navigate to the root of the project.  Call the generator script:  python tools/gen_emoji.py --gemoji  or  python tools/gen_emoji.py --emojione .  It will prompt you to select a tag to download.  Please pull the latest  official  tag.  Please don't pull experimental tags.  This should update the indexes.  Then you want to update the tests.  Force the tests to update via  python run_tests.py --update .   Nothing is fool proof.  If they make a breaking change to the files that the script parses, or the location of the files change, the auto-update tool may need to be updated itself (hopefully this would be a rare occurrence).  If such a change does occur, and you are feeling brave, a pull request would be appreciated, but in time, they will be resolved regardless.",
            "title": "Generating Emoji Indexes"
        },
        {
            "location": "/changelog/",
            "text": "1.5.0\n\ue157\n\n\n\n\nReleased Jan 13, 2017\n\n\n\n\n\n\nNEW\n: New EscapeAll extension.\n\n\nNEW\n: New Snippets extension for including external files into a Markdown file.\n\n\nNEW\n: Arithmatex now has configurable output wrapper.\n\n\nNEW\n: PathConverter no longer verifies existence of path to allow it more flexible usage.\n\n\nNEW\n: PathConverter now only converts relative paths when converting to a relative or absolute location.\n\n\nNEW\n: Improved support for path path identification for PathConverter and B64.\n\n\nFIX\n: Fixed issue where Arithmatex was un-escaping \n$\n within math region.\n\n\nFIX\n: Fixed issue where plugins would append globally changing the escape list opposed to just in the in the Markdown instance.\n\n\nFIX\n: Fixed logic issue where the \nmark\n, \ncaret\n, and \ntilde\n extension weren't quite modeling \nbetterem\n inline behavior.\n\n\nFIX\n: Critics shouldn't allow escaping critic marks as it is not in the spec.\n\n\n\n\n1.4.0\n\ue157\n\n\n\n\nReleased Jan 5, 2017\n\n\n\n\n\n\nNEW\n: HeaderAnchor extension is now deprecated.  It will be removed in a future version.\n\n\nNEW\n: HeaderAnchor is no longer included in the Github extension.\n\n\nNEW\n: Slugify functions are moved to \npymdownx.slug\n in preparation of HeaderAnchor removal.\n\n\nFIX\n: GithubEmoji is not \"pending\" deprecation, but is actually deprecated.\n\n\n\n\n1.3.0\n\ue157\n\n\n\n\nReleased Jan 1, 2017\n\n\n\n\n\n\nNEW\n: New emoji extension that aims to replace githubemoji.  By default it is configured for EmojiOne and Gemoji (Github's emoji).\n\n\nNEW\n: Githubemoji is deprecated. Please use the emoji extension instead.\n\n\nNEW\n: Pymdown extension is deprecated.  Pymdown extension was just a wrapper, please configure the desired individual extension(s) instead of relying on pymdown.\n\n\nNEW\n: Github extension now turns off nl2br by default in order properly emulate recent changes in GFM.  \nno_nl2br\n option is deprecated and will be removed in the future as it no longer reflects GFM behavior.\n\n\n\n\n1.2.0\n\ue157\n\n\n\n\nReleased Nov 1, 2016\n\n\n\n\n\n\nNEW\n: Add option to output tasklists in a more customizable way.\n\n\n\n\n1.1.0\n\ue157\n\n\n\n\nReleased Mar 1, 2016\n\n\n\n\n\n\nNEW\n: Add pypi 3.5 info in setup\n\n\nNEW\n: Add option to magiclink extension to allow the stripping of link protocols (\nhttp://\n etc.).\n\n\nNEW\n: Add option to github extension to disable the use of nl2br to reflect recent changes to GitHub Flavored Markdown.  Currently the default is the legacy (uses nl2br), but a warning will be displayed.  In the future, the option will be defaulted to not use nl2br.\n\n\n\n\n1.0.1\n\ue157\n\n\n\n\nReleased Dec 10, 2015\n\n\n\n\n\n\nFIX\n: Ordinal number 11\nth\n, 12\nth\n, and 13\nth\n\n\n\n\n1.0.0\n\ue157\n\n\n\n\nReleased Dec 8, 2015\n\n\n\n\n\n\nNEW\n: Initial release.",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#150",
            "text": "Released Jan 13, 2017    NEW : New EscapeAll extension.  NEW : New Snippets extension for including external files into a Markdown file.  NEW : Arithmatex now has configurable output wrapper.  NEW : PathConverter no longer verifies existence of path to allow it more flexible usage.  NEW : PathConverter now only converts relative paths when converting to a relative or absolute location.  NEW : Improved support for path path identification for PathConverter and B64.  FIX : Fixed issue where Arithmatex was un-escaping  $  within math region.  FIX : Fixed issue where plugins would append globally changing the escape list opposed to just in the in the Markdown instance.  FIX : Fixed logic issue where the  mark ,  caret , and  tilde  extension weren't quite modeling  betterem  inline behavior.  FIX : Critics shouldn't allow escaping critic marks as it is not in the spec.",
            "title": "1.5.0"
        },
        {
            "location": "/changelog/#140",
            "text": "Released Jan 5, 2017    NEW : HeaderAnchor extension is now deprecated.  It will be removed in a future version.  NEW : HeaderAnchor is no longer included in the Github extension.  NEW : Slugify functions are moved to  pymdownx.slug  in preparation of HeaderAnchor removal.  FIX : GithubEmoji is not \"pending\" deprecation, but is actually deprecated.",
            "title": "1.4.0"
        },
        {
            "location": "/changelog/#130",
            "text": "Released Jan 1, 2017    NEW : New emoji extension that aims to replace githubemoji.  By default it is configured for EmojiOne and Gemoji (Github's emoji).  NEW : Githubemoji is deprecated. Please use the emoji extension instead.  NEW : Pymdown extension is deprecated.  Pymdown extension was just a wrapper, please configure the desired individual extension(s) instead of relying on pymdown.  NEW : Github extension now turns off nl2br by default in order properly emulate recent changes in GFM.   no_nl2br  option is deprecated and will be removed in the future as it no longer reflects GFM behavior.",
            "title": "1.3.0"
        },
        {
            "location": "/changelog/#120",
            "text": "Released Nov 1, 2016    NEW : Add option to output tasklists in a more customizable way.",
            "title": "1.2.0"
        },
        {
            "location": "/changelog/#110",
            "text": "Released Mar 1, 2016    NEW : Add pypi 3.5 info in setup  NEW : Add option to magiclink extension to allow the stripping of link protocols ( http://  etc.).  NEW : Add option to github extension to disable the use of nl2br to reflect recent changes to GitHub Flavored Markdown.  Currently the default is the legacy (uses nl2br), but a warning will be displayed.  In the future, the option will be defaulted to not use nl2br.",
            "title": "1.1.0"
        },
        {
            "location": "/changelog/#101",
            "text": "Released Dec 10, 2015    FIX : Ordinal number 11 th , 12 th , and 13 th",
            "title": "1.0.1"
        },
        {
            "location": "/changelog/#100",
            "text": "Released Dec 8, 2015    NEW : Initial release.",
            "title": "1.0.0"
        },
        {
            "location": "/license/",
            "text": "The MIT License (MIT) (Except where stated below)\n\n\nCopyright \u00a9 2014 - 2017 Isaac Muse\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n\nof this software and associated documentation files (the \"Software\"), to deal\n\nin the Software without restriction, including without limitation the rights\n\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the Software is\n\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\nSOFTWARE.\n\n\n\n\nsuperfences.py is derived from Python Markdown's fenced_code extension.\n\n\nFenced Code Extension for Python Markdown\n\n =========================================\n\nThis extension adds Fenced Code Blocks to Python-Markdown.\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/fenced_code_blocks.html\n\nfor documentation.\n\nOriginal code Copyright 2007-2008 \nWaylan Limberg\n.\n\nAll changes Copyright 2008-2014 The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\ninlinehilite.py is derived from Python Markdown's codehilite extension.\n\n\nCodeHilite Extension for Python-Markdown\n\n ========================================\n\nAdds code/syntax highlighting to standard Python-Markdown code blocks.\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/code_hilite.html\n\nfor documentation.\n\nOriginal code Copyright 2006-2008 \nWaylan Limberg\n.\n\nAll changes Copyright 2008-2014 The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\nextrarawhtml.py is a literal copy and paste from Python Markdown's extra extension.\n\nIt basically splits out the raw html markdown parsing into a separate extension that can\n\nbe used even if it is not desired to use all of 'extra'.\n\n\nPython-Markdown Extra Extension\n\n ===============================\n\nSee \nhttps://pythonhosted.org/Markdown/extensions/extra.html\n\nfor documentation.\n\nCopyright The Python Markdown Project\n\nLicense: \nBSD\n\n\n\n\ngemoji_db.py is generated from Gemoji's source code: \nhttps://github.com/github/gemoji\n.\n\n\nCopyright \u00a9 2013 GitHub, Inc.\n\n\nPermission is hereby granted, free of charge, to any person\n\nobtaining a copy of this software and associated documentation\n\nfiles (the \"Software\"), to deal in the Software without\n\nrestriction, including without limitation the rights to use,\n\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\n\ncopies of the Software, and to permit persons to whom the\n\nSoftware is furnished to do so, subject to the following\n\nconditions:\n\n\nThe above copyright notice and this permission notice shall be\n\nincluded in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nemoji1_db.py is generated from EmojiOne's source code: \nhttps://github.com/Ranks/emojione\n\n\nEmojiOne Non-Artwork\n\n\nApplies to the Javascript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above.\n\nLicense: MIT\n\nComplete Legal Terms: \nhttp://opensource.org/licenses/MIT",
            "title": "License"
        }
    ]
}